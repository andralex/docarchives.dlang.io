[
	{
		"file": "../druntime/src/object_.d",
		"name": "object",
		"members": [
			{
				"name": "Object",
				"line": 68,
				"comment": " All D class objects inherit from Object.\n",
				"members": [
					{
						"endchar": 5,
						"name": "toString",
						"line": 73,
						"comment": " Convert Object to a human readable string.\n",
						"deco": "FZAya",
						"endline": 76,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "toHash",
						"line": 81,
						"comment": " Compute hash function for Object.\n",
						"deco": "FNbNeZm",
						"endline": 85,
						"originalType": "nothrow @trusted size_t()",
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "opCmp",
						"line": 96,
						"comment": " Compare with another Object obj.\n Returns:\n  $(TABLE\n  $(TR $(TD this &lt; obj) $(TD &lt; 0))\n  $(TR $(TD this == obj) $(TD 0))\n  $(TR $(TD this &gt; obj) $(TD &gt; 0))\n  )\n",
						"deco": "FC6ObjectZi",
						"parameters": [
							{
								"name": "o",
								"deco": "C6Object"
							}
						],
						"endline": 103,
						"char": 9,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "opEquals",
						"line": 108,
						"comment": " Returns !=0 if this object does have the same contents as obj.\n",
						"deco": "FC6ObjectZb",
						"parameters": [
							{
								"name": "o",
								"deco": "C6Object"
							}
						],
						"endline": 111,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "factory",
						"line": 143,
						"comment": " Create instance of class specified by the fully qualified name\n classname.\n The class must either have no constructors or have\n a default constructor.\n Returns:\n   null if failed\n Example:\n ---\n module foo.bar;\n\n class C\n {\n     this() { x = 10; }\n     int x;\n }\n\n void main()\n {\n     auto c = cast(C)Object.factory(\"foo.bar.C\");\n     assert(c !is null && c.x == 10);\n }\n ---\n",
						"deco": "FAyaZC6Object",
						"parameters": [
							{
								"name": "classname",
								"deco": "Aya"
							}
						],
						"endline": 151,
						"char": 19,
						"kind": "function",
						"storageClass": [
							"static"
						]
					}
				],
				"char": 1,
				"kind": "class"
			},
			{
				"endchar": 1,
				"name": "opEquals",
				"line": 157,
				"comment": " Returns true if lhs and rhs are equal.\n",
				"deco": "FxC6ObjectxC6ObjectZb",
				"parameters": [
					{
						"name": "lhs",
						"deco": "xC6Object"
					},
					{
						"name": "rhs",
						"deco": "xC6Object"
					}
				],
				"endline": 161,
				"originalType": "bool(const Object lhs, const Object rhs)",
				"char": 6,
				"kind": "function"
			},
			{
				"name": "Interface",
				"line": 184,
				"comment": " Information about an interface.\n When an object is accessed via an interface, an Interface* appears as the\n first entry in its vtbl.\n",
				"members": [
					{
						"offset": 0,
						"name": "classinfo",
						"line": 186,
						"comment": ".classinfo for this interface (not for containing class)\n",
						"deco": "C14TypeInfo_Class",
						"originalType": "TypeInfo_Class",
						"char": 22,
						"kind": "variable"
					},
					{
						"offset": 24,
						"name": "offset",
						"line": 188,
						"comment": "offset to Interface 'this' from Object 'this'\n",
						"deco": "m",
						"originalType": "size_t",
						"char": 17,
						"kind": "variable"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"name": "Classinfo",
				"line": 196,
				"comment": " Runtime type information about a class. Can be retrieved for any class type\n or instance by using the .classinfo property.\n A pointer to this appears as the first entry in the class's vtbl[].\n",
				"deco": "C14TypeInfo_Class",
				"char": 22,
				"kind": "alias"
			},
			{
				"name": "OffsetTypeInfo",
				"line": 202,
				"comment": " Array of pairs giving the offset and type information for each\n member in an aggregate.\n",
				"members": [
					{
						"offset": 0,
						"name": "offset",
						"line": 204,
						"comment": "Offset of member from start of object\n",
						"deco": "m",
						"originalType": "size_t",
						"char": 14,
						"kind": "variable"
					},
					{
						"offset": 8,
						"name": "ti",
						"line": 205,
						"comment": "TypeInfo for this member\n",
						"deco": "C8TypeInfo",
						"originalType": "TypeInfo",
						"char": 14,
						"kind": "variable"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"name": "TypeInfo",
				"line": 213,
				"comment": " Runtime type information about a type.\n Can be retrieved for any type using a\n <a href=\"../expression.html#typeidexpression\">TypeidExpression</a>.\n",
				"members": [
					{
						"endchar": 79,
						"name": "getHash",
						"line": 259,
						"comment": "Returns a hash of the instance of a type.\n",
						"deco": "xFNbNexPvZm",
						"parameters": [
							{
								"name": "p",
								"deco": "xPv"
							}
						],
						"endline": 259,
						"originalType": "const nothrow @trusted size_t(in void* p)",
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 68,
						"name": "equals",
						"line": 262,
						"comment": "Compares two instances for equality.\n",
						"deco": "xFxPvxPvZb",
						"parameters": [
							{
								"name": "p1",
								"deco": "xPv"
							},
							{
								"name": "p2",
								"deco": "xPv"
							}
						],
						"endline": 262,
						"originalType": "const bool(in void* p1, in void* p2)",
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 75,
						"name": "compare",
						"line": 265,
						"comment": "Compares two instances for &lt;, ==, or &gt;.\n",
						"deco": "xFxPvxPvZi",
						"parameters": [
							{
								"name": "p1",
								"deco": "xPv"
							},
							{
								"name": "p2",
								"deco": "xPv"
							}
						],
						"endline": 265,
						"originalType": "const int(in void* p1, in void* p2)",
						"char": 9,
						"kind": "function"
					},
					{
						"endchar": 73,
						"name": "tsize",
						"line": 268,
						"comment": "Returns size of the type.\n",
						"deco": "xFNaNbNdNiNfZm",
						"endline": 268,
						"originalType": "const pure nothrow @nogc @property @safe size_t()",
						"char": 22,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "swap",
						"line": 271,
						"comment": "Swaps two instances of the type.\n",
						"deco": "xFPvPvZv",
						"parameters": [
							{
								"name": "p1",
								"deco": "Pv"
							},
							{
								"name": "p2",
								"deco": "Pv"
							}
						],
						"endline": 280,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 78,
						"name": "next",
						"line": 284,
						"comment": "Get TypeInfo for 'next' type, as defined by what kind of type this is,\n\nnull if none.\n",
						"deco": "NgFNaNbNdNiZNgC8TypeInfo",
						"endline": 284,
						"char": 31,
						"kind": "function"
					},
					{
						"endchar": 72,
						"name": "init",
						"line": 289,
						"comment": "Return default initializer.  If the type should be initialized to all zeros,\n\nan array with a null ptr and a length equal to the type size will be returned.\n",
						"deco": "xFNaNbNiNfZAxv",
						"endline": 289,
						"char": 19,
						"kind": "function"
					},
					{
						"endchar": 71,
						"name": "flags",
						"line": 293,
						"comment": "Get flags for type: 1 means GC should scan for pointers,\n\n2 means arg of this type is passed in XMM register\n",
						"deco": "xFNaNbNdNiNfZk",
						"endline": 293,
						"char": 20,
						"kind": "function"
					},
					{
						"endchar": 58,
						"name": "offTi",
						"line": 296,
						"comment": "Get type information on the contents of the type; null if not available\n",
						"deco": "xFZAxS6object14OffsetTypeInfo",
						"endline": 296,
						"char": 29,
						"kind": "function"
					},
					{
						"endchar": 34,
						"name": "destroy",
						"line": 298,
						"comment": "Run the destructor on the object and all its sub-objects\n",
						"deco": "xFPvZv",
						"parameters": [
							{
								"name": "p",
								"deco": "Pv"
							}
						],
						"endline": 298,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 35,
						"name": "postblit",
						"line": 300,
						"comment": "Run the postblit on the object and all its sub-objects\n",
						"deco": "xFPvZv",
						"parameters": [
							{
								"name": "p",
								"deco": "Pv"
							}
						],
						"endline": 300,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 78,
						"name": "talign",
						"line": 304,
						"comment": "Return alignment of type\n",
						"deco": "xFNaNbNdNiNfZm",
						"endline": 304,
						"originalType": "const pure nothrow @nogc @property @safe size_t()",
						"char": 22,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "argTypes",
						"line": 309,
						"comment": " Return internal info on arguments fitting into 8byte.\n See X86-64 ABI 3.2.3\n",
						"deco": "FNbNfJC8TypeInfoJC8TypeInfoZi",
						"parameters": [
							{
								"name": "arg1",
								"storageClass": [
									"out"
								],
								"deco": "C8TypeInfo"
							},
							{
								"name": "arg2",
								"storageClass": [
									"out"
								],
								"deco": "C8TypeInfo"
							}
						],
						"endline": 313,
						"char": 26,
						"kind": "function"
					},
					{
						"endchar": 87,
						"name": "rtInfo",
						"line": 317,
						"comment": " Return info used by the garbage collector to do precise collection.\n",
						"deco": "xFNaNbNdNiNfZPyv",
						"endline": 317,
						"char": 32,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "class"
			},
			{
				"members": [
					{
						"offset": 16,
						"name": "init",
						"line": 831,
						"comment": " class static initializer\n (init.length gives size in bytes of class)\n",
						"deco": "Ag",
						"char": 17,
						"kind": "variable"
					},
					{
						"offset": 32,
						"name": "name",
						"line": 834,
						"comment": "class name\n",
						"deco": "Aya",
						"char": 17,
						"kind": "variable"
					},
					{
						"offset": 48,
						"name": "vtbl",
						"line": 835,
						"comment": "virtual function pointer table\n",
						"deco": "APv",
						"char": 17,
						"kind": "variable"
					},
					{
						"offset": 64,
						"name": "interfaces",
						"line": 836,
						"comment": "interfaces this class implements\n",
						"deco": "AS6object9Interface",
						"char": 17,
						"kind": "variable"
					},
					{
						"offset": 80,
						"name": "base",
						"line": 837,
						"comment": "base class\n",
						"deco": "C14TypeInfo_Class",
						"originalType": "TypeInfo_Class",
						"char": 22,
						"kind": "variable"
					},
					{
						"endchar": 5,
						"name": "find",
						"line": 863,
						"comment": " Search all modules for TypeInfo_Class corresponding to classname.\n Returns: null if not found\n",
						"deco": "FxAaZxC14TypeInfo_Class",
						"parameters": [
							{
								"name": "classname",
								"deco": "xAa"
							}
						],
						"endline": 877,
						"originalType": "const(TypeInfo_Class)(in char[] classname)",
						"char": 34,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "create",
						"line": 882,
						"comment": " Create instance of Object represented by 'this'.\n",
						"deco": "xFZC6Object",
						"endline": 894,
						"char": 12,
						"kind": "function"
					}
				],
				"name": "TypeInfo_Class",
				"line": 768,
				"comment": " Runtime type information about a class.\n Can be retrieved from an object instance by using the\n $(LINK2 ../property.html#classinfo, .classinfo) property.\n",
				"base": "TypeInfo",
				"char": 1,
				"kind": "class"
			},
			{
				"name": "Throwable",
				"line": 1302,
				"comment": "\n\n\n\n The base class of all thrown objects.\n\n All thrown objects must inherit from Throwable. Class $(D Exception), which\n derives from this class, represents the category of thrown objects that are\n safe to catch and handle. In principle, one should not catch Throwable\n objects that are not derived from $(D Exception), as they represent\n unrecoverable runtime errors. Certain runtime guarantees may fail to hold\n when these errors are thrown, making it unsafe to continue execution after\n catching them.\n",
				"members": [
					{
						"offset": 16,
						"name": "msg",
						"line": 1311,
						"comment": "A message describing the error.\n",
						"deco": "Aya",
						"char": 17,
						"kind": "variable"
					},
					{
						"offset": 32,
						"name": "file",
						"line": 1317,
						"comment": " The _file name and line number of the D source code corresponding with\n where the error was thrown from.\n",
						"deco": "Aya",
						"char": 17,
						"kind": "variable"
					},
					{
						"offset": 48,
						"name": "line",
						"line": 1318,
						"comment": "ditto\n",
						"deco": "m",
						"originalType": "size_t",
						"char": 17,
						"kind": "variable"
					},
					{
						"offset": 56,
						"name": "info",
						"line": 1325,
						"comment": " The stack trace of where the error happened. This is an opaque object\n that can either be converted to $(D string), or iterated over with $(D\n foreach) to extract the items in the stack trace (as strings).\n",
						"deco": "C6object9Throwable9TraceInfo",
						"originalType": "TraceInfo",
						"char": 17,
						"kind": "variable"
					},
					{
						"offset": 64,
						"name": "next",
						"line": 1333,
						"comment": " A reference to the _next error in the list. This is used when a new\n $(D Throwable) is thrown from inside a $(D catch) block. The originally\n caught $(D Exception) will be chained to the new $(D Throwable) via this\n field.\n",
						"deco": "C6object9Throwable",
						"originalType": "Throwable",
						"char": 17,
						"kind": "variable"
					},
					{
						"endchar": 5,
						"name": "toString",
						"line": 1355,
						"comment": " Overrides $(D Object.toString) and returns the error message.\n Internally this forwards to the $(D toString) overload that\n takes a $(PARAM sink) delegate.\n",
						"deco": "FZAya",
						"endline": 1360,
						"char": 21,
						"kind": "function",
						"overrides": [
							"object.Object.toString"
						],
						"storageClass": [
							"override"
						]
					},
					{
						"endchar": 5,
						"name": "toString",
						"line": 1368,
						"comment": " The Throwable hierarchy uses a toString overload that takes a\n $(PARAM sink) delegate to avoid GC allocations, which cannot be\n performed in certain error situations.  Override this $(D\n toString) method to customize the error message.\n",
						"deco": "xFMDFxAaZvZv",
						"parameters": [
							{
								"name": "sink",
								"storageClass": [
									"scope"
								],
								"deco": "DFxAaZv"
							}
						],
						"endline": 1395,
						"originalType": "const void(scope void delegate(in char[]) sink)",
						"char": 10,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "class"
			},
			{
				"endchar": 1,
				"name": "rt_setTraceHandler",
				"line": 1409,
				"comment": " Overrides the default trace hander with a user-supplied version.\n\n Params:\n  h = The new trace handler.  Set to null to use the default handler.\n",
				"deco": "UPFPvZC6object9Throwable9TraceInfoZv",
				"parameters": [
					{
						"name": "h",
						"deco": "PFPvZC6object9Throwable9TraceInfo"
					}
				],
				"endline": 1412,
				"originalType": "extern (C) void(TraceHandler h)",
				"char": 18,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "rt_getTraceHandler",
				"line": 1417,
				"comment": " Return the current trace handler\n",
				"deco": "UZPFPvZC6object9Throwable9TraceInfo",
				"endline": 1420,
				"originalType": "extern (C) TraceHandler()",
				"char": 25,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "_d_traceContext",
				"line": 1436,
				"comment": " This function will be called when an exception is constructed.  The\n user-supplied trace handler will be called if one has been supplied,\n otherwise no trace will be generated.\n\n Params:\n  ptr = A pointer to the location from which to generate the trace, or null\n        if the trace should be generated from within the trace handler\n        itself.\n\n Returns:\n  An object describing the current calling context or null if no handler is\n  supplied.\n",
				"deco": "UPvZC6object9Throwable9TraceInfo",
				"parameters": [
					{
						"name": "ptr",
						"deco": "Pv",
						"default": "null"
					}
				],
				"endline": 1441,
				"originalType": "extern (C) Throwable.TraceInfo(void* ptr = null)",
				"char": 32,
				"kind": "function"
			},
			{
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 1461,
						"comment": " Creates a new instance of Exception. The next parameter is used\n internally and should always be $(D null) when passed by user code.\n This constructor does not automatically throw the newly-created\n Exception; the $(D throw) statement should be used for that purpose.\n",
						"deco": "FNaNbNfAyaAyamC6object9ThrowableZC9Exception",
						"parameters": [
							{
								"name": "msg",
								"deco": "Aya"
							},
							{
								"name": "file",
								"deco": "Aya",
								"default": "__FILE__"
							},
							{
								"name": "line",
								"deco": "m",
								"default": "cast(ulong)__LINE__"
							},
							{
								"name": "next",
								"deco": "C6object9Throwable",
								"default": "null"
							}
						],
						"endline": 1464,
						"originalType": "pure nothrow @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 24,
						"kind": "constructor"
					}
				],
				"name": "Exception",
				"line": 1452,
				"comment": " The base class of all errors that are safe to catch and handle.\n\n In principle, only thrown objects derived from this class are safe to catch\n inside a $(D catch) block. Thrown objects not derived from Exception\n represent runtime errors that should not be caught, as certain runtime\n guarantees may not hold, making it unsafe to continue program execution.\n",
				"base": "Throwable",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 1517,
						"comment": " Creates a new instance of Error. The next parameter is used\n internally and should always be $(D null) when passed by user code.\n This constructor does not automatically throw the newly-created\n Error; the $(D throw) statement should be used for that purpose.\n",
						"deco": "FNaNbNfAyaC6object9ThrowableZC6object5Error",
						"parameters": [
							{
								"name": "msg",
								"deco": "Aya"
							},
							{
								"name": "next",
								"deco": "C6object9Throwable",
								"default": "null"
							}
						],
						"endline": 1521,
						"originalType": "pure nothrow @safe (string msg, Throwable next = null)",
						"char": 24,
						"kind": "constructor"
					},
					{
						"offset": 72,
						"name": "bypassedException",
						"line": 1531,
						"comment": "The first $(D Exception) which was bypassed when this Error was thrown,\n\nor $(D null) if no $(D Exception)s were pending.\n",
						"deco": "C6object9Throwable",
						"originalType": "Throwable",
						"char": 17,
						"kind": "variable"
					}
				],
				"name": "Error",
				"line": 1509,
				"comment": " The base class of all unrecoverable runtime errors.\n\n This represents the category of $(D Throwable) objects that are $(B not)\n safe to catch and handle. In principle, one should not catch Error\n objects, as they represent unrecoverable runtime errors.\n Certain runtime guarantees may fail to hold when these errors are\n thrown, making it unsafe to continue execution after catching them.\n",
				"base": "Throwable",
				"char": 1,
				"kind": "class"
			},
			{
				"name": "IMonitor",
				"line": 1760,
				"comment": "\n\n\n",
				"deco": "C6object6Object7Monitor",
				"char": 29,
				"kind": "alias"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "destroy",
						"line": 2313,
						"comment": "    Destroys the given object and puts it in an invalid state. It's used to\n    destroy an object so that any cleanup which its destructor or finalizer\n    does is done and so that it no longer references any other objects. It does\n    $(I not) initiate a GC cycle or free any GC memory.\n",
						"type": "void(T obj)",
						"parameters": [
							{
								"name": "obj",
								"type": "T"
							}
						],
						"endline": 2316,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "destroy",
				"line": 2313,
				"comment": "    Destroys the given object and puts it in an invalid state. It's used to\n    destroy an object so that any cleanup which its destructor or finalizer\n    does is done and so that it no longer references any other objects. It does\n    $(I not) initiate a GC cycle or free any GC memory.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "capacity",
						"line": 2503,
						"comment": " (Property) Get the current capacity of a slice. The capacity is the size\n that the slice can grow to before the underlying array must be\n reallocated or extended.\n\n If an append must reallocate a slice with no possibility of extension, then\n 0 is returned. This happens when the slice references a static array, or\n if another slice references elements past the end of the current slice.\n\n Note: The capacity of a slice may be impacted by operations on other slices.\n",
						"type": "pure nothrow @property size_t(T[] arr)",
						"parameters": [
							{
								"name": "arr",
								"type": "T[]"
							}
						],
						"endline": 2506,
						"char": 18,
						"kind": "function"
					}
				],
				"name": "capacity",
				"line": 2503,
				"comment": " (Property) Get the current capacity of a slice. The capacity is the size\n that the slice can grow to before the underlying array must be\n reallocated or extended.\n\n If an append must reallocate a slice with no possibility of extension, then\n 0 is returned. This happens when the slice references a static array, or\n if another slice references elements past the end of the current slice.\n\n Note: The capacity of a slice may be impacted by operations on other slices.\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL2508_23)\n---\n//Static array slice: no capacity\nint[4] sarray = [1, 2, 3, 4];\nint[]  slice  = sarray[];\nassert(sarray.capacity == 0);\n//Appending to slice will reallocate to a new array\nslice ~= 5;\nassert(slice.capacity >= 5);\n\n//Dynamic array slices\nint[] a = [1, 2, 3, 4];\nint[] b = a[1 .. $];\nint[] c = a[1 .. $ - 1];\nassert(a.capacity != 0);\nassert(a.capacity == b.capacity + 1); //both a and b share the same tail\nassert(c.capacity == 0);              //an append to c must relocate c.\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL2508_23)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 18,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "reserve",
						"line": 2535,
						"comment": " Reserves capacity for a slice. The capacity is the size\n that the slice can grow to before the underlying array must be\n reallocated or extended.\n\n The return value is the new capacity of the array (which may be larger than\n the requested capacity).\n",
						"type": "pure nothrow @trusted size_t(ref T[] arr, size_t newcapacity)",
						"parameters": [
							{
								"name": "arr",
								"type": "T[]",
								"storageClass": [
									"ref"
								]
							},
							{
								"name": "newcapacity",
								"type": "size_t"
							}
						],
						"endline": 2538,
						"char": 8,
						"kind": "function"
					}
				],
				"name": "reserve",
				"line": 2535,
				"comment": " Reserves capacity for a slice. The capacity is the size\n that the slice can grow to before the underlying array must be\n reallocated or extended.\n\n The return value is the new capacity of the array (which may be larger than\n the requested capacity).\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL2540_24)\n---\n//Static array slice: no capacity. Reserve relocates.\nint[4] sarray = [1, 2, 3, 4];\nint[]  slice  = sarray[];\nauto u = slice.reserve(8);\nassert(u >= 8);\nassert(sarray.ptr !is slice.ptr);\nassert(slice.capacity == u);\n\n//Dynamic array slices\nint[] a = [1, 2, 3, 4];\na.reserve(8); //prepare a for appending 4 more items\nauto p = a.ptr;\nu = a.capacity;\na ~= [5, 6, 7, 8];\nassert(p == a.ptr);      //a should not have been reallocated\nassert(u == a.capacity); //a should not have been extended\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL2540_24)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 8,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "assumeSafeAppend",
						"line": 2582,
						"comment": " Assume that it is safe to append to this array. Appends made to this array\n after calling this function may append in place, even if the array was a\n slice of a larger array to begin with.\n\n Use this only when it is certain there are no elements in use beyond the\n array in the memory block.  If there are, those elements will be\n overwritten by appending to this array.\n\n Calling this function, and then using references to data located after the\n given array results in undefined behavior.\n\n Returns:\n   The input is returned.\n",
						"type": "nothrow ref inout(T[])(auto ref inout(T[]) arr)",
						"parameters": [
							{
								"name": "arr",
								"type": "inout(T[])",
								"storageClass": [
									"auto",
									"ref"
								]
							}
						],
						"endline": 2586,
						"char": 21,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "assumeSafeAppend",
				"line": 2582,
				"comment": " Assume that it is safe to append to this array. Appends made to this array\n after calling this function may append in place, even if the array was a\n slice of a larger array to begin with.\n\n Use this only when it is certain there are no elements in use beyond the\n array in the memory block.  If there are, those elements will be\n overwritten by appending to this array.\n\n Calling this function, and then using references to data located after the\n given array results in undefined behavior.\n\n Returns:\n   The input is returned.\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL2588_26)\n---\nint[] a = [1, 2, 3, 4];\n\n// Without assumeSafeAppend. Appending relocates.\nint[] b = a [0 .. 3];\nb ~= 5;\nassert(a.ptr != b.ptr);\n\n// With assumeSafeAppend. Appending overwrites.\nint[] c = a [0 .. 3];\nc.assumeSafeAppend() ~= 5;\nassert(a.ptr == c.ptr);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL2588_26)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 21,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "_ArrayEq",
						"line": 2686,
						"comment": " Helper function used to see if two containers of different\n types have the same contents in the same sequence.\n",
						"type": "bool(T1[] a1, T2[] a2)",
						"parameters": [
							{
								"name": "a1",
								"type": "T1[]"
							},
							{
								"name": "a2",
								"type": "T2[]"
							}
						],
						"endline": 2696,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "_ArrayEq",
				"line": 2686,
				"comment": " Helper function used to see if two containers of different\n types have the same contents in the same sequence.\n",
				"parameters": [
					{
						"name": "T1",
						"kind": "type"
					},
					{
						"name": "T2",
						"kind": "type"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"members": [
					{
						"name": "RTInfo",
						"line": 2715,
						"init": "null",
						"char": 10,
						"kind": "variable",
						"storageClass": [
							"enum"
						]
					}
				],
				"name": "RTInfo",
				"line": 2713,
				"comment": " Create RTInfo for type T\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "dup",
						"line": 2817,
						"comment": "Provide the .dup array property.\n",
						"type": "@property (T[] a)",
						"parameters": [
							{
								"name": "a",
								"type": "T[]"
							}
						],
						"endline": 2829,
						"char": 16,
						"kind": "function",
						"storageClass": [
							"auto"
						]
					}
				],
				"name": "dup",
				"line": 2817,
				"comment": "Provide the .dup array property.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 16,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "dup",
						"line": 2833,
						"comment": "ditto\n",
						"type": "@property T[](const(T)[] a)",
						"parameters": [
							{
								"name": "a",
								"type": "const(T)[]"
							}
						],
						"endline": 2841,
						"char": 15,
						"kind": "function"
					}
				],
				"name": "dup",
				"line": 2833,
				"comment": "ditto\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 15,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "dup",
						"line": 2844,
						"comment": "ditto\n",
						"type": "@property @trusted T[](const(T)[] a)",
						"parameters": [
							{
								"name": "a",
								"type": "const(T)[]"
							}
						],
						"endline": 2848,
						"char": 15,
						"kind": "function"
					}
				],
				"name": "dup",
				"line": 2844,
				"comment": "ditto\n",
				"parameters": [
					{
						"name": "T",
						"deco": "v",
						"kind": "type"
					}
				],
				"char": 15,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "idup",
						"line": 2851,
						"comment": "Provide the .idup array property.\n",
						"type": "@property immutable(T)[](T[] a)",
						"parameters": [
							{
								"name": "a",
								"type": "T[]"
							}
						],
						"endline": 2861,
						"char": 26,
						"kind": "function"
					}
				],
				"name": "idup",
				"line": 2851,
				"comment": "Provide the .idup array property.\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 26,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "idup",
						"line": 2864,
						"comment": "ditto\n",
						"type": "@property immutable(T)[](const(T)[] a)",
						"parameters": [
							{
								"name": "a",
								"type": "const(T)[]"
							}
						],
						"endline": 2867,
						"char": 26,
						"kind": "function"
					}
				],
				"name": "idup",
				"line": 2864,
				"comment": "ditto\n",
				"parameters": [
					{
						"name": "T",
						"deco": "v",
						"kind": "type"
					}
				],
				"char": 26,
				"kind": "template"
			}
		],
		"comment": " Forms the symbols available to all D programs. Includes Object, which is\n the root of the class object hierarchy.  This module is implicitly\n imported.\n Macros:\n      WIKI = Object\n\n Copyright: Copyright Digital Mars 2000 - 2011.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Walter Bright, Sean Kelly\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/etc/linux/memoryerror.d",
		"name": "etc.linux.memoryerror",
		"members": [
			{
				"members": [],
				"name": "InvalidPointerError",
				"line": 54,
				"comment": " Thrown on POSIX systems when a SIGSEGV signal is received.\n",
				"base": "Error",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "NullPointerError",
				"line": 70,
				"comment": " Thrown on null pointer dereferences.\n",
				"base": "InvalidPointerError",
				"char": 1,
				"kind": "class"
			}
		],
		"comment": " Handle page protection errors using D errors (exceptions). $(D NullPointerError) is\n thrown when dereferencing null pointers. A system-dependent error is thrown in other\n cases.\n\n Note: Only x86 and x86_64 are supported for now.\n\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE_1_0.txt)\n Authors:   Amaury SECHET, FeepingCreature, Vladimir Panteleev\n Source: $(DRUNTIMESRC src/etc/linux/memory.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/atomic.d",
		"name": "core.atomic",
		"members": [],
		"comment": " The atomic module provides basic support for lock-free\n concurrent programming.\n\n Copyright: Copyright Sean Kelly 2005 - 2010.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly, Alex Rønne Petersen\n Source:    $(DRUNTIMESRC core/_atomic.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/math.d",
		"name": "core.math",
		"members": [
			{
				"name": "cos",
				"line": 43,
				"comment": " Returns cosine of x. x is in radians.\n\n      $(TABLE_SV\n      $(TR $(TH x)                 $(TH cos(x)) $(TH invalid?))\n      $(TR $(TD $(NAN))            $(TD $(NAN)) $(TD yes)     )\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD $(NAN)) $(TD yes)     )\n      )\n Bugs:\n      Results are undefined if |x| >= $(POWER 2,64).\n",
				"deco": "FNaNbNiNfeZe",
				"parameters": [
					{
						"name": "x",
						"deco": "e"
					}
				],
				"char": 6,
				"kind": "function"
			},
			{
				"name": "sin",
				"line": 58,
				"comment": " Returns sine of x. x is in radians.\n\n      $(TABLE_SV\n      $(TR $(TH x)               $(TH sin(x))      $(TH invalid?))\n      $(TR $(TD $(NAN))          $(TD $(NAN))      $(TD yes))\n      $(TR $(TD $(PLUSMN)0.0)    $(TD $(PLUSMN)0.0) $(TD no))\n      $(TR $(TD $(PLUSMNINF))    $(TD $(NAN))      $(TD yes))\n      )\n Bugs:\n      Results are undefined if |x| >= $(POWER 2,64).\n",
				"deco": "FNaNbNiNfeZe",
				"parameters": [
					{
						"name": "x",
						"deco": "e"
					}
				],
				"char": 6,
				"kind": "function"
			},
			{
				"name": "rndtol",
				"line": 66,
				"comment": " Returns x rounded to a long value using the current rounding mode.\n If the integer value of x is\n greater than long.max, the result is\n indeterminate.\n",
				"deco": "FNaNbNiNfeZl",
				"parameters": [
					{
						"name": "x",
						"deco": "e"
					}
				],
				"char": 6,
				"kind": "function"
			},
			{
				"name": "rndtonl",
				"line": 75,
				"comment": " Returns x rounded to a long value using the FE_TONEAREST rounding mode.\n If the integer value of x is\n greater than long.max, the result is\n indeterminate.\n",
				"deco": "UNieZe",
				"parameters": [
					{
						"name": "x",
						"deco": "e"
					}
				],
				"char": 17,
				"kind": "function"
			},
			{
				"name": "sqrt",
				"line": 90,
				"comment": " Compute square root of x.\n\n      $(TABLE_SV\n      $(TR $(TH x)         $(TH sqrt(x))   $(TH invalid?))\n      $(TR $(TD -0.0)      $(TD -0.0)      $(TD no))\n      $(TR $(TD $(LT)0.0)  $(TD $(NAN))    $(TD yes))\n      $(TR $(TD +$(INFIN)) $(TD +$(INFIN)) $(TD no))\n      )\n",
				"deco": "FNaNbNiNffZf",
				"parameters": [
					{
						"name": "x",
						"deco": "f"
					}
				],
				"char": 11,
				"kind": "function"
			},
			{
				"name": "sqrt",
				"line": 91,
				"comment": "ditto\n\n Compute square root of x.\n\n      $(TABLE_SV\n      $(TR $(TH x)         $(TH sqrt(x))   $(TH invalid?))\n      $(TR $(TD -0.0)      $(TD -0.0)      $(TD no))\n      $(TR $(TD $(LT)0.0)  $(TD $(NAN))    $(TD yes))\n      $(TR $(TD +$(INFIN)) $(TD +$(INFIN)) $(TD no))\n      )\n",
				"deco": "FNaNbNiNfdZd",
				"parameters": [
					{
						"name": "x",
						"deco": "d"
					}
				],
				"char": 12,
				"kind": "function"
			},
			{
				"name": "sqrt",
				"line": 92,
				"comment": "ditto\n\n Compute square root of x.\n\n      $(TABLE_SV\n      $(TR $(TH x)         $(TH sqrt(x))   $(TH invalid?))\n      $(TR $(TD -0.0)      $(TD -0.0)      $(TD no))\n      $(TR $(TD $(LT)0.0)  $(TD $(NAN))    $(TD yes))\n      $(TR $(TD +$(INFIN)) $(TD +$(INFIN)) $(TD no))\n      )\n",
				"deco": "FNaNbNiNfeZe",
				"parameters": [
					{
						"name": "x",
						"deco": "e"
					}
				],
				"char": 10,
				"kind": "function"
			},
			{
				"name": "ldexp",
				"line": 100,
				"comment": " Compute n * 2$(SUP exp)\n References: frexp\n",
				"deco": "FNaNbNiNfeiZe",
				"parameters": [
					{
						"name": "n",
						"deco": "e"
					},
					{
						"name": "exp",
						"deco": "i"
					}
				],
				"char": 6,
				"kind": "function"
			},
			{
				"name": "fabs",
				"line": 116,
				"comment": " Returns |x|\n\n      $(TABLE_SV\n      $(TR $(TH x)                 $(TH fabs(x)))\n      $(TR $(TD $(PLUSMN)0.0)      $(TD +0.0) )\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD +$(INFIN)) )\n      )\n",
				"deco": "FNaNbNiNfeZe",
				"parameters": [
					{
						"name": "x",
						"deco": "e"
					}
				],
				"char": 6,
				"kind": "function"
			},
			{
				"name": "rint",
				"line": 126,
				"comment": " Rounds x to the nearest integer value, using the current rounding\n mode.\n If the return value is not equal to x, the FE_INEXACT\n exception is raised.\n $(B nearbyint) performs\n the same operation, but does not set the FE_INEXACT exception.\n",
				"deco": "FNaNbNiNfeZe",
				"parameters": [
					{
						"name": "x",
						"deco": "e"
					}
				],
				"char": 6,
				"kind": "function"
			},
			{
				"name": "yl2x",
				"line": 133,
				"comment": " Building block functions, they\n translate to a single x87 instruction.\n",
				"deco": "FNaNbNiNfeeZe",
				"parameters": [
					{
						"name": "x",
						"deco": "e"
					},
					{
						"name": "y",
						"deco": "e"
					}
				],
				"char": 6,
				"kind": "function"
			}
		],
		"comment": " Builtin mathematical intrinsics\n\n Source: $(DRUNTIMESRC core/_math.d)\n Macros:\n      TABLE_SV = <table border=1 cellpadding=4 cellspacing=0>\n              <caption>Special Values</caption>\n              $0</table>\n\n      NAN = $(RED NAN)\n      SUP = <span style=\"vertical-align:super;font-size:smaller\">$0</span>\n      POWER = $1<sup>$2</sup>\n      PLUSMN = &plusmn;\n      INFIN = &infin;\n      PLUSMNINF = &plusmn;&infin;\n      LT = &lt;\n      GT = &gt;\n\n Copyright: Copyright Digital Mars 2000 - 2011.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   $(WEB digitalmars.com, Walter Bright),\n                        Don Clugston\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/simd.d",
		"name": "core.simd",
		"members": [
			{
				"members": [
					{
						"name": "Vector",
						"line": 36,
						"type": "__vector(T)",
						"char": 23,
						"kind": "alias"
					}
				],
				"name": "Vector",
				"line": 31,
				"comment": " Create a vector type.\n\n Parameters:\n      T = one of double[2], float[4], void[16], byte[16], ubyte[16],\n      short[8], ushort[8], int[4], uint[4], long[2], ulong[2].\n      For 256 bit vectors,\n      one of double[4], float[8], void[32], byte[32], ubyte[32],\n      short[16], ushort[16], int[8], uint[8], long[4], ulong[4]\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"name": "void16",
				"line": 41,
				"comment": "\n",
				"deco": "NhG16v",
				"char": 62,
				"kind": "alias"
			},
			{
				"name": "double2",
				"line": 42,
				"comment": "\n",
				"deco": "NhG2d",
				"char": 62,
				"kind": "alias"
			},
			{
				"name": "float4",
				"line": 43,
				"comment": "\n",
				"deco": "NhG4f",
				"char": 62,
				"kind": "alias"
			},
			{
				"name": "byte16",
				"line": 44,
				"comment": "\n",
				"deco": "NhG16g",
				"char": 62,
				"kind": "alias"
			},
			{
				"name": "ubyte16",
				"line": 45,
				"comment": "\n",
				"deco": "NhG16h",
				"char": 62,
				"kind": "alias"
			},
			{
				"name": "short8",
				"line": 46,
				"comment": "\n",
				"deco": "NhG8s",
				"char": 62,
				"kind": "alias"
			},
			{
				"name": "ushort8",
				"line": 47,
				"comment": "\n",
				"deco": "NhG8t",
				"char": 62,
				"kind": "alias"
			},
			{
				"name": "int4",
				"line": 48,
				"comment": "\n",
				"deco": "NhG4i",
				"char": 62,
				"kind": "alias"
			},
			{
				"name": "uint4",
				"line": 49,
				"comment": "\n",
				"deco": "NhG4k",
				"char": 62,
				"kind": "alias"
			},
			{
				"name": "long2",
				"line": 50,
				"comment": "\n",
				"deco": "NhG2l",
				"char": 62,
				"kind": "alias"
			},
			{
				"name": "ulong2",
				"line": 51,
				"comment": "\n",
				"deco": "NhG2m",
				"char": 62,
				"kind": "alias"
			},
			{
				"name": "void32",
				"line": 53,
				"comment": "\n",
				"deco": "NhG32v",
				"char": 63,
				"kind": "alias"
			},
			{
				"name": "double4",
				"line": 54,
				"comment": "\n",
				"deco": "NhG4d",
				"char": 63,
				"kind": "alias"
			},
			{
				"name": "float8",
				"line": 55,
				"comment": "\n",
				"deco": "NhG8f",
				"char": 63,
				"kind": "alias"
			},
			{
				"name": "byte32",
				"line": 56,
				"comment": "\n",
				"deco": "NhG32g",
				"char": 63,
				"kind": "alias"
			},
			{
				"name": "ubyte32",
				"line": 57,
				"comment": "\n",
				"deco": "NhG32h",
				"char": 63,
				"kind": "alias"
			},
			{
				"name": "short16",
				"line": 58,
				"comment": "\n",
				"deco": "NhG16s",
				"char": 63,
				"kind": "alias"
			},
			{
				"name": "ushort16",
				"line": 59,
				"comment": "\n",
				"deco": "NhG16t",
				"char": 63,
				"kind": "alias"
			},
			{
				"name": "int8",
				"line": 60,
				"comment": "\n",
				"deco": "NhG8i",
				"char": 63,
				"kind": "alias"
			},
			{
				"name": "uint8",
				"line": 61,
				"comment": "\n",
				"deco": "NhG8k",
				"char": 63,
				"kind": "alias"
			},
			{
				"name": "long4",
				"line": 62,
				"comment": "\n",
				"deco": "NhG4l",
				"char": 63,
				"kind": "alias"
			},
			{
				"name": "ulong4",
				"line": 63,
				"comment": "\n",
				"deco": "NhG4m",
				"char": 63,
				"kind": "alias"
			},
			{
				"members": [],
				"name": "XMM",
				"line": 73,
				"comment": " XMM opcodes that conform to the following:\n\n  opcode xmm1,xmm2/mem\n\n and do not have side effects (i.e. do not write to memory).\n",
				"baseDeco": "i",
				"char": 3,
				"kind": "enum"
			}
		],
		"comment": " Builtin SIMD intrinsics\n\n Source: $(DRUNTIMESRC core/_simd.d)\n\n Copyright: Copyright Digital Mars 2012.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   $(WEB digitalmars.com, Walter Bright),\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/osx/mach/kern_return.d",
		"name": "core.sys.osx.mach.kern_return",
		"members": [],
		"comment": " D header file for OSX.\n\n Copyright: Copyright Sean Kelly 2008 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/osx/mach/semaphore.d",
		"name": "core.sys.osx.mach.semaphore",
		"members": [],
		"comment": " D header file for OSX.\n\n Copyright: Copyright Sean Kelly 2008 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/osx/mach/loader.d",
		"name": "core.sys.osx.mach.loader",
		"members": [],
		"comment": " Copyright: Copyright Digital Mars 2010.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Jacob Carlborg\n Version: Initial created: Feb 20, 2010\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/osx/mach/dyld.d",
		"name": "core.sys.osx.mach.dyld",
		"members": [],
		"comment": " Copyright: Copyright Digital Mars 2010.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Jacob Carlborg\n Version: Initial created: Feb 20, 2010\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/osx/mach/port.d",
		"name": "core.sys.osx.mach.port",
		"members": [],
		"comment": " D header file for OSX.\n\n Copyright: Copyright Sean Kelly 2008 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/osx/mach/thread_act.d",
		"name": "core.sys.osx.mach.thread_act",
		"members": [],
		"comment": " D header file for OSX.\n\n Copyright: Copyright Sean Kelly 2008 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/osx/mach/getsect.d",
		"name": "core.sys.osx.mach.getsect",
		"members": [],
		"comment": " Copyright: Copyright Digital Mars 2010.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Jacob Carlborg\n Version: Initial created: Mar 16, 2010\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/osx/execinfo.d",
		"name": "core.sys.osx.execinfo",
		"members": [],
		"comment": " D header file for OSX.\n\n Copyright: Copyright Martin Nowak 2012.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Martin Nowak\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/osx/pthread.d",
		"name": "core.sys.osx.pthread",
		"members": [],
		"comment": " D header file for OSX.\n\n Copyright: Copyright Sean Kelly 2008 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/windows/dbghelp.d",
		"name": "core.sys.windows.dbghelp",
		"members": [],
		"comment": " ...\n\n Copyright: Copyright Benjamin Thaut 2010 - 2011.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Benjamin Thaut, Sean Kelly\n Source:    $(DRUNTIMESRC core/sys/windows/_stacktrace.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/windows/windows.d",
		"name": "core.sys.windows.windows",
		"members": [],
		"comment": "  Windows is a registered trademark of Microsoft Corporation in the United\n  States and other countries.\n\n Copyright: Copyright Digital Mars 2000 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Walter Bright, Sean Kelly, Alex Rønne Petersen\n Source:    $(DRUNTIMESRC core/sys/windows/_windows.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/windows/stacktrace.d",
		"name": "core.sys.windows.stacktrace",
		"members": [],
		"comment": " ...\n\n Copyright: Copyright Benjamin Thaut 2010 - 2013.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Benjamin Thaut, Sean Kelly\n Source:    $(DRUNTIMESRC core/sys/windows/_stacktrace.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/windows/threadaux.d",
		"name": "core.sys.windows.threadaux",
		"members": [],
		"comment": " This module provides OS specific helper function for threads support\n\n Copyright: Copyright Digital Mars 2010 - 2010.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Source:    $(DRUNTIMESRC core/sys/windows/_threadaux.d)\n Authors:   Rainer Schuetze\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/windows/dll.d",
		"name": "core.sys.windows.dll",
		"members": [],
		"comment": " This module provides OS specific helper function for DLL support\n\n Copyright: Copyright Digital Mars 2010 - 2012.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Rainer Schuetze\n Source: $(DRUNTIMESRC src/core/sys/windows/_dll.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/freebsd/sys/event.d",
		"name": "core.sys.freebsd.sys.event",
		"members": [],
		"comment": " D header file for FreeBSD.\n\n Copyright: Copyright Martin Nowak 2012.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Martin Nowak\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/freebsd/sys/elf_common.d",
		"name": "core.sys.freebsd.sys.elf_common",
		"members": [],
		"comment": " D header file for FreeBSD.\n\n $(LINK2 http://svnweb.freebsd.org/base/head/sys/sys/elf_common.h?view=markup, sys/elf_common.h)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/freebsd/sys/elf32.d",
		"name": "core.sys.freebsd.sys.elf32",
		"members": [],
		"comment": " D header file for FreeBSD.\n\n $(LINK2 http://svnweb.freebsd.org/base/head/sys/sys/elf32.h?view=markup, sys/elf32.h)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/freebsd/sys/elf64.d",
		"name": "core.sys.freebsd.sys.elf64",
		"members": [],
		"comment": " D header file for FreeBSD.\n\n $(LINK2 http://svnweb.freebsd.org/base/head/sys/sys/elf64.h?view=markup, sys/elf64.h)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/freebsd/sys/elf.d",
		"name": "core.sys.freebsd.sys.elf",
		"members": [],
		"comment": " D header file for FreeBSD.\n\n $(LINK2 http://svnweb.freebsd.org/base/head/sys/sys/elf.h?view=markup, sys/elf.h)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/freebsd/sys/link_elf.d",
		"name": "core.sys.freebsd.sys.link_elf",
		"members": [],
		"comment": " D header file for FreeBSD.\n\n $(LINK2 http://svnweb.freebsd.org/base/head/sys/sys/link_elf.h?view=markup, sys/link_elf.h)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/freebsd/dlfcn.d",
		"name": "core.sys.freebsd.dlfcn",
		"members": [],
		"comment": " D header file for FreeBSD.\n\n Copyright: Copyright Martin Nowak 2012.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Martin Nowak\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/freebsd/execinfo.d",
		"name": "core.sys.freebsd.execinfo",
		"members": [],
		"comment": " FreeBSD implementation of glibc's $(LINK2 http://www.gnu.org/software/libc/manual/html_node/Backtraces.html backtrace) facility.\n\n Copyright: Copyright Martin Nowak 2012.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Martin Nowak\n Source:    $(DRUNTIMESRC core/sys/freebsd/_execinfo.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/signal.d",
		"name": "core.sys.posix.signal",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly,\n              Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n Source:    $(DRUNTIMESRC core/sys/posix/_signal.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/syslog.d",
		"name": "core.sys.posix.syslog",
		"members": [],
		"comment": " D header file for POSIX system logger API.\n (http://pubs.opengroup.org/onlinepubs/007904875/basedefs/syslog.h.html)\n\n Copyright: Copyright Adil Baig 2013.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   Adil Baig\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/netdb.d",
		"name": "core.sys.posix.netdb",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright David Nadlinger 2011.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   David Nadlinger, Sean Kelly, Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/sys/resource.d",
		"name": "core.sys.posix.sys.resource",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright (c) 2013 Lars Tandle Kyllingstad.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Lars Tandle Kyllingstad\n Standards: The Open Group Base Specifications Issue 7, IEEE Std 1003.1-2008\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/sys/socket.d",
		"name": "core.sys.posix.sys.socket",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly, Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/sys/stat.d",
		"name": "core.sys.posix.sys.stat",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly, Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/sys/ioctl.d",
		"name": "core.sys.posix.sys.ioctl",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Alex Rønne Petersen 2011 - 2012.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/sys/uio.d",
		"name": "core.sys.posix.sys.uio",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly, Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/sys/select.d",
		"name": "core.sys.posix.sys.select",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly, Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/sys/mman.d",
		"name": "core.sys.posix.sys.mman",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly, Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/sys/wait.d",
		"name": "core.sys.posix.sys.wait",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly, Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/sys/time.d",
		"name": "core.sys.posix.sys.time",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly, Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/sys/un.d",
		"name": "core.sys.posix.sys.un",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/sys/ipc.d",
		"name": "core.sys.posix.sys.ipc",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/sys/types.d",
		"name": "core.sys.posix.sys.types",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly,\n              Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/sys/statvfs.d",
		"name": "core.sys.posix.sys.statvfs",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Robert Klotzner 2012\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Robert Klotzner\n Standards: The Open Group Base Specifications Issue 6 IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/sys/shm.d",
		"name": "core.sys.posix.sys.shm",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/unistd.d",
		"name": "core.sys.posix.unistd",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/inttypes.d",
		"name": "core.sys.posix.inttypes",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/dlfcn.d",
		"name": "core.sys.posix.dlfcn",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly, Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/setjmp.d",
		"name": "core.sys.posix.setjmp",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/netinet/in_.d",
		"name": "core.sys.posix.netinet.in_",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/netinet/tcp.d",
		"name": "core.sys.posix.netinet.tcp",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/semaphore.d",
		"name": "core.sys.posix.semaphore",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly, Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/stdio.d",
		"name": "core.sys.posix.stdio",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/arpa/inet.d",
		"name": "core.sys.posix.arpa.inet",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/termios.d",
		"name": "core.sys.posix.termios",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly, Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/grp.d",
		"name": "core.sys.posix.grp",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009, Sönke Ludwig 2013.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly, Alex Rønne Petersen, Sönke Ludwig\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/time.d",
		"name": "core.sys.posix.time",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly,\n              Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/ucontext.d",
		"name": "core.sys.posix.ucontext",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/stdlib.d",
		"name": "core.sys.posix.stdlib",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/config.d",
		"name": "core.sys.posix.config",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly,\n              Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/sched.d",
		"name": "core.sys.posix.sched",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly,\n              Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/pwd.d",
		"name": "core.sys.posix.pwd",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly, Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/poll.d",
		"name": "core.sys.posix.poll",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/pthread.d",
		"name": "core.sys.posix.pthread",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly, Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/dirent.d",
		"name": "core.sys.posix.dirent",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly,\n              Alex Rønne Petersn\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/net/if_.d",
		"name": "core.sys.posix.net.if_",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/utime.d",
		"name": "core.sys.posix.utime",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/posix/fcntl.d",
		"name": "core.sys.posix.fcntl",
		"members": [],
		"comment": " D header file for POSIX.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly, Alex Rønne Petersen\n Standards: The Open Group Base Specifications Issue 6, IEEE Std 1003.1, 2004 Edition\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/linux/sys/mman.d",
		"name": "core.sys.linux.sys.mman",
		"members": [],
		"comment": " D header file for GNU/Linux\n\n Authors: Martin Nowak\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/linux/sys/signalfd.d",
		"name": "core.sys.linux.sys.signalfd",
		"members": [],
		"comment": " D header file for Linux.\n\n Copyright: Copyright Alex Rønne Petersen 2012.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Alex Rønne Petersen\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/linux/sys/xattr.d",
		"name": "core.sys.linux.sys.xattr",
		"members": [],
		"comment": " D header file for GNU/Linux.\n\n Copyright: Copyright Robert Klotzner 2012.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Robert Klotzner\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/linux/sys/inotify.d",
		"name": "core.sys.linux.sys.inotify",
		"members": [],
		"comment": " D header file for GNU/Linux.\n\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Gary Willoughby\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/linux/dlfcn.d",
		"name": "core.sys.linux.dlfcn",
		"members": [],
		"comment": " D header file for GNU/Linux\n\n $(LINK2 http://sourceware.org/git/?p=glibc.git;a=blob;f=dlfcn/dlfcn.h, glibc dlfcn/dlfcn.h)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/linux/errno.d",
		"name": "core.sys.linux.errno",
		"members": [],
		"comment": " D header file for GNU/Linux\n\n $(LINK2 http://sourceware.org/git/?p=glibc.git;a=blob;f=stdlib/errno.h, glibc stdlib/errno.h)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/linux/epoll.d",
		"name": "core.sys.linux.epoll",
		"members": [],
		"comment": " D header file to interface with the Linux epoll API (http://man7.org/linux/man-pages/man7/epoll.7.html).\n Available since Linux 2.6\n\n Copyright: Copyright Adil Baig 2012.\n License : $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors  : Adil Baig (github.com/adilbaig)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/linux/termios.d",
		"name": "core.sys.linux.termios",
		"members": [],
		"comment": " D header file for GNU/Linux\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/linux/elf.d",
		"name": "core.sys.linux.elf",
		"members": [],
		"comment": " D header file for GNU/Linux\n\n $(LINK2 http://sourceware.org/git/?p=glibc.git;a=blob;f=elf/elf.h, glibc elf/elf.h)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/linux/config.d",
		"name": "core.sys.linux.config",
		"members": [],
		"comment": " D header file for GNU/Linux\n\n Authors: Martin Nowak\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/linux/execinfo.d",
		"name": "core.sys.linux.execinfo",
		"members": [],
		"comment": " D header file for GNU/Linux.\n\n Copyright: Copyright Martin Nowak 2012.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Martin Nowak\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sys/linux/link.d",
		"name": "core.sys.linux.link",
		"members": [],
		"comment": " D header file for GNU/Linux\n\n $(LINK2 http://sourceware.org/git/?p=glibc.git;a=blob;f=elf/link.h, glibc elf/link.h)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/thread.d",
		"name": "core.thread",
		"members": [
			{
				"name": "getpid",
				"line": 49,
				"comment": " Returns the process ID of the calling process, which is guaranteed to be\n unique on the system. This call is always successful.\n\n Example:\n ---\n writefln(\"Current process id: %s\", getpid());\n ---\n",
				"char": 40,
				"kind": "alias"
			},
			{
				"members": [],
				"name": "ThreadException",
				"line": 65,
				"comment": "\n\n\n\n Base class for thread exceptions.\n",
				"base": "Exception",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "ThreadError",
				"line": 82,
				"comment": " Base class for thread errors to be used for function inside GC when allocations are unavailable.\n",
				"base": "Error",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "FiberException",
				"line": 99,
				"comment": " Base class for fiber exceptions.\n",
				"base": "Exception",
				"char": 1,
				"kind": "class"
			},
			{
				"name": "Thread",
				"line": 514,
				"comment": "\n\n\n\n This class encapsulates all threading functionality for the D\n programming language.  As thread manipulation is a required facility\n for garbage collection, all user threads should derive from this\n class, and instances of this class should never be explicitly deleted.\n A new thread may be created using either derivation or composition, as\n in the following example.\n\n Example:\n ----------------------------------------------------------------------------\n\n class DerivedThread : Thread\n {\n     this()\n     {\n         super( &run );\n     }\n\n private :\n     void run()\n     {\n         printf( \"Derived thread running.\\n\" );\n     }\n }\n\n void threadFunc()\n {\n     printf( \"Composed thread running.\\n\" );\n }\n\n // create instances of each type\n Thread derived = new DerivedThread();\n Thread composed = new Thread( &threadFunc );\n\n // start both threads\n derived.start();\n composed.start();\n\n ----------------------------------------------------------------------------\n",
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 532,
						"comment": "\n\n\n\n Initializes a thread object which is associated with a static\n D function.\n\n Params:\n  fn = The thread function.\n  sz = The stack size for this thread.\n\n In:\n  fn must not be null.\n",
						"deco": "FPFZvmZC4core6thread6Thread",
						"parameters": [
							{
								"name": "fn",
								"deco": "PFZv"
							},
							{
								"name": "sz",
								"deco": "m",
								"default": "0LU"
							}
						],
						"endline": 544,
						"originalType": "(void function() fn, size_t sz = 0)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 558,
						"comment": " Initializes a thread object which is associated with a dynamic\n D function.\n\n Params:\n  dg = The thread function.\n  sz = The stack size for this thread.\n\n In:\n  dg must not be null.\n",
						"deco": "FDFZvmZC4core6thread6Thread",
						"parameters": [
							{
								"name": "dg",
								"deco": "DFZv"
							},
							{
								"name": "sz",
								"deco": "m",
								"default": "0LU"
							}
						],
						"endline": 570,
						"originalType": "(void delegate() dg, size_t sz = 0)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "~this",
						"line": 576,
						"comment": " Cleans up any remaining resources used by this object.\n",
						"deco": "FZv",
						"endline": 600,
						"char": 5,
						"kind": "destructor"
					},
					{
						"endchar": 5,
						"in": {
							"endchar": 5,
							"name": "__require",
							"line": 620,
							"deco": "FZv",
							"endline": 620,
							"char": 5,
							"kind": "function"
						},
						"name": "start",
						"line": 618,
						"comment": "\n\n\n\n Starts the thread and invokes the function or delegate passed upon\n construction.\n\n In:\n  This routine may only be called once per thread instance.\n\n Throws:\n  ThreadException if the thread fails to start.\n",
						"deco": "FZv",
						"endline": 724,
						"char": 16,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"name": "join",
						"line": 743,
						"comment": " Waits for this thread to complete.  If the thread terminated as the\n result of an unhandled exception, this exception will be rethrown.\n\n Params:\n  rethrow = Rethrow any unhandled exception which may have caused this\n            thread to terminate.\n\n Throws:\n  ThreadException if the operation fails.\n  Any exception not handled by the joined thread.\n\n Returns:\n  Any exception not handled by this thread if rethrow = false, null\n  otherwise.\n",
						"deco": "FbZC6object9Throwable",
						"parameters": [
							{
								"name": "rethrow",
								"deco": "b",
								"default": "true"
							}
						],
						"endline": 773,
						"char": 21,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"name": "name",
						"line": 787,
						"comment": "\n\n\n\n Gets the user-readable label for this thread.\n\n Returns:\n  The name of this thread.\n",
						"deco": "FNdZAya",
						"endline": 793,
						"char": 28,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"name": "name",
						"line": 802,
						"comment": " Sets the user-readable label for this thread.\n\n Params:\n  val = The new name of this thread.\n",
						"deco": "FNdAyaZv",
						"parameters": [
							{
								"name": "val",
								"deco": "Aya"
							}
						],
						"endline": 808,
						"char": 26,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"name": "isDaemon",
						"line": 821,
						"comment": " Gets the daemon status for this thread.  While the runtime will wait for\n all normal threads to complete before tearing down the process, daemon\n threads are effectively ignored and thus will not prevent the process\n from terminating.  In effect, daemon threads will be terminated\n automatically by the OS when the process exits.\n\n Returns:\n  true if this is a daemon thread.\n",
						"deco": "FNdZb",
						"endline": 827,
						"char": 26,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"name": "isDaemon",
						"line": 840,
						"comment": " Sets the daemon status for this thread.  While the runtime will wait for\n all normal threads to complete before tearing down the process, daemon\n threads are effectively ignored and thus will not prevent the process\n from terminating.  In effect, daemon threads will be terminated\n automatically by the OS when the process exits.\n\n Params:\n  val = The new daemon status for this thread.\n",
						"deco": "FNdbZv",
						"parameters": [
							{
								"name": "val",
								"deco": "b"
							}
						],
						"endline": 846,
						"char": 26,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"name": "isRunning",
						"line": 855,
						"comment": " Tests whether this thread is running.\n\n Returns:\n  true if the thread is running, false if not.\n",
						"deco": "FNbNdZb",
						"endline": 875,
						"char": 26,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"name": "PRIORITY_MIN",
						"line": 889,
						"comment": "\n\n\n\n The minimum scheduling priority that may be set for a thread.  On\n systems where multiple scheduling policies are defined, this value\n represents the minimum valid priority for the scheduling policy of\n the process.\n",
						"deco": "xi",
						"originalType": "int",
						"char": 25,
						"kind": "variable",
						"storageClass": [
							"const",
							"__gshared"
						]
					},
					{
						"name": "PRIORITY_MAX",
						"line": 898,
						"comment": " The maximum scheduling priority that may be set for a thread.  On\n systems where multiple scheduling policies are defined, this value\n represents the maximum valid priority for the scheduling policy of\n the process.\n",
						"deco": "xi",
						"originalType": "int",
						"char": 25,
						"kind": "variable",
						"storageClass": [
							"const",
							"__gshared"
						]
					},
					{
						"name": "PRIORITY_DEFAULT",
						"line": 907,
						"comment": " The default scheduling priority that is set for a thread.  On\n systems where multiple scheduling policies are defined, this value\n represents the default priority for the scheduling policy of\n the process.\n",
						"deco": "xi",
						"originalType": "int",
						"char": 25,
						"kind": "variable",
						"storageClass": [
							"const",
							"__gshared"
						]
					},
					{
						"endchar": 5,
						"name": "priority",
						"line": 916,
						"comment": " Gets the scheduling priority for the associated thread.\n\n Returns:\n  The scheduling priority of this thread.\n",
						"deco": "FNdZi",
						"endline": 931,
						"char": 25,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"in": {
							"endchar": 5,
							"name": "__require",
							"line": 942,
							"deco": "FZv",
							"endline": 942,
							"char": 5,
							"kind": "function"
						},
						"name": "priority",
						"line": 940,
						"comment": " Sets the scheduling priority for the associated thread.\n\n Params:\n  val = The new scheduling priority of this thread.\n",
						"deco": "FNdiZv",
						"parameters": [
							{
								"name": "val",
								"deco": "i"
							}
						],
						"endline": 974,
						"char": 26,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"name": "sleep",
						"line": 1015,
						"comment": "\n\n\n\n Suspends the calling thread for at least the supplied period.  This may\n result in multiple OS calls if period is greater than the maximum sleep\n duration supported by the operating system.\n\n Params:\n  val = The minimum duration the calling thread should be suspended.\n\n In:\n  period must be non-negative.\n\n Example:\n ------------------------------------------------------------------------\n\n Thread.sleep( dur!(\"msecs\")( 50 ) );  // sleep for 50 milliseconds\n Thread.sleep( dur!(\"seconds\")( 5 ) ); // sleep for 5 seconds\n\n ------------------------------------------------------------------------\n",
						"deco": "FS4core4time8DurationZv",
						"parameters": [
							{
								"name": "val",
								"deco": "S4core4time8Duration"
							}
						],
						"endline": 1062,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "yield",
						"line": 1068,
						"comment": " Forces a context switch to occur away from the calling thread.\n",
						"deco": "FZv",
						"endline": 1074,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "getThis",
						"line": 1089,
						"comment": "\n\n\n\n Provides a reference to the calling thread.\n\n Returns:\n  The thread object representing the calling thread.  The result of\n  deleting this object is undefined.  If the current thread is not\n  attached to the runtime, a null reference is returned.\n",
						"deco": "FNbZC4core6thread6Thread",
						"endline": 1107,
						"char": 19,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "getAll",
						"line": 1118,
						"comment": " Provides a list of all threads currently being tracked by the system.\n\n Returns:\n  An array containing references to all threads currently being\n  tracked by the system.  The result of deleting any contained\n  objects is undefined.\n",
						"deco": "FZAC4core6thread6Thread",
						"endline": 1131,
						"char": 21,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "opApply",
						"line": 1144,
						"comment": " Operates on all threads currently being tracked by the system.  The\n result of deleting any Thread object is undefined.\n\n Params:\n  dg = The supplied code as a delegate.\n\n Returns:\n  Zero if all elemented are visited, nonzero if not.\n",
						"deco": "FMDFKC4core6thread6ThreadZiZi",
						"parameters": [
							{
								"name": "dg",
								"storageClass": [
									"scope"
								],
								"deco": "DFKC4core6thread6ThreadZi"
							}
						],
						"endline": 1158,
						"char": 16,
						"kind": "function",
						"storageClass": [
							"static"
						]
					}
				],
				"char": 1,
				"kind": "class"
			},
			{
				"endchar": 1,
				"name": "thread_init",
				"line": 1734,
				"comment": "\n\n\n\n Initializes the thread module.  This function must be called by the\n garbage collector on startup and before any other thread routines\n are called.\n",
				"deco": "UZv",
				"endline": 1794,
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "thread_term",
				"line": 1801,
				"comment": " Terminates the thread module. No other thread routine may be called\n afterwards.\n",
				"deco": "UZv",
				"endline": 1812,
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "thread_isMainThread",
				"line": 1818,
				"comment": "\n",
				"deco": "UZb",
				"endline": 1821,
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "thread_attachThis",
				"line": 1828,
				"comment": " Registers the calling thread for use with the D Runtime.  If this routine\n is called for a thread which is already registered, no action is performed.\n",
				"deco": "UZC4core6thread6Thread",
				"endline": 1869,
				"char": 19,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "thread_detachThis",
				"line": 1938,
				"comment": " Deregisters the calling thread from use with the runtime.  If this routine\n is called for a thread which is not registered, no action is performed.\n",
				"deco": "UZv",
				"endline": 1942,
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "thread_detachByAddr",
				"line": 1946,
				"comment": "ditto\n",
				"deco": "UmZv",
				"parameters": [
					{
						"name": "addr",
						"deco": "m"
					}
				],
				"endline": 1950,
				"originalType": "extern (C) void(Thread.ThreadAddr addr)",
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "thread_findByAddr",
				"line": 1961,
				"comment": " Search the list of all threads for a thread with the given thread identifier.\n\n Params:\n  addr = The thread identifier to search for.\n Returns:\n  The thread object associated with the thread identifier, null if not found.\n",
				"deco": "FmZC4core6thread6Thread",
				"parameters": [
					{
						"name": "addr",
						"deco": "m"
					}
				],
				"endline": 1972,
				"originalType": "Thread(Thread.ThreadAddr addr)",
				"char": 15,
				"kind": "function",
				"storageClass": [
					"static"
				]
			},
			{
				"endchar": 1,
				"name": "thread_setThis",
				"line": 1985,
				"comment": " Sets the current thread to a specific reference. Only to be used\n when dealing with externally-created threads (in e.g. C code).\n The primary use of this function is when Thread.getThis() must\n return a sensible value in, for example, TLS destructors. In\n other words, don't touch this unless you know what you're doing.\n\n Params:\n  t = A reference to the current thread. May be null.\n",
				"deco": "UC4core6thread6ThreadZv",
				"parameters": [
					{
						"name": "t",
						"deco": "C4core6thread6Thread"
					}
				],
				"endline": 1988,
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "thread_joinAll",
				"line": 1996,
				"comment": " Joins all non-daemon threads that are currently running.  This is done by\n performing successive scans through the thread list until a scan consists\n of only daemon threads.\n",
				"deco": "UZv",
				"endline": 2020,
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "thread_suspendAll",
				"line": 2310,
				"comment": " Suspend all threads but the calling thread for \"stop the world\" garbage\n collection runs.  This function may be called multiple times, and must\n be followed by a matching number of calls to thread_resumeAll before\n processing is resumed.\n\n Throws:\n  ThreadError if the suspend operation fails for a running thread.\n",
				"deco": "UNbZv",
				"endline": 2379,
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "thread_resumeAll",
				"line": 2461,
				"comment": " Resume all threads but the calling thread for \"stop the world\" garbage\n collection runs.  This function must be called once for each preceding\n call to thread_suspendAll before the threads are actually resumed.\n\n In:\n  This routine must be preceded by a call to thread_suspendAll.\n\n Throws:\n  ThreadError if the resume operation fails for a running thread.\n",
				"deco": "UNbZv",
				"endline": 2488,
				"char": 17,
				"kind": "function"
			},
			{
				"members": [
					{
						"name": "stack",
						"line": 2495,
						"value": "0",
						"comment": "The stack and/or registers are being scanned.\n",
						"char": 5,
						"kind": "enum member"
					},
					{
						"name": "tls",
						"line": 2496,
						"value": "1",
						"comment": "TLS data is being scanned.\n",
						"char": 5,
						"kind": "enum member"
					}
				],
				"name": "ScanType",
				"line": 2493,
				"comment": " Indicates the kind of scan being performed by $(D thread_scanAllType).\n",
				"baseDeco": "i",
				"char": 1,
				"kind": "enum"
			},
			{
				"name": "ScanAllThreadsFn",
				"line": 2499,
				"comment": "The scanning function.\n",
				"deco": "DFNbPvPvZv",
				"char": 43,
				"kind": "alias"
			},
			{
				"name": "ScanAllThreadsTypeFn",
				"line": 2500,
				"comment": "ditto\n",
				"deco": "DFNbE4core6thread8ScanTypePvPvZv",
				"char": 53,
				"kind": "alias"
			},
			{
				"endchar": 1,
				"name": "thread_scanAllType",
				"line": 2512,
				"comment": " The main entry point for garbage collection.  The supplied delegate\n will be passed ranges representing both stack and register values.\n\n Params:\n  scan        = The scanner function.  It should scan from p1 through p2 - 1.\n\n In:\n  This routine must be preceded by a call to thread_suspendAll.\n",
				"deco": "UNbMDFNbE4core6thread8ScanTypePvPvZvZv",
				"parameters": [
					{
						"name": "scan",
						"storageClass": [
							"scope"
						],
						"deco": "DFNbE4core6thread8ScanTypePvPvZv"
					}
				],
				"endline": 2520,
				"originalType": "nothrow extern (C) void(scope ScanAllThreadsTypeFn scan)",
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "thread_scanAll",
				"line": 2592,
				"comment": " The main entry point for garbage collection.  The supplied delegate\n will be passed ranges representing both stack and register values.\n\n Params:\n  scan        = The scanner function.  It should scan from p1 through p2 - 1.\n\n In:\n  This routine must be preceded by a call to thread_suspendAll.\n",
				"deco": "UNbMDFNbPvPvZvZv",
				"parameters": [
					{
						"name": "scan",
						"storageClass": [
							"scope"
						],
						"deco": "DFNbPvPvZv"
					}
				],
				"endline": 2595,
				"originalType": "nothrow extern (C) void(scope ScanAllThreadsFn scan)",
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "thread_enterCriticalRegion",
				"line": 2619,
				"comment": " Signals that the code following this call is a critical region. Any code in\n this region must finish running before the calling thread can be suspended\n by a call to thread_suspendAll.\n\n This function is, in particular, meant to help maintain garbage collector\n invariants when a lock is not used.\n\n A critical region is exited with thread_exitCriticalRegion.\n\n $(RED Warning):\n Using critical regions is extremely error-prone. For instance, using locks\n inside a critical region can easily result in a deadlock when another thread\n holding the lock already got suspended.\n\n The term and concept of a 'critical region' comes from\n $(LINK2 https://github.com/mono/mono/blob/521f4a198e442573c400835ef19bbb36b60b0ebb/mono/metadata/sgen-gc.h#L925 Mono's SGen garbage collector).\n\n In:\n  The calling thread must be attached to the runtime.\n",
				"deco": "UZv",
				"endline": 2628,
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "thread_exitCriticalRegion",
				"line": 2638,
				"comment": " Signals that the calling thread is no longer in a critical region. Following\n a call to this function, the thread can once again be suspended.\n\n In:\n  The calling thread must be attached to the runtime.\n",
				"deco": "UZv",
				"endline": 2647,
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "thread_inCriticalRegion",
				"line": 2656,
				"comment": " Returns true if the current thread is in a critical region; otherwise, false.\n\n In:\n  The calling thread must be attached to the runtime.\n",
				"deco": "UZb",
				"endline": 2665,
				"char": 17,
				"kind": "function"
			},
			{
				"members": [
					{
						"name": "no",
						"line": 2781,
						"value": "0",
						"comment": "Address is not marked.\n",
						"char": 10,
						"kind": "enum member"
					},
					{
						"name": "yes",
						"line": 2782,
						"value": "1",
						"comment": "Address is marked.\n",
						"char": 9,
						"kind": "enum member"
					},
					{
						"name": "unknown",
						"line": 2783,
						"value": "2",
						"comment": "Address is not managed by the GC.\n",
						"char": 5,
						"kind": "enum member"
					}
				],
				"name": "IsMarked",
				"line": 2779,
				"comment": " Indicates whether an address has been marked by the GC.\n",
				"baseDeco": "i",
				"char": 1,
				"kind": "enum"
			},
			{
				"name": "IsMarkedDg",
				"line": 2786,
				"comment": "The isMarked callback function.\n",
				"deco": "DFNbPvZi",
				"char": 42,
				"kind": "alias"
			},
			{
				"endchar": 1,
				"name": "thread_processGCMarks",
				"line": 2800,
				"comment": " This routine allows the runtime to process any special per-thread handling\n for the GC.  This is needed for taking into account any memory that is\n referenced by non-scanned pointers but is about to be freed.  That currently\n means the array append cache.\n\n Params:\n  isMarked = The function used to check if $(D addr) is marked.\n\n In:\n  This routine must be called just prior to resuming all threads.\n",
				"deco": "UNbMDFNbPvZiZv",
				"parameters": [
					{
						"name": "isMarked",
						"storageClass": [
							"scope"
						],
						"deco": "DFNbPvZi"
					}
				],
				"endline": 2810,
				"originalType": "nothrow extern (C) void(scope IsMarkedDg isMarked)",
				"char": 16,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "thread_stackTop",
				"line": 2910,
				"comment": " Returns the stack top of the currently active stack within the calling\n thread.\n\n In:\n  The calling thread must be attached to the runtime.\n\n Returns:\n  The address of the stack top.\n",
				"deco": "UZPv",
				"endline": 2919,
				"char": 18,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "thread_stackBottom",
				"line": 2932,
				"comment": " Returns the stack bottom of the currently active stack within the calling\n thread.\n\n In:\n  The calling thread must be attached to the runtime.\n\n Returns:\n  The address of the stack bottom.\n",
				"deco": "UZPv",
				"endline": 2940,
				"char": 18,
				"kind": "function"
			},
			{
				"name": "ThreadGroup",
				"line": 2951,
				"comment": "\n\n\n\n This class is intended to simplify certain common programming techniques.\n",
				"members": [
					{
						"endchar": 5,
						"name": "create",
						"line": 2963,
						"comment": " Creates and starts a new Thread object that executes fn and adds it to\n the list of tracked threads.\n\n Params:\n  fn = The thread function.\n\n Returns:\n  A reference to the newly created thread.\n",
						"deco": "FPFZvZC4core6thread6Thread",
						"parameters": [
							{
								"name": "fn",
								"deco": "PFZv"
							}
						],
						"endline": 2973,
						"char": 18,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"name": "create",
						"line": 2986,
						"comment": " Creates and starts a new Thread object that executes dg and adds it to\n the list of tracked threads.\n\n Params:\n  dg = The thread function.\n\n Returns:\n  A reference to the newly created thread.\n",
						"deco": "FDFZvZC4core6thread6Thread",
						"parameters": [
							{
								"name": "dg",
								"deco": "DFZv"
							}
						],
						"endline": 2996,
						"char": 18,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"in": {
							"endchar": 5,
							"name": "__require",
							"line": 3010,
							"deco": "FZv",
							"endline": 3010,
							"char": 5,
							"kind": "function"
						},
						"name": "add",
						"line": 3008,
						"comment": " Add t to the list of tracked threads if it is not already being tracked.\n\n Params:\n  t = The thread to add.\n\n In:\n  t must not be null.\n",
						"deco": "FC4core6thread6ThreadZv",
						"parameters": [
							{
								"name": "t",
								"deco": "C4core6thread6Thread"
							}
						],
						"endline": 3019,
						"char": 16,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"in": {
							"endchar": 5,
							"name": "__require",
							"line": 3034,
							"deco": "FZv",
							"endline": 3034,
							"char": 5,
							"kind": "function"
						},
						"name": "remove",
						"line": 3032,
						"comment": " Removes t from the list of tracked threads.  No operation will be\n performed if t is not currently being tracked by this object.\n\n Params:\n  t = The thread to remove.\n\n In:\n  t must not be null.\n",
						"deco": "FC4core6thread6ThreadZv",
						"parameters": [
							{
								"name": "t",
								"deco": "C4core6thread6Thread"
							}
						],
						"endline": 3043,
						"char": 16,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"name": "opApply",
						"line": 3049,
						"comment": " Operates on all threads currently tracked by this object.\n",
						"deco": "FMDFKC4core6thread6ThreadZiZi",
						"parameters": [
							{
								"name": "dg",
								"storageClass": [
									"scope"
								],
								"deco": "DFKC4core6thread6ThreadZi"
							}
						],
						"endline": 3065,
						"char": 15,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"name": "joinAll",
						"line": 3079,
						"comment": " Iteratively joins all tracked threads.  This function will block add,\n remove, and opApply until it completes.\n\n Params:\n  rethrow = Rethrow any unhandled exception which may have caused the\n            current thread to terminate.\n\n Throws:\n  Any exception not handled by the joined threads.\n",
						"deco": "FbZv",
						"parameters": [
							{
								"name": "rethrow",
								"deco": "b",
								"default": "true"
							}
						],
						"endline": 3090,
						"char": 16,
						"kind": "function",
						"storageClass": [
							"final"
						]
					}
				],
				"char": 1,
				"kind": "class"
			},
			{
				"name": "Fiber",
				"line": 3628,
				"comment": "\n\n\n\n This class provides a cooperative concurrency mechanism integrated with the\n threading and garbage collection functionality.  Calling a fiber may be\n considered a blocking operation that returns when the fiber yields (via\n Fiber.yield()).  Execution occurs within the context of the calling thread\n so synchronization is not necessary to guarantee memory visibility so long\n as the same thread calls the fiber each time.  Please note that there is no\n requirement that a fiber be bound to one specific thread.  Rather, fibers\n may be freely passed between threads so long as they are not currently\n executing.  Like threads, a new fiber thread may be created using either\n derivation or composition, as in the following example.\n\n Warning:\n Status registers are not saved by the current implementations. This means\n floating point exception status bits (overflow, divide by 0), rounding mode\n and similar stuff is set per-thread, not per Fiber!\n\n Warning:\n On ARM FPU registers are not saved if druntime was compiled as ARM_SoftFloat.\n If such a build is used on a ARM_SoftFP system which actually has got a FPU\n and other libraries are using the FPU registers (other code is compiled\n as ARM_SoftFP) this can cause problems. Druntime must be compiled as\n ARM_SoftFP in this case.\n\n Example:\n ----------------------------------------------------------------------\n\n class DerivedFiber : Fiber\n {\n     this()\n     {\n         super( &run );\n     }\n\n private :\n     void run()\n     {\n         printf( \"Derived fiber running.\\n\" );\n     }\n }\n\n void fiberFunc()\n {\n     printf( \"Composed fiber running.\\n\" );\n     Fiber.yield();\n     printf( \"Composed fiber running.\\n\" );\n }\n\n // create instances of each type\n Fiber derived = new DerivedFiber();\n Fiber composed = new Fiber( &fiberFunc );\n\n // call both fibers once\n derived.call();\n composed.call();\n printf( \"Execution returned to calling context.\\n\" );\n composed.call();\n\n // since each fiber has run to completion, each should have state TERM\n assert( derived.state == Fiber.State.TERM );\n assert( composed.state == Fiber.State.TERM );\n\n ----------------------------------------------------------------------\n\n Authors: Based on a design by Mikola Lysenko.\n",
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 3646,
						"comment": "\n\n\n\n Initializes a fiber object which is associated with a static\n D function.\n\n Params:\n  fn = The fiber function.\n  sz = The stack size for this fiber.\n\n In:\n  fn must not be null.\n",
						"deco": "FPFZvmZC4core6thread5Fiber",
						"parameters": [
							{
								"name": "fn",
								"deco": "PFZv"
							},
							{
								"name": "sz",
								"deco": "m",
								"default": "PAGESIZE * 4LU"
							}
						],
						"endline": 3655,
						"originalType": "(void function() fn, size_t sz = PAGESIZE * 4)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 3669,
						"comment": " Initializes a fiber object which is associated with a dynamic\n D function.\n\n Params:\n  dg = The fiber function.\n  sz = The stack size for this fiber.\n\n In:\n  dg must not be null.\n",
						"deco": "FDFZvmZC4core6thread5Fiber",
						"parameters": [
							{
								"name": "dg",
								"deco": "DFZv"
							},
							{
								"name": "sz",
								"deco": "m",
								"default": "PAGESIZE * 4LU"
							}
						],
						"endline": 3678,
						"originalType": "(void delegate() dg, size_t sz = PAGESIZE * 4)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "~this",
						"line": 3684,
						"comment": " Cleans up any remaining resources used by this object.\n",
						"deco": "FZv",
						"endline": 3699,
						"char": 5,
						"kind": "destructor"
					},
					{
						"endchar": 5,
						"in": {
							"endchar": 5,
							"name": "__require",
							"line": 3728,
							"deco": "FZv",
							"endline": 3728,
							"char": 5,
							"kind": "function"
						},
						"name": "call",
						"line": 3726,
						"comment": "\n\n\n\n Transfers execution to this fiber object.  The calling context will be\n suspended until the fiber calls Fiber.yield() or until it terminates\n via an unhandled exception.\n\n Params:\n  rethrow = Rethrow any unhandled exception which may have caused this\n            fiber to terminate.\n\n In:\n  This fiber must be in state HOLD.\n\n Throws:\n  Any exception not handled by the joined thread.\n\n Returns:\n  Any exception not handled by this fiber if rethrow = false, null\n  otherwise.\n",
						"deco": "FbZC6object9Throwable",
						"parameters": [
							{
								"name": "rethrow",
								"deco": "b",
								"default": "true"
							}
						],
						"endline": 3765,
						"char": 21,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"in": {
							"endchar": 5,
							"name": "__require",
							"line": 3781,
							"deco": "FZv",
							"endline": 3781,
							"char": 5,
							"kind": "function"
						},
						"name": "reset",
						"line": 3779,
						"comment": " Resets this fiber so that it may be re-used, optionally with a\n new function/delegate.  This routine may only be called for\n fibers that have terminated, as doing otherwise could result in\n scope-dependent functionality that is not executed.\n Stack-based classes, for example, may not be cleaned up\n properly if a fiber is reset before it has terminated.\n\n In:\n  This fiber must be in state TERM.\n",
						"deco": "FZv",
						"endline": 3790,
						"char": 16,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"name": "reset",
						"line": 3793,
						"comment": "ditto\n",
						"deco": "FPFZvZv",
						"parameters": [
							{
								"name": "fn",
								"deco": "PFZv"
							}
						],
						"endline": 3798,
						"char": 16,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"name": "reset",
						"line": 3801,
						"comment": "ditto\n",
						"deco": "FDFZvZv",
						"parameters": [
							{
								"name": "dg",
								"deco": "DFZv"
							}
						],
						"endline": 3806,
						"char": 16,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"members": [
							{
								"name": "HOLD",
								"line": 3822,
								"value": "0",
								"comment": "\n",
								"char": 9,
								"kind": "enum member"
							},
							{
								"name": "EXEC",
								"line": 3823,
								"value": "1",
								"comment": "\n",
								"char": 9,
								"kind": "enum member"
							},
							{
								"name": "TERM",
								"line": 3824,
								"value": "2",
								"comment": "\n",
								"char": 9,
								"kind": "enum member"
							}
						],
						"name": "State",
						"line": 3820,
						"comment": "\n\n\n\n A fiber may occupy one of three states: HOLD, EXEC, and TERM.  The HOLD\n state applies to any fiber that is suspended and ready to be called.\n The EXEC state will be set for any fiber that is currently executing.\n And the TERM state is set when a fiber terminates.  Once a fiber\n terminates, it must be reset before it may be called again.\n",
						"baseDeco": "i",
						"char": 5,
						"kind": "enum"
					},
					{
						"endchar": 5,
						"name": "state",
						"line": 3834,
						"comment": " Gets the current state of this fiber.\n\n Returns:\n  The state of this fiber as an enumerated value.\n",
						"deco": "xFNdZE4core6thread5Fiber5State",
						"endline": 3837,
						"char": 27,
						"kind": "function",
						"storageClass": [
							"final"
						]
					},
					{
						"endchar": 5,
						"name": "yield",
						"line": 3848,
						"comment": "\n\n\n\n Forces a context switch to occur away from the calling fiber.\n",
						"deco": "FZv",
						"endline": 3860,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "yieldAndThrow",
						"line": 3873,
						"comment": " Forces a context switch to occur away from the calling fiber and then\n throws obj in the calling fiber.\n\n Params:\n  t = The object to throw.\n\n In:\n  t must not be null.\n",
						"deco": "FC6object9ThrowableZv",
						"parameters": [
							{
								"name": "t",
								"deco": "C6object9Throwable"
							}
						],
						"endline": 3891,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "getThis",
						"line": 3907,
						"comment": "\n\n\n\n Provides a reference to the calling fiber or null if no fiber is\n currently active.\n\n Returns:\n  The fiber object representing the calling fiber or null if no fiber\n  is currently active within this thread. The result of deleting this object is undefined.\n",
						"deco": "FZC4core6thread5Fiber",
						"endline": 3910,
						"char": 18,
						"kind": "function",
						"storageClass": [
							"static"
						]
					}
				],
				"char": 1,
				"kind": "class"
			}
		],
		"comment": " The thread module provides support for thread creation and management.\n\n Copyright: Copyright Sean Kelly 2005 - 2012.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly, Walter Bright, Alex Rønne Petersen, Martin Nowak\n Source:    $(DRUNTIMESRC core/_thread.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/demangle.d",
		"name": "core.demangle",
		"members": [
			{
				"endchar": 1,
				"name": "demangle",
				"line": 1555,
				"comment": " Demangles D mangled names.  If it is not a D mangled name, it returns its\n argument name.\n\n Params:\n  buf = The string to demangle.\n  dst = An optional destination buffer.\n\n Returns:\n  The demangled name or the original string if the name is not a mangled D\n  name.\n",
				"deco": "FAxaAaZAa",
				"parameters": [
					{
						"name": "buf",
						"deco": "Axa"
					},
					{
						"name": "dst",
						"deco": "Aa",
						"default": "null"
					}
				],
				"endline": 1560,
				"char": 8,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "demangleType",
				"line": 1574,
				"comment": " Demangles a D mangled type.\n\n Params:\n  buf = The string to demangle.\n  dst = An optional destination buffer.\n\n Returns:\n  The demangled type name or the original string if the name is not a\n  mangled D type.\n",
				"deco": "FAxaAaZAa",
				"parameters": [
					{
						"name": "buf",
						"deco": "Axa"
					},
					{
						"name": "dst",
						"deco": "Aa",
						"default": "null"
					}
				],
				"endline": 1578,
				"char": 8,
				"kind": "function"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "mangle",
						"line": 1593,
						"comment": " Mangles a D symbol.\n\n Params:\n  T = The type of the symbol.\n  fqn = The fully qualified name of the symbol.\n  dst = An optional destination buffer.\n\n Returns:\n  The mangled name for a symbols of type T and the given fully\n  qualified name.\n",
						"type": "pure nothrow @safe char[](const(char)[] fqn, char[] dst = null)",
						"parameters": [
							{
								"name": "fqn",
								"type": "const(char)[]"
							},
							{
								"name": "dst",
								"type": "char[]",
								"default": "null"
							}
						],
						"endline": 1652,
						"char": 8,
						"kind": "function"
					}
				],
				"name": "mangle",
				"line": 1593,
				"comment": " Mangles a D symbol.\n\n Params:\n  T = The type of the symbol.\n  fqn = The fully qualified name of the symbol.\n  dst = An optional destination buffer.\n\n Returns:\n  The mangled name for a symbols of type T and the given fully\n  qualified name.\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL1656_203)\n---\nassert(mangle!int(\"a.b\") == \"_D1a1bi\");\nassert(mangle!(char[])(\"test.foo\") == \"_D4test3fooAa\");\nassert(mangle!(int function(int))(\"a.b\") == \"_D1a1bPFiZi\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL1656_203)\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 8,
				"kind": "template"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "mangleFunc",
						"line": 1689,
						"comment": " Mangles a D function.\n\n Params:\n  T = function pointer type.\n  fqn = The fully qualified name of the symbol.\n  dst = An optional destination buffer.\n\n Returns:\n  The mangled name for a function with function pointer type T and\n  the given fully qualified name.\n",
						"type": "pure nothrow @safe char[](const(char)[] fqn, char[] dst = null)",
						"parameters": [
							{
								"name": "fqn",
								"type": "const(char)[]"
							},
							{
								"name": "dst",
								"type": "char[]",
								"default": "null"
							}
						],
						"endline": 1709,
						"char": 8,
						"kind": "function"
					}
				],
				"name": "mangleFunc",
				"line": 1689,
				"comment": " Mangles a D function.\n\n Params:\n  T = function pointer type.\n  fqn = The fully qualified name of the symbol.\n  dst = An optional destination buffer.\n\n Returns:\n  The mangled name for a function with function pointer type T and\n  the given fully qualified name.\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL1713_205)\n---\nassert(mangleFunc!(int function(int))(\"a.b\") == \"_D1a1bFiZi\");\nassert(mangleFunc!(int function(Object))(\"object.Object.opEquals\") == \"_D6object6Object8opEqualsFC6ObjectZi\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL1713_205)\n",
				"parameters": [
					{
						"name": "T",
						"type": "FT*",
						"kind": "type"
					},
					{
						"name": "FT",
						"kind": "type"
					}
				],
				"char": 8,
				"kind": "template"
			}
		],
		"comment": " The demangle module converts mangled D symbols to a representation similar\n to what would have existed in code.\n\n Copyright: Copyright Sean Kelly 2010 - 2014.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/_demangle.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/runtime.d",
		"name": "core.runtime",
		"members": [
			{
				"name": "rt_loadLibrary",
				"line": 21,
				"comment": "C interface for Runtime.loadLibrary\n",
				"deco": "UxPaZPv",
				"parameters": [
					{
						"name": "name",
						"deco": "xPa"
					}
				],
				"originalType": "extern (C) void*(const char* name)",
				"char": 18,
				"kind": "function"
			},
			{
				"name": "rt_unloadLibrary",
				"line": 25,
				"comment": "C interface for Runtime.unloadLibrary, returns 1/0 instead of bool\n",
				"deco": "UPvZi",
				"parameters": [
					{
						"name": "ptr",
						"deco": "Pv"
					}
				],
				"char": 16,
				"kind": "function"
			},
			{
				"name": "rt_init",
				"line": 28,
				"comment": "C interface for Runtime.initialize, returns 1/0 instead of bool\n",
				"deco": "UZi",
				"char": 15,
				"kind": "function"
			},
			{
				"name": "rt_term",
				"line": 30,
				"comment": "C interface for Runtime.terminate, returns 1/0 instead of bool\n",
				"deco": "UZi",
				"char": 15,
				"kind": "function"
			},
			{
				"name": "CArgs",
				"line": 91,
				"comment": "\n\n\n\n Stores the unprocessed arguments supplied when the\n process was started.\n",
				"members": [
					{
						"offset": 0,
						"name": "argc",
						"line": 93,
						"comment": "The argument count.\n",
						"deco": "i",
						"char": 9,
						"kind": "variable"
					},
					{
						"offset": 8,
						"name": "argv",
						"line": 94,
						"comment": "The arguments as a C array of strings.\n",
						"deco": "PPa",
						"char": 12,
						"kind": "variable"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"name": "Runtime",
				"line": 101,
				"comment": " This struct encapsulates all functionality related to the underlying runtime\n module for the calling context.\n",
				"members": [
					{
						"endchar": 5,
						"name": "initialize",
						"line": 113,
						"comment": " Initializes the runtime.  This call is to be used in instances where the\n standard program initialization process is not executed.  This is most\n often in shared libraries or in libraries linked to a C program.\n If the runtime was already successfully initialized this returns true.\n Each call to initialize must be paired by a call to $(LREF, terminate).\n\n Returns:\n  true if initialization succeeded or false if initialization failed.\n",
						"deco": "FZb",
						"endline": 116,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "terminate",
						"line": 134,
						"comment": " Terminates the runtime.  This call is to be used in instances where the\n standard program termination process will not be not executed.  This is\n most often in shared libraries or in libraries linked to a C program.\n If the runtime was not successfully initialized the function returns false.\n\n Returns:\n  true if termination succeeded or false if termination failed.\n",
						"deco": "FZb",
						"endline": 137,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "args",
						"line": 152,
						"comment": " Returns the arguments supplied when the process was started.\n\n Returns:\n  The arguments supplied when this process was started.\n",
						"deco": "FNdZAAya",
						"endline": 155,
						"char": 31,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "cArgs",
						"line": 178,
						"comment": " Returns the unprocessed C arguments supplied when the process was started.\n Use this when you need to supply argc and argv to C libraries.\n\n Returns:\n  A $(LREF CArgs) struct with the arguments supplied when this process was started.\n\n Example:\n ---\n import core.runtime;\n\n // A C library function requiring char** arguments\n extern(C) void initLibFoo(int argc, char** argv);\n\n void main()\n {\n     auto args = Runtime.cArgs;\n     initLibFoo(args.argc, args.argv);\n }\n ---\n",
						"deco": "FNdZS4core7runtime5CArgs",
						"endline": 181,
						"char": 28,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "loadLibrary",
								"line": 194,
								"comment": " Locates a dynamic library with the supplied library name and dynamically\n loads it into the caller's address space.  If the library contains a D\n runtime it will be integrated with the current runtime.\n\n Params:\n  name = The name of the dynamic library to load.\n\n Returns:\n  A reference to the library or null on error.\n",
								"type": "void*(in char[] name)",
								"parameters": [
									{
										"name": "name",
										"type": "char[]",
										"storageClass": [
											"in"
										]
									}
								],
								"endline": 235,
								"char": 18,
								"kind": "function"
							}
						],
						"name": "loadLibrary",
						"line": 194,
						"comment": " Locates a dynamic library with the supplied library name and dynamically\n loads it into the caller's address space.  If the library contains a D\n runtime it will be integrated with the current runtime.\n\n Params:\n  name = The name of the dynamic library to load.\n\n Returns:\n  A reference to the library or null on error.\n",
						"parameters": [],
						"char": 18,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "unloadLibrary",
								"line": 246,
								"comment": " Unloads the dynamic library referenced by p.  If this library contains a\n D runtime then any necessary finalization or cleanup of that runtime\n will be performed.\n\n Params:\n  p = A reference to the library to unload.\n",
								"type": "bool(void* p)",
								"parameters": [
									{
										"name": "p",
										"type": "void*"
									}
								],
								"endline": 249,
								"char": 17,
								"kind": "function"
							}
						],
						"name": "unloadLibrary",
						"line": 246,
						"comment": " Unloads the dynamic library referenced by p.  If this library contains a\n D runtime then any necessary finalization or cleanup of that runtime\n will be performed.\n\n Params:\n  p = A reference to the library to unload.\n",
						"parameters": [],
						"char": 17,
						"kind": "template"
					},
					{
						"endchar": 5,
						"name": "traceHandler",
						"line": 263,
						"comment": " Overrides the default trace mechanism with s user-supplied version.  A\n trace represents the context from which an exception was thrown, and the\n trace handler will be called when this occurs.  The pointer supplied to\n this routine indicates the base address from which tracing should occur.\n If the supplied pointer is null then the trace routine should determine\n an appropriate calling context from which to begin the trace.\n\n Params:\n  h = The new trace handler.  Set to null to use the default handler.\n",
						"deco": "FNdPFPvZC6object9Throwable9TraceInfoZv",
						"parameters": [
							{
								"name": "h",
								"deco": "PFPvZC6object9Throwable9TraceInfo"
							}
						],
						"endline": 266,
						"originalType": "@property void(TraceHandler h)",
						"char": 27,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "traceHandler",
						"line": 274,
						"comment": " Gets the current trace handler.\n\n Returns:\n  The current trace handler or null if none has been set.\n",
						"deco": "FNdZPFPvZC6object9Throwable9TraceInfo",
						"endline": 277,
						"originalType": "@property TraceHandler()",
						"char": 35,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "collectHandler",
						"line": 290,
						"comment": " Overrides the default collect hander with a user-supplied version.  This\n routine will be called for each resource object that is finalized in a\n non-deterministic manner--typically during a garbage collection cycle.\n If the supplied routine returns true then the object's dtor will called\n as normal, but if the routine returns false than the dtor will not be\n called.  The default behavior is for all object dtors to be called.\n\n Params:\n  h = The new collect handler.  Set to null to use the default handler.\n",
						"deco": "FNdPFC6ObjectZbZv",
						"parameters": [
							{
								"name": "h",
								"deco": "PFC6ObjectZb"
							}
						],
						"endline": 293,
						"originalType": "@property void(CollectHandler h)",
						"char": 27,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "collectHandler",
						"line": 302,
						"comment": " Gets the current collect handler.\n\n Returns:\n  The current collect handler or null if none has been set.\n",
						"deco": "FNdZPFC6ObjectZb",
						"endline": 305,
						"originalType": "@property CollectHandler()",
						"char": 37,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "moduleUnitTester",
						"line": 317,
						"comment": " Overrides the default module unit tester with a user-supplied version.\n This routine will be called once on program initialization.  The return\n value of this routine indicates to the runtime whether the tests ran\n without error.\n\n Params:\n  h = The new unit tester.  Set to null to use the default unit tester.\n",
						"deco": "FNdPFZbZv",
						"parameters": [
							{
								"name": "h",
								"deco": "PFZb"
							}
						],
						"endline": 320,
						"originalType": "@property void(ModuleUnitTester h)",
						"char": 27,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "moduleUnitTester",
						"line": 329,
						"comment": " Gets the current module unit tester.\n\n Returns:\n  The current module unit tester handler or null if none has been set.\n",
						"deco": "FNdZPFZb",
						"endline": 332,
						"originalType": "@property ModuleUnitTester()",
						"char": 39,
						"kind": "function",
						"storageClass": [
							"static"
						]
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"endchar": 1,
				"name": "runModuleUnitTests",
				"line": 356,
				"comment": "\n\n\n\n This routine is called by the runtime to run module unit tests on startup.\n The user-supplied unit tester will be called if one has been supplied,\n otherwise all unit tests will be run in sequence.\n\n Returns:\n  true if execution should continue after testing is complete and false if\n  not.  Default behavior is to return true.\n",
				"deco": "UZb",
				"endline": 420,
				"char": 17,
				"kind": "function"
			}
		],
		"comment": " The runtime module exposes information specific to the D runtime code.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/_runtime.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/checkedint.d",
		"name": "core.checkedint",
		"members": [
			{
				"endchar": 1,
				"name": "adds",
				"line": 49,
				"comment": " Add two signed integers, checking for overflow.\n\n The overflow is sticky, meaning a sequence of operations can\n be done and overflow need only be checked at the end.\n Params:\n      x = left operand\n      y = right operand\n      overflow = set if an overflow occurs, is not affected otherwise\n Returns:\n      the sum\n",
				"deco": "FNaNbNiNfiiKbZi",
				"parameters": [
					{
						"name": "x",
						"deco": "i"
					},
					{
						"name": "y",
						"deco": "i"
					},
					{
						"name": "overflow",
						"storageClass": [
							"ref"
						],
						"deco": "b"
					}
				],
				"endline": 55,
				"char": 5,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "adds",
				"line": 76,
				"comment": "ditto\n",
				"deco": "FNaNbNiNfllKbZl",
				"parameters": [
					{
						"name": "x",
						"deco": "l"
					},
					{
						"name": "y",
						"deco": "l"
					},
					{
						"name": "overflow",
						"storageClass": [
							"ref"
						],
						"deco": "b"
					}
				],
				"endline": 83,
				"char": 6,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "addu",
				"line": 117,
				"comment": " Add two unsigned integers, checking for overflow (aka carry).\n\n The overflow is sticky, meaning a sequence of operations can\n be done and overflow need only be checked at the end.\n Params:\n      x = left operand\n      y = right operand\n      overflow = set if an overflow occurs, is not affected otherwise\n Returns:\n      the sum\n",
				"deco": "FNaNbNiNfkkKbZk",
				"parameters": [
					{
						"name": "x",
						"deco": "k"
					},
					{
						"name": "y",
						"deco": "k"
					},
					{
						"name": "overflow",
						"storageClass": [
							"ref"
						],
						"deco": "b"
					}
				],
				"endline": 123,
				"char": 6,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "addu",
				"line": 144,
				"comment": "ditto\n",
				"deco": "FNaNbNiNfmmKbZm",
				"parameters": [
					{
						"name": "x",
						"deco": "m"
					},
					{
						"name": "y",
						"deco": "m"
					},
					{
						"name": "overflow",
						"storageClass": [
							"ref"
						],
						"deco": "b"
					}
				],
				"endline": 150,
				"char": 7,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "subs",
				"line": 184,
				"comment": " Subtract two signed integers, checking for overflow.\n\n The overflow is sticky, meaning a sequence of operations can\n be done and overflow need only be checked at the end.\n Params:\n      x = left operand\n      y = right operand\n      overflow = set if an overflow occurs, is not affected otherwise\n Returns:\n      the sum\n",
				"deco": "FNaNbNiNfiiKbZi",
				"parameters": [
					{
						"name": "x",
						"deco": "i"
					},
					{
						"name": "y",
						"deco": "i"
					},
					{
						"name": "overflow",
						"storageClass": [
							"ref"
						],
						"deco": "b"
					}
				],
				"endline": 190,
				"char": 5,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "subs",
				"line": 211,
				"comment": "ditto\n",
				"deco": "FNaNbNiNfllKbZl",
				"parameters": [
					{
						"name": "x",
						"deco": "l"
					},
					{
						"name": "y",
						"deco": "l"
					},
					{
						"name": "overflow",
						"storageClass": [
							"ref"
						],
						"deco": "b"
					}
				],
				"endline": 219,
				"char": 6,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "subu",
				"line": 252,
				"comment": " Subtract two unsigned integers, checking for overflow (aka borrow).\n\n The overflow is sticky, meaning a sequence of operations can\n be done and overflow need only be checked at the end.\n Params:\n      x = left operand\n      y = right operand\n      overflow = set if an overflow occurs, is not affected otherwise\n Returns:\n      the sum\n",
				"deco": "FNaNbNiNfkkKbZk",
				"parameters": [
					{
						"name": "x",
						"deco": "k"
					},
					{
						"name": "y",
						"deco": "k"
					},
					{
						"name": "overflow",
						"storageClass": [
							"ref"
						],
						"deco": "b"
					}
				],
				"endline": 257,
				"char": 6,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "subu",
				"line": 279,
				"comment": "ditto\n",
				"deco": "FNaNbNiNfmmKbZm",
				"parameters": [
					{
						"name": "x",
						"deco": "m"
					},
					{
						"name": "y",
						"deco": "m"
					},
					{
						"name": "overflow",
						"storageClass": [
							"ref"
						],
						"deco": "b"
					}
				],
				"endline": 284,
				"char": 7,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "negs",
				"line": 315,
				"comment": " Negate an integer.\n\n Params:\n      x = operand\n      overflow = set if x cannot be negated, is not affected otherwise\n Returns:\n      the negation of x\n",
				"deco": "FNaNbNiNfiKbZi",
				"parameters": [
					{
						"name": "x",
						"deco": "i"
					},
					{
						"name": "overflow",
						"storageClass": [
							"ref"
						],
						"deco": "b"
					}
				],
				"endline": 320,
				"char": 5,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "negs",
				"line": 338,
				"comment": "ditto\n",
				"deco": "FNaNbNiNflKbZl",
				"parameters": [
					{
						"name": "x",
						"deco": "l"
					},
					{
						"name": "overflow",
						"storageClass": [
							"ref"
						],
						"deco": "b"
					}
				],
				"endline": 343,
				"char": 6,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "muls",
				"line": 374,
				"comment": " Multiply two signed integers, checking for overflow.\n\n The overflow is sticky, meaning a sequence of operations can\n be done and overflow need only be checked at the end.\n Params:\n      x = left operand\n      y = right operand\n      overflow = set if an overflow occurs, is not affected otherwise\n Returns:\n      the sum\n",
				"deco": "FNaNbNiNfiiKbZi",
				"parameters": [
					{
						"name": "x",
						"deco": "i"
					},
					{
						"name": "y",
						"deco": "i"
					},
					{
						"name": "overflow",
						"storageClass": [
							"ref"
						],
						"deco": "b"
					}
				],
				"endline": 380,
				"char": 5,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "muls",
				"line": 403,
				"comment": "ditto\n",
				"deco": "FNaNbNiNfllKbZl",
				"parameters": [
					{
						"name": "x",
						"deco": "l"
					},
					{
						"name": "y",
						"deco": "l"
					},
					{
						"name": "overflow",
						"storageClass": [
							"ref"
						],
						"deco": "b"
					}
				],
				"endline": 409,
				"char": 6,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "mulu",
				"line": 445,
				"comment": " Multiply two unsigned integers, checking for overflow (aka carry).\n\n The overflow is sticky, meaning a sequence of operations can\n be done and overflow need only be checked at the end.\n Params:\n      x = left operand\n      y = right operand\n      overflow = set if an overflow occurs, is not affected otherwise\n Returns:\n      the sum\n",
				"deco": "FNaNbNiNfkkKbZk",
				"parameters": [
					{
						"name": "x",
						"deco": "k"
					},
					{
						"name": "y",
						"deco": "k"
					},
					{
						"name": "overflow",
						"storageClass": [
							"ref"
						],
						"deco": "b"
					}
				],
				"endline": 451,
				"char": 6,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "mulu",
				"line": 474,
				"comment": "ditto\n",
				"deco": "FNaNbNiNfmmKbZm",
				"parameters": [
					{
						"name": "x",
						"deco": "m"
					},
					{
						"name": "y",
						"deco": "m"
					},
					{
						"name": "overflow",
						"storageClass": [
							"ref"
						],
						"deco": "b"
					}
				],
				"endline": 480,
				"char": 7,
				"kind": "function"
			}
		],
		"comment": " This module implements integral arithmetic primitives that check\n for out-of-range results.\n\n Integral arithmetic operators operate on fixed width types.\n Results that are not representable in those fixed widths are silently\n truncated to fit.\n This module offers integral arithmetic primitives that produce the\n same results, but set an 'overflow' flag when such truncation occurs.\n The setting is sticky, meaning that numerous operations can be cascaded\n and then the flag need only be checked at the end.\n Whether the operation is signed or unsigned is indicated by an 's' or 'u'\n suffix, respectively. While this could be achieved without such suffixes by\n using overloading on the signedness of the types, the suffix makes it clear\n which is happening without needing to examine the types.\n\n While the generic versions of these functions are computationally expensive\n relative to the cost of the operation itself, compiler implementations are free\n to recognize them and generate equivalent and faster code.\n\n References: $(LINK2 http://blog.regehr.org/archives/1139, Fast Integer Overflow Checks)\n Copyright: Copyright (c) Walter Bright 2014.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Walter Bright\n Source:    $(DRUNTIMESRC core/_checkedint.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/bitop.d",
		"name": "core.bitop",
		"members": [
			{
				"name": "bsf",
				"line": 43,
				"comment": " Scans the bits in v starting with bit 0, looking\n for the first set bit.\n Returns:\n      The bit number of the first bit set.\n      The return value is undefined if v is zero.\n Example:\n ---\n import core.bitop;\n\n int main()\n {\n     assert(bsf(0x21) == 0);\n     return 0;\n }\n ---\n",
				"deco": "FNaNbNiNfmZi",
				"parameters": [
					{
						"name": "v",
						"deco": "m"
					}
				],
				"originalType": "pure nothrow @nogc @safe int(size_t v)",
				"char": 5,
				"kind": "function"
			},
			{
				"name": "bsr",
				"line": 68,
				"comment": " Scans the bits in v from the most significant bit\n to the least significant bit, looking\n for the first set bit.\n Returns:\n      The bit number of the first bit set.\n      The return value is undefined if v is zero.\n Example:\n ---\n import core.bitop;\n\n int main()\n {\n     assert(bsr(0x21) == 5);\n     return 0;\n }\n ---\n",
				"deco": "FNaNbNiNfmZi",
				"parameters": [
					{
						"name": "v",
						"deco": "m"
					}
				],
				"originalType": "pure nothrow @nogc @safe int(size_t v)",
				"char": 5,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "bt",
				"line": 80,
				"comment": " Tests the bit.\n (No longer an intrisic - the compiler recognizes the patterns\n in the body.)\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL90_226)\n---\nsize_t array[2];\n\narray[0] = 2;\narray[1] = 0x100;\n\nassert(bt(array.ptr, 1));\nassert(array[0] == 2);\nassert(array[1] == 0x100);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL90_226)\n",
				"deco": "FNaNbNixPmmZi",
				"parameters": [
					{
						"name": "p",
						"deco": "xPm"
					},
					{
						"name": "bitnum",
						"deco": "m"
					}
				],
				"endline": 88,
				"originalType": "pure nothrow @nogc @system int(in size_t* p, size_t bitnum)",
				"char": 5,
				"kind": "function"
			},
			{
				"name": "btc",
				"line": 105,
				"comment": " Tests and complements the bit.\n",
				"deco": "FNaNbNiPmmZi",
				"parameters": [
					{
						"name": "p",
						"deco": "Pm"
					},
					{
						"name": "bitnum",
						"deco": "m"
					}
				],
				"originalType": "pure nothrow @nogc @system int(size_t* p, size_t bitnum)",
				"char": 5,
				"kind": "function"
			},
			{
				"name": "btr",
				"line": 111,
				"comment": " Tests and resets (sets to 0) the bit.\n",
				"deco": "FNaNbNiPmmZi",
				"parameters": [
					{
						"name": "p",
						"deco": "Pm"
					},
					{
						"name": "bitnum",
						"deco": "m"
					}
				],
				"originalType": "pure nothrow @nogc @system int(size_t* p, size_t bitnum)",
				"char": 5,
				"kind": "function"
			},
			{
				"name": "bts",
				"line": 127,
				"comment": " Tests and sets the bit.\n Params:\n p = a non-NULL pointer to an array of size_ts.\n bitnum = a bit number, starting with bit 0 of p[0],\n and progressing. It addresses bits like the expression:\n---\np[index / (size_t.sizeof*8)] & (1 << (index & ((size_t.sizeof*8) - 1)))\n---\n Returns:\n      A non-zero value if the bit was set, and a zero\n      if it was clear.\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL130_227)\n---\nsize_t array[2];\n\narray[0] = 2;\narray[1] = 0x100;\n\nassert(btc(array.ptr, 35) == 0);\nif (size_t.sizeof == 8)\n{\n    assert(array[0] == 0x8_0000_0002);\n    assert(array[1] == 0x100);\n}\nelse\n{\n    assert(array[0] == 2);\n    assert(array[1] == 0x108);\n}\n\nassert(btc(array.ptr, 35));\nassert(array[0] == 2);\nassert(array[1] == 0x100);\n\nassert(bts(array.ptr, 35) == 0);\nif (size_t.sizeof == 8)\n{\n    assert(array[0] == 0x8_0000_0002);\n    assert(array[1] == 0x100);\n}\nelse\n{\n    assert(array[0] == 2);\n    assert(array[1] == 0x108);\n}\n\nassert(btr(array.ptr, 35));\nassert(array[0] == 2);\nassert(array[1] == 0x100);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL130_227)\n",
				"deco": "FNaNbNiPmmZi",
				"parameters": [
					{
						"name": "p",
						"deco": "Pm"
					},
					{
						"name": "bitnum",
						"deco": "m"
					}
				],
				"originalType": "pure nothrow @nogc @system int(size_t* p, size_t bitnum)",
				"char": 5,
				"kind": "function"
			},
			{
				"name": "bswap",
				"line": 175,
				"comment": " Swaps bytes in a 4 byte uint end-to-end, i.e. byte 0 becomes\n byte 3, byte 1 becomes byte 2, byte 2 becomes byte 1, byte 3\n becomes byte 0.\n",
				"deco": "FNaNbNiNfkZk",
				"parameters": [
					{
						"name": "v",
						"deco": "k"
					}
				],
				"char": 6,
				"kind": "function"
			},
			{
				"name": "inp",
				"line": 182,
				"comment": " Reads I/O port at port_address.\n",
				"deco": "FNbNikZh",
				"parameters": [
					{
						"name": "port_address",
						"deco": "k"
					}
				],
				"char": 11,
				"kind": "function"
			},
			{
				"name": "inpw",
				"line": 188,
				"comment": " ditto\n",
				"deco": "FNbNikZt",
				"parameters": [
					{
						"name": "port_address",
						"deco": "k"
					}
				],
				"char": 12,
				"kind": "function"
			},
			{
				"name": "inpl",
				"line": 194,
				"comment": " ditto\n",
				"deco": "FNbNikZk",
				"parameters": [
					{
						"name": "port_address",
						"deco": "k"
					}
				],
				"char": 10,
				"kind": "function"
			},
			{
				"name": "outp",
				"line": 200,
				"comment": " Writes and returns value to I/O port at port_address.\n",
				"deco": "FNbNikhZh",
				"parameters": [
					{
						"name": "port_address",
						"deco": "k"
					},
					{
						"name": "value",
						"deco": "h"
					}
				],
				"char": 11,
				"kind": "function"
			},
			{
				"name": "outpw",
				"line": 206,
				"comment": " ditto\n",
				"deco": "FNbNiktZt",
				"parameters": [
					{
						"name": "port_address",
						"deco": "k"
					},
					{
						"name": "value",
						"deco": "t"
					}
				],
				"char": 12,
				"kind": "function"
			},
			{
				"name": "outpl",
				"line": 212,
				"comment": " ditto\n",
				"deco": "FNbNikkZk",
				"parameters": [
					{
						"name": "port_address",
						"deco": "k"
					},
					{
						"name": "value",
						"deco": "k"
					}
				],
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "popcnt",
				"line": 219,
				"comment": "  Calculates the number of set bits in a 32-bit integer.\n",
				"deco": "FNaNbNiNfkZi",
				"parameters": [
					{
						"name": "x",
						"deco": "k"
					}
				],
				"endline": 248,
				"char": 5,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "bitswap",
				"line": 266,
				"comment": " Reverses the order of bits in a 32-bit integer.\n",
				"deco": "FNaNbNiNekZk",
				"parameters": [
					{
						"name": "x",
						"deco": "k"
					}
				],
				"endline": 320,
				"char": 15,
				"kind": "function"
			}
		],
		"comment": " This module contains a collection of bit-level operations.\n\n Copyright: Copyright Don Clugston 2005 - 2013.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Don Clugston, Sean Kelly, Walter Bright, Alex Rønne Petersen\n Source:    $(DRUNTIMESRC core/_bitop.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/signal.d",
		"name": "core.stdc.signal",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_signal.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/fenv.d",
		"name": "core.stdc.fenv",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_fenv.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/tgmath.d",
		"name": "core.stdc.tgmath",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_tgmath.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/math.d",
		"name": "core.stdc.math",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2012.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_math.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/float_.d",
		"name": "core.stdc.float_",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_float_.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/inttypes.d",
		"name": "core.stdc.inttypes",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_inttypes.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/stdarg.d",
		"name": "core.stdc.stdarg",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Digital Mars 2000 - 2009.\n License:   Distributed under the\n    <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost Software License 1.0</a>.\n    (See accompanying file LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n Authors:   Walter Bright, Hauke Duden\n Standards: ISO/IEC 9899:1999 (E)\n Source: $(DRUNTIMESRC core/stdc/_stdarg.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/stdio.d",
		"name": "core.stdc.stdio",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly,\n            Alex Rønne Petersen\n Source:    $(DRUNTIMESRC core/stdc/_stdio.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/stddef.d",
		"name": "core.stdc.stddef",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_stddef.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/complex.d",
		"name": "core.stdc.complex",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_complex.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/wctype.d",
		"name": "core.stdc.wctype",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_wctype.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/errno.d",
		"name": "core.stdc.errno",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly, Alex Rønne Petersen\n Source:    $(DRUNTIMESRC core/stdc/_errno.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/stdint.d",
		"name": "core.stdc.stdint",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_stdint.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/string.d",
		"name": "core.stdc.string",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_string.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/wchar_.d",
		"name": "core.stdc.wchar_",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_wchar_.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/time.d",
		"name": "core.stdc.time",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly,\n            Alex Rønne Petersen\n Source:    $(DRUNTIMESRC core/stdc/_time.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/stdlib.d",
		"name": "core.stdc.stdlib",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2014.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Standards: ISO/IEC 9899:1999 (E)\n Source: $(DRUNTIMESRC src/core/stdc/_stdlib.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/config.d",
		"name": "core.stdc.config",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_config.d)\n Authors:   Sean Kelly\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/locale.d",
		"name": "core.stdc.locale",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_locale.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/ctype.d",
		"name": "core.stdc.ctype",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_ctype.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/stdc/limits.d",
		"name": "core.stdc.limits",
		"members": [],
		"comment": " D header file for C99.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/stdc/_limits.d)\n Standards: ISO/IEC 9899:1999 (E)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/time.d",
		"name": "core.time",
		"members": [
			{
				"name": "Duration",
				"line": 143,
				"comment": "    Represents a duration of time of weeks or less (kept internally as hnsecs).\n    (e.g. 22 days or 700 seconds).\n\n    It is used when representing a duration of time - such as how long to\n    sleep with $(CXREF Thread, sleep).\n\n    In std.datetime, it is also used as the result of various arithmetic\n    operations on time points.\n\n    Use the $(LREF dur) function or on of its non-generic aliases to create\n    $(D Duration)s.\n\n    It's not possible to create a Duration of months or years, because the\n    variable number of days in a month or year makes it impossible to convert\n    between months or years and smaller units without a specific date. So,\n    nothing uses $(D Duration)s when dealing with months or years. Rather,\n    functions specific to months and years are defined. For instance,\n    $(XREF datetime, Date) has $(D add!\"years\") and $(D add!\"months\") for adding\n    years and months rather than creating a Duration of years or months and\n    adding that to a $(XREF datetime, Date). But Duration is used when dealing\n    with weeks or smaller.\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL1645_264)\n---\nimport core.time;\n\n// using the dur template\nauto numDays = dur!\"days\"(12);\n\n// using the days function\nnumDays = days(12);\n\n// alternatively using UFCS syntax\nnumDays = 12.days;\n\nauto myTime = 100.msecs + 20_000.usecs + 30_000.hnsecs;\nassert(myTime == 123.msecs);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL1645_264)\n",
				"members": [
					{
						"endchar": 79,
						"name": "zero",
						"line": 160,
						"comment": "        A $(D Duration) of $(D 0). It's shorter than doing something like\n        $(D dur!\"seconds\"(0)) and more explicit than $(D Duration.init).\n",
						"deco": "FNaNbNdNfZS4core4time8Duration",
						"endline": 160,
						"char": 50,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 85,
						"name": "max",
						"line": 165,
						"comment": "        Largest $(D Duration) possible.\n",
						"deco": "FNaNbNdNfZS4core4time8Duration",
						"endline": 165,
						"char": 50,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 85,
						"name": "min",
						"line": 170,
						"comment": "        Most negative $(D Duration) possible.\n",
						"deco": "FNaNbNdNfZS4core4time8Duration",
						"endline": 170,
						"char": 50,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "opCmp",
						"line": 195,
						"comment": "        Compares this $(D Duration) with the given $(D Duration).\n\n        Returns:\n            $(TABLE\n            $(TR $(TD this &lt; rhs) $(TD &lt; 0))\n            $(TR $(TD this == rhs) $(TD 0))\n            $(TR $(TD this &gt; rhs) $(TD &gt; 0))\n            )\n",
						"deco": "xFNaNbNfS4core4time8DurationZi",
						"parameters": [
							{
								"name": "rhs",
								"deco": "S4core4time8Duration"
							}
						],
						"endline": 203,
						"char": 9,
						"kind": "function"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opBinary",
								"line": 275,
								"comment": "        Adds or subtracts two durations.\n\n        The legal types of arithmetic for $(D Duration) using this operator are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD +) $(TD Duration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD -) $(TD Duration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD +) $(TD TickDuration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD -) $(TD TickDuration) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            rhs = The duration to add to or subtract from this $(D Duration).\n",
								"type": "const pure nothrow @safe Duration(D rhs)",
								"parameters": [
									{
										"name": "rhs",
										"type": "D"
									}
								],
								"endline": 284,
								"char": 14,
								"kind": "function"
							}
						],
						"name": "opBinary",
						"line": 275,
						"comment": "        Adds or subtracts two durations.\n\n        The legal types of arithmetic for $(D Duration) using this operator are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD +) $(TD Duration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD -) $(TD Duration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD +) $(TD TickDuration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD -) $(TD TickDuration) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            rhs = The duration to add to or subtract from this $(D Duration).\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							},
							{
								"name": "D",
								"kind": "type"
							}
						],
						"char": 14,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opBinaryRight",
								"line": 353,
								"comment": "        Adds or subtracts two durations.\n\n        The legal types of arithmetic for $(D Duration) using this operator are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD +) $(TD Duration) $(TD -->) $(TD Duration))\n        $(TR $(TD TickDuration) $(TD -) $(TD Duration) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            lhs = The $(D TickDuration) to add to this $(D Duration) or to\n                  subtract this $(D Duration) from.\n",
								"type": "const pure nothrow @safe Duration(D lhs)",
								"parameters": [
									{
										"name": "lhs",
										"type": "D"
									}
								],
								"endline": 358,
								"char": 14,
								"kind": "function"
							}
						],
						"name": "opBinaryRight",
						"line": 353,
						"comment": "        Adds or subtracts two durations.\n\n        The legal types of arithmetic for $(D Duration) using this operator are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD +) $(TD Duration) $(TD -->) $(TD Duration))\n        $(TR $(TD TickDuration) $(TD -) $(TD Duration) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            lhs = The $(D TickDuration) to add to this $(D Duration) or to\n                  subtract this $(D Duration) from.\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							},
							{
								"name": "D",
								"kind": "type"
							}
						],
						"char": 14,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opOpAssign",
								"line": 406,
								"comment": "        Adds or subtracts two durations as well as assigning the result to this\n        $(D Duration).\n\n        The legal types of arithmetic for $(D Duration) using this operator are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD +) $(TD Duration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD -) $(TD Duration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD +) $(TD TickDuration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD -) $(TD TickDuration) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            rhs = The duration to add to or subtract from this $(D Duration).\n",
								"type": "pure nothrow ref @safe Duration(in D rhs)",
								"parameters": [
									{
										"name": "rhs",
										"type": "D",
										"storageClass": [
											"in"
										]
									}
								],
								"endline": 417,
								"char": 18,
								"kind": "function"
							}
						],
						"name": "opOpAssign",
						"line": 406,
						"comment": "        Adds or subtracts two durations as well as assigning the result to this\n        $(D Duration).\n\n        The legal types of arithmetic for $(D Duration) using this operator are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD +) $(TD Duration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD -) $(TD Duration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD +) $(TD TickDuration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD -) $(TD TickDuration) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            rhs = The duration to add to or subtract from this $(D Duration).\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							},
							{
								"name": "D",
								"kind": "type"
							}
						],
						"char": 18,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opBinary",
								"line": 507,
								"comment": "        The legal types of arithmetic for $(D Duration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD *) $(TD long) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            value = The value to multiply this $(D Duration) by.\n",
								"type": "const pure nothrow @safe Duration(long value)",
								"parameters": [
									{
										"name": "value",
										"deco": "l"
									}
								],
								"endline": 511,
								"char": 14,
								"kind": "function"
							}
						],
						"name": "opBinary",
						"line": 507,
						"comment": "        The legal types of arithmetic for $(D Duration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD *) $(TD long) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            value = The value to multiply this $(D Duration) by.\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							}
						],
						"char": 14,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opOpAssign",
								"line": 546,
								"comment": "        The legal types of arithmetic for $(D Duration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD *) $(TD long) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            value = The value to multiply this $(D Duration) by.\n",
								"type": "pure nothrow ref @safe Duration(long value)",
								"parameters": [
									{
										"name": "value",
										"deco": "l"
									}
								],
								"endline": 552,
								"char": 18,
								"kind": "function"
							}
						],
						"name": "opOpAssign",
						"line": 546,
						"comment": "        The legal types of arithmetic for $(D Duration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD *) $(TD long) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            value = The value to multiply this $(D Duration) by.\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							}
						],
						"char": 18,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opBinary",
								"line": 601,
								"comment": "        The legal types of arithmetic for $(D Duration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD /) $(TD long) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            value = The value to divide from this duration.\n\n        Throws:\n            $(D TimeException) if an attempt to divide by $(D 0) is made.\n",
								"type": "const pure @safe Duration(long value)",
								"parameters": [
									{
										"name": "value",
										"deco": "l"
									}
								],
								"endline": 608,
								"char": 14,
								"kind": "function"
							}
						],
						"name": "opBinary",
						"line": 601,
						"comment": "        The legal types of arithmetic for $(D Duration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD /) $(TD long) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            value = The value to divide from this duration.\n\n        Throws:\n            $(D TimeException) if an attempt to divide by $(D 0) is made.\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							}
						],
						"char": 14,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opOpAssign",
								"line": 652,
								"comment": "        The legal types of arithmetic for $(D Duration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD /) $(TD long) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            value = The value to divide from this $(D Duration).\n\n        Throws:\n            $(D TimeException) if an attempt to divide by $(D 0) is made.\n",
								"type": "pure ref @safe Duration(long value)",
								"parameters": [
									{
										"name": "value",
										"deco": "l"
									}
								],
								"endline": 661,
								"char": 18,
								"kind": "function"
							}
						],
						"name": "opOpAssign",
						"line": 652,
						"comment": "        The legal types of arithmetic for $(D Duration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD /) $(TD long) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            value = The value to divide from this $(D Duration).\n\n        Throws:\n            $(D TimeException) if an attempt to divide by $(D 0) is made.\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							}
						],
						"char": 18,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opBinaryRight",
								"line": 709,
								"comment": "        Multiplies an integral value and a $(D Duration).\n\n        The legal types of arithmetic for $(D Duration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD long) $(TD *) $(TD Duration) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            value = The number of units to multiply this $(D Duration) by.\n",
								"type": "const pure nothrow @safe Duration(long value)",
								"parameters": [
									{
										"name": "value",
										"deco": "l"
									}
								],
								"endline": 713,
								"char": 14,
								"kind": "function"
							}
						],
						"name": "opBinaryRight",
						"line": 709,
						"comment": "        Multiplies an integral value and a $(D Duration).\n\n        The legal types of arithmetic for $(D Duration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD long) $(TD *) $(TD Duration) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            value = The number of units to multiply this $(D Duration) by.\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							}
						],
						"char": 14,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opUnary",
								"line": 740,
								"comment": "        Returns the negation of this $(D Duration).\n",
								"type": "const pure nothrow @safe Duration()",
								"endline": 744,
								"char": 14,
								"kind": "function"
							}
						],
						"name": "opUnary",
						"line": 740,
						"comment": "        Returns the negation of this $(D Duration).\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							}
						],
						"char": 14,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opCast",
								"line": 766,
								"comment": "        Returns a $(LREF TickDuration) with the same number of hnsecs as this\n        $(D Duration).\n        Note that the conventional way to convert between $(D Duration) and\n        $(D TickDuration) is using $(XREF conv, to), e.g.:\n        $(D duration.to!TickDuration())\n",
								"type": "const pure nothrow @safe TickDuration()",
								"endline": 770,
								"char": 18,
								"kind": "function"
							}
						],
						"name": "opCast",
						"line": 766,
						"comment": "        Returns a $(LREF TickDuration) with the same number of hnsecs as this\n        $(D Duration).\n        Note that the conventional way to convert between $(D Duration) and\n        $(D TickDuration) is using $(XREF conv, to), e.g.:\n        $(D duration.to!TickDuration())\n",
						"parameters": [
							{
								"name": "T",
								"kind": "type"
							}
						],
						"char": 18,
						"kind": "template"
					},
					{
						"members": [
							{
								"members": [
									{
										"endchar": 9,
										"name": "split",
										"line": 849,
										"comment": " Ditto\n",
										"type": "const pure nothrow @safe void(out Args args)",
										"parameters": [
											{
												"name": "args",
												"type": "Args",
												"storageClass": [
													"out"
												]
											}
										],
										"endline": 860,
										"char": 14,
										"kind": "function"
									}
								],
								"name": "split",
								"line": 849,
								"comment": " Ditto\n",
								"parameters": [
									{
										"name": "Args",
										"kind": "tuple"
									}
								],
								"char": 14,
								"kind": "template"
							},
							{
								"endchar": 9,
								"name": "split",
								"line": 863,
								"comment": " Ditto\n",
								"type": "const pure nothrow @safe ()",
								"endline": 905,
								"char": 14,
								"kind": "function",
								"storageClass": [
									"auto"
								]
							}
						],
						"name": "split",
						"line": 843,
						"comment": "        Splits out the Duration into the given units.\n\n        split takes the list of time units to split out as template arguments.\n        The time unit strings must be given in decreasing order. How it returns\n        the values for those units depends on the overload used.\n\n        The overload which accepts function arguments takes integral types in\n        the order that the time unit strings were given, and those integers are\n        passed by $(D ref). split assigns the values for the units to each\n        corresponding integer. Any integral type may be used, but no attempt is\n        made to prevent integer overflow, so don't use small integral types in\n        circumstances where the values for those units aren't likely to fit in\n        an integral type that small.\n\n        The overload with no arguments returns the values for the units in a\n        struct with members whose names are the same as the given time unit\n        strings. The members are all $(D long)s. This overload will also work\n        with no time strings being given, in which case $(I all) of the time\n        units from weeks through hnsecs will be provided (but no nsecs, since it\n        would always be $(D 0)).\n\n        For both overloads, the entire value of the Duration is split among the\n        units (rather than splitting the Duration across all units and then only\n        providing the values for the requested units), so if only one unit is\n        given, the result is equivalent to $(LREF total).\n\n        $(D \"nsecs\") is accepted by split, but $(D \"years\") and $(D \"months\")\n        are not.\n\n        For negative durations, all of the split values will be negative.\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL944_244)\n---\n{\n    auto d = dur!\"days\"(12) + dur!\"minutes\"(7) + dur!\"usecs\"(501223);\n    long days;\n    int seconds;\n    short msecs;\n    d.split!(\"days\", \"seconds\", \"msecs\")(days, seconds, msecs);\n    assert(days == 12);\n    assert(seconds == 7 * 60);\n    assert(msecs == 501);\n\n    auto splitStruct = d.split!(\"days\", \"seconds\", \"msecs\")();\n    assert(splitStruct.days == 12);\n    assert(splitStruct.seconds == 7 * 60);\n    assert(splitStruct.msecs == 501);\n\n    auto fullSplitStruct = d.split();\n    assert(fullSplitStruct.weeks == 1);\n    assert(fullSplitStruct.days == 5);\n    assert(fullSplitStruct.hours == 0);\n    assert(fullSplitStruct.minutes == 7);\n    assert(fullSplitStruct.seconds == 0);\n    assert(fullSplitStruct.msecs == 501);\n    assert(fullSplitStruct.usecs == 223);\n    assert(fullSplitStruct.hnsecs == 0);\n\n    assert(d.split!\"minutes\"().minutes == d.total!\"minutes\");\n}\n\n{\n    auto d = dur!\"days\"(12);\n    assert(d.split!\"weeks\"().weeks == 1);\n    assert(d.split!\"days\"().days == 12);\n\n    assert(d.split().weeks == 1);\n    assert(d.split().days == 5);\n}\n\n{\n    auto d = dur!\"days\"(7) + dur!\"hnsecs\"(42);\n    assert(d.split!(\"seconds\", \"nsecs\")().nsecs == 4200);\n}\n\n{\n    auto d = dur!\"days\"(-7) + dur!\"hours\"(-9);\n    auto result = d.split!(\"days\", \"hours\")();\n    assert(result.days == -7);\n    assert(result.hours == -9);\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL944_244)\n",
						"parameters": [
							{
								"name": "units",
								"kind": "tuple"
							}
						],
						"char": 5,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "get",
								"line": 1149,
								"comment": "        $(RED Deprecated. Please use $(LREF split) instead. Too frequently,\n              get or one of the individual unit getters is used when the\n              function that gave the desired behavior was $(LREF total). This\n              should make it more explicit and help prevent bugs. This function\n              will be removed in June 2015.)\n\n        Returns the number of the given units in this $(D Duration)\n        (minus the larger units).\n\n        $(D d.get!\"minutes\"()) is equivalent to $(D d.split().minutes).\n",
								"type": "const pure nothrow @safe long()",
								"endline": 1163,
								"char": 10,
								"kind": "function"
							}
						],
						"name": "get",
						"line": 1149,
						"comment": "        $(RED Deprecated. Please use $(LREF split) instead. Too frequently,\n              get or one of the individual unit getters is used when the\n              function that gave the desired behavior was $(LREF total). This\n              should make it more explicit and help prevent bugs. This function\n              will be removed in June 2015.)\n\n        Returns the number of the given units in this $(D Duration)\n        (minus the larger units).\n\n        $(D d.get!\"minutes\"()) is equivalent to $(D d.split().minutes).\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL1166_246)\n---\nassert(dur!\"weeks\"(12).get!\"weeks\" == 12);\nassert(dur!\"weeks\"(12).get!\"days\" == 0);\n\nassert(dur!\"days\"(13).get!\"weeks\" == 1);\nassert(dur!\"days\"(13).get!\"days\" == 6);\n\nassert(dur!\"hours\"(49).get!\"days\" == 2);\nassert(dur!\"hours\"(49).get!\"hours\" == 1);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL1166_246)\n",
						"parameters": [
							{
								"name": "units",
								"deco": "Aya",
								"kind": "value"
							}
						],
						"char": 10,
						"kind": "template"
					},
					{
						"endchar": 5,
						"name": "weeks",
						"line": 1205,
						"comment": "        $(RED Deprecated. Please use $(LREF split) instead. Too frequently,\n              $(LREF get) or one of the individual unit getters is used when the\n              function that gave the desired behavior was $(LREF total). This\n              should make it more explicit and help prevent bugs. This function\n              will be removed in June 2015.)\n\n        Returns the number of weeks in this $(D Duration)\n        (minus the larger units).\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL1211_248)\n---\nassert(dur!\"weeks\"(12).weeks == 12);\nassert(dur!\"days\"(13).weeks == 1);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL1211_248)\n",
						"deco": "xFNaNbNdNfZl",
						"endline": 1208,
						"char": 20,
						"kind": "function",
						"storageClass": [
							"deprecated"
						]
					},
					{
						"endchar": 5,
						"name": "days",
						"line": 1238,
						"comment": "        $(RED Deprecated. Please use $(LREF split) instead. Too frequently,\n              $(LREF get) or one of the individual unit getters is used when the\n              function that gave the desired behavior was $(LREF total). This\n              should make it more explicit and help prevent bugs. This function\n              will be removed in June 2015.)\n\n        Returns the number of days in this $(D Duration)\n        (minus the larger units).\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL1244_250)\n---\nassert(dur!\"weeks\"(12).days == 0);\nassert(dur!\"days\"(13).days == 6);\nassert(dur!\"hours\"(49).days == 2);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL1244_250)\n",
						"deco": "xFNaNbNdNfZl",
						"endline": 1241,
						"char": 20,
						"kind": "function",
						"storageClass": [
							"deprecated"
						]
					},
					{
						"endchar": 5,
						"name": "hours",
						"line": 1273,
						"comment": "        $(RED Deprecated. Please use $(LREF split) instead. Too frequently,\n              $(LREF get) or one of the individual unit getters is used when the\n              function that gave the desired behavior was $(LREF total). This\n              should make it more explicit and help prevent bugs. This function\n              will be removed in June 2015.)\n\n        Returns the number of hours in this $(D Duration)\n        (minus the larger units).\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL1279_252)\n---\nassert(dur!\"days\"(8).hours == 0);\nassert(dur!\"hours\"(49).hours == 1);\nassert(dur!\"minutes\"(121).hours == 2);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL1279_252)\n",
						"deco": "xFNaNbNdNfZl",
						"endline": 1276,
						"char": 20,
						"kind": "function",
						"storageClass": [
							"deprecated"
						]
					},
					{
						"endchar": 5,
						"name": "minutes",
						"line": 1308,
						"comment": "        $(RED Deprecated. Please use $(LREF split) instead. Too frequently,\n              $(LREF get) or one of the individual unit getters is used when the\n              function that gave the desired behavior was $(LREF total). This\n              should make it more explicit and help prevent bugs. This function\n              will be removed in June 2015.)\n\n        Returns the number of minutes in this $(D Duration)\n        (minus the larger units).\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL1314_254)\n---\nassert(dur!\"hours\"(47).minutes == 0);\nassert(dur!\"minutes\"(127).minutes == 7);\nassert(dur!\"seconds\"(121).minutes == 2);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL1314_254)\n",
						"deco": "xFNaNbNdNfZl",
						"endline": 1311,
						"char": 20,
						"kind": "function",
						"storageClass": [
							"deprecated"
						]
					},
					{
						"endchar": 5,
						"name": "seconds",
						"line": 1343,
						"comment": "        $(RED Deprecated. Please use $(LREF split) instead. Too frequently,\n              $(LREF get) or one of the individual unit getters is used when the\n              function that gave the desired behavior was $(LREF total). This\n              should make it more explicit and help prevent bugs. This function\n              will be removed in June 2015.)\n\n        Returns the number of seconds in this $(D Duration)\n        (minus the larger units).\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL1349_256)\n---\nassert(dur!\"minutes\"(47).seconds == 0);\nassert(dur!\"seconds\"(127).seconds == 7);\nassert(dur!\"msecs\"(1217).seconds == 1);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL1349_256)\n",
						"deco": "xFNaNbNdNfZl",
						"endline": 1346,
						"char": 20,
						"kind": "function",
						"storageClass": [
							"deprecated"
						]
					},
					{
						"endchar": 5,
						"name": "fracSec",
						"line": 1377,
						"comment": "        $(RED Deprecated. Please use $(LREF split) instead. Too frequently,\n              $(LREF get) or one of the individual unit getters is used when the\n              function that gave the desired behavior was $(LREF total). This\n              should make it more explicit and help prevent bugs. This function\n              will be removed in June 2015.)\n\n        Returns the fractional seconds past the second in this $(D Duration).\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL1390_258)\n---\nassert(dur!\"msecs\"(1000).fracSec == FracSec.from!\"msecs\"(0));\nassert(dur!\"msecs\"(1217).fracSec == FracSec.from!\"msecs\"(217));\nassert(dur!\"usecs\"(43).fracSec == FracSec.from!\"usecs\"(43));\nassert(dur!\"hnsecs\"(50_007).fracSec == FracSec.from!\"hnsecs\"(50_007));\nassert(dur!\"nsecs\"(62_127).fracSec == FracSec.from!\"nsecs\"(62_100));\n\nassert(dur!\"msecs\"(-1000).fracSec == FracSec.from!\"msecs\"(-0));\nassert(dur!\"msecs\"(-1217).fracSec == FracSec.from!\"msecs\"(-217));\nassert(dur!\"usecs\"(-43).fracSec == FracSec.from!\"usecs\"(-43));\nassert(dur!\"hnsecs\"(-50_007).fracSec == FracSec.from!\"hnsecs\"(-50_007));\nassert(dur!\"nsecs\"(-62_127).fracSec == FracSec.from!\"nsecs\"(-62_100));\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL1390_258)\n",
						"deco": "xFNaNbNdNfZS4core4time7FracSec",
						"endline": 1387,
						"char": 23,
						"kind": "function",
						"storageClass": [
							"deprecated"
						]
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "total",
								"line": 1428,
								"comment": "        Returns the total number of the given units in this $(D Duration).\n        So, unlike $(D split), it does not strip out the larger units.\n",
								"type": "const pure nothrow @property @safe long()",
								"endline": 1443,
								"char": 20,
								"kind": "function"
							}
						],
						"name": "total",
						"line": 1428,
						"comment": "        Returns the total number of the given units in this $(D Duration).\n        So, unlike $(D split), it does not strip out the larger units.\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL1446_260)\n---\nassert(dur!\"weeks\"(12).total!\"weeks\" == 12);\nassert(dur!\"weeks\"(12).total!\"days\" == 84);\n\nassert(dur!\"days\"(13).total!\"weeks\" == 1);\nassert(dur!\"days\"(13).total!\"days\" == 13);\n\nassert(dur!\"hours\"(49).total!\"days\" == 2);\nassert(dur!\"hours\"(49).total!\"hours\" == 49);\n\nassert(dur!\"nsecs\"(2007).total!\"hnsecs\" == 20);\nassert(dur!\"nsecs\"(2007).total!\"nsecs\" == 2000);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL1446_260)\n",
						"parameters": [
							{
								"name": "units",
								"deco": "Aya",
								"kind": "value"
							}
						],
						"char": 20,
						"kind": "template"
					},
					{
						"endchar": 5,
						"name": "toString",
						"line": 1498,
						"comment": "        Converts this $(D Duration) to a $(D string).\n",
						"deco": "xFNaNbNfZAya",
						"endline": 1501,
						"char": 12,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "isNegative",
						"line": 1556,
						"comment": "        Returns whether this $(D Duration) is negative.\n",
						"deco": "xFNaNbNdNfZb",
						"endline": 1559,
						"char": 20,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "dur",
						"line": 1703,
						"comment": "    These allow you to construct a $(D Duration) from the given time units\n    with the given length.\n\n    You can either use the generic function $(D dur) and give it the units as\n    a $(D string) or use the named aliases.\n\n    The possible values for units are $(D \"weeks\"), $(D \"days\"), $(D \"hours\"),\n    $(D \"minutes\"), $(D \"seconds\"), $(D \"msecs\") (milliseconds), $(D \"usecs\"),\n    (microseconds), $(D \"hnsecs\") (hecto-nanoseconds, i.e. 100 ns), and\n    $(D \"nsecs\").\n\n    Examples:\n--------------------\n// Generic\nassert(dur!\"weeks\"(142).total!\"weeks\" == 142);\nassert(dur!\"days\"(142).total!\"days\" == 142);\nassert(dur!\"hours\"(142).total!\"hours\" == 142);\nassert(dur!\"minutes\"(142).total!\"minutes\" == 142);\nassert(dur!\"seconds\"(142).total!\"seconds\" == 142);\nassert(dur!\"msecs\"(142).total!\"msecs\" == 142);\nassert(dur!\"usecs\"(142).total!\"usecs\" == 142);\nassert(dur!\"hnsecs\"(142).total!\"hnsecs\" == 142);\nassert(dur!\"nsecs\"(142).total!\"nsecs\" == 100);\n\n// Non-generic\nassert(weeks(142).total!\"weeks\" == 142);\nassert(days(142).total!\"days\" == 142);\nassert(hours(142).total!\"hours\" == 142);\nassert(minutes(142).total!\"minutes\" == 142);\nassert(seconds(142).total!\"seconds\" == 142);\nassert(msecs(142).total!\"msecs\" == 142);\nassert(usecs(142).total!\"usecs\" == 142);\nassert(hnsecs(142).total!\"hnsecs\" == 142);\nassert(nsecs(142).total!\"nsecs\" == 100);\n--------------------\n\n    Params:\n        units  = The time units of the $(D Duration) (e.g. $(D \"days\")).\n        length = The number of units in the $(D Duration).\n",
						"type": "pure nothrow @safe Duration(long length)",
						"parameters": [
							{
								"name": "length",
								"deco": "l"
							}
						],
						"endline": 1715,
						"char": 10,
						"kind": "function"
					}
				],
				"name": "dur",
				"line": 1703,
				"comment": "    These allow you to construct a $(D Duration) from the given time units\n    with the given length.\n\n    You can either use the generic function $(D dur) and give it the units as\n    a $(D string) or use the named aliases.\n\n    The possible values for units are $(D \"weeks\"), $(D \"days\"), $(D \"hours\"),\n    $(D \"minutes\"), $(D \"seconds\"), $(D \"msecs\") (milliseconds), $(D \"usecs\"),\n    (microseconds), $(D \"hnsecs\") (hecto-nanoseconds, i.e. 100 ns), and\n    $(D \"nsecs\").\n\n    Examples:\n--------------------\n// Generic\nassert(dur!\"weeks\"(142).total!\"weeks\" == 142);\nassert(dur!\"days\"(142).total!\"days\" == 142);\nassert(dur!\"hours\"(142).total!\"hours\" == 142);\nassert(dur!\"minutes\"(142).total!\"minutes\" == 142);\nassert(dur!\"seconds\"(142).total!\"seconds\" == 142);\nassert(dur!\"msecs\"(142).total!\"msecs\" == 142);\nassert(dur!\"usecs\"(142).total!\"usecs\" == 142);\nassert(dur!\"hnsecs\"(142).total!\"hnsecs\" == 142);\nassert(dur!\"nsecs\"(142).total!\"nsecs\" == 100);\n\n// Non-generic\nassert(weeks(142).total!\"weeks\" == 142);\nassert(days(142).total!\"days\" == 142);\nassert(hours(142).total!\"hours\" == 142);\nassert(minutes(142).total!\"minutes\" == 142);\nassert(seconds(142).total!\"seconds\" == 142);\nassert(msecs(142).total!\"msecs\" == 142);\nassert(usecs(142).total!\"usecs\" == 142);\nassert(hnsecs(142).total!\"hnsecs\" == 142);\nassert(nsecs(142).total!\"nsecs\" == 100);\n--------------------\n\n    Params:\n        units  = The time units of the $(D Duration) (e.g. $(D \"days\")).\n        length = The number of units in the $(D Duration).\n",
				"parameters": [
					{
						"name": "units",
						"deco": "Aya",
						"kind": "value"
					}
				],
				"char": 10,
				"kind": "template"
			},
			{
				"name": "weeks",
				"line": 1717,
				"comment": "Ditto\n",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "days",
				"line": 1718,
				"comment": "Ditto\n",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "hours",
				"line": 1719,
				"comment": "Ditto\n",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "minutes",
				"line": 1720,
				"comment": "Ditto\n",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "seconds",
				"line": 1721,
				"comment": "Ditto\n",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "msecs",
				"line": 1722,
				"comment": "Ditto\n",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "usecs",
				"line": 1723,
				"comment": "Ditto\n",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "hnsecs",
				"line": 1724,
				"comment": "Ditto\n",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "nsecs",
				"line": 1725,
				"comment": "Ditto\n",
				"char": 1,
				"kind": "alias"
			},
			{
				"name": "TickDuration",
				"line": 1786,
				"comment": "   Represents a duration of time in system clock ticks.\n\n   The system clock ticks are the ticks of the system clock at the highest\n   precision that the system provides.\n",
				"members": [
					{
						"name": "ticksPerSec",
						"line": 1796,
						"comment": "       The number of ticks that the system clock has in one second.\n\n       If $(D ticksPerSec) is $(D 0), then then $(D TickDuration) failed to\n       get the value of $(D ticksPerSec) on the current system, and\n       $(D TickDuration) is not going to work. That would be highly abnormal\n       though.\n",
						"deco": "yl",
						"originalType": "long",
						"char": 27,
						"kind": "variable",
						"storageClass": [
							"static",
							"immutable"
						]
					},
					{
						"name": "appOrigin",
						"line": 1803,
						"comment": "        The tick of the system clock (as a $(D TickDuration)) when the\n        application started.\n",
						"deco": "yS4core4time12TickDuration",
						"originalType": "TickDuration",
						"char": 35,
						"kind": "variable",
						"storageClass": [
							"static",
							"immutable"
						]
					},
					{
						"endchar": 87,
						"name": "zero",
						"line": 1811,
						"comment": "        It's the same as $(D TickDuration(0)), but it's provided to be\n        consistent with $(D Duration) and $(D FracSec), which provide $(D zero)\n        properties.\n",
						"deco": "FNaNbNdNfZS4core4time12TickDuration",
						"endline": 1811,
						"char": 54,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 93,
						"name": "max",
						"line": 1816,
						"comment": "        Largest $(D TickDuration) possible.\n",
						"deco": "FNaNbNdNfZS4core4time12TickDuration",
						"endline": 1816,
						"char": 54,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 93,
						"name": "min",
						"line": 1821,
						"comment": "        Most negative $(D TickDuration) possible.\n",
						"deco": "FNaNbNdNfZS4core4time12TickDuration",
						"endline": 1821,
						"char": 54,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"offset": 0,
						"name": "length",
						"line": 1897,
						"comment": "       The number of system ticks in this $(D TickDuration).\n\n       You can convert this $(D length) into the number of seconds by dividing\n       it by $(D ticksPerSec) (or using one the appropriate property function\n       to do it).\n",
						"deco": "l",
						"char": 10,
						"kind": "variable"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "to",
								"line": 1910,
								"comment": "        Converts this $(D TickDuration) to the given units as either an integral\n        value or a floating point value.\n\n        Params:\n            units = The units to convert to. Accepts $(D \"seconds\") and smaller\n                    only.\n            T     = The type to convert to (either an integral type or a\n                    floating point type).\n",
								"type": "const pure nothrow @safe T()",
								"endline": 1937,
								"char": 7,
								"kind": "function"
							}
						],
						"name": "to",
						"line": 1910,
						"comment": "        Converts this $(D TickDuration) to the given units as either an integral\n        value or a floating point value.\n\n        Params:\n            units = The units to convert to. Accepts $(D \"seconds\") and smaller\n                    only.\n            T     = The type to convert to (either an integral type or a\n                    floating point type).\n",
						"parameters": [
							{
								"name": "units",
								"deco": "Aya",
								"kind": "value"
							},
							{
								"name": "T",
								"kind": "type"
							}
						],
						"char": 7,
						"kind": "template"
					},
					{
						"endchar": 5,
						"name": "seconds",
						"line": 1943,
						"comment": "        Returns the total number of seconds in this $(D TickDuration).\n",
						"deco": "xFNaNbNdNfZl",
						"endline": 1946,
						"char": 20,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "msecs",
						"line": 1966,
						"comment": "        Returns the total number of milliseconds in this $(D TickDuration).\n",
						"deco": "xFNaNbNdNfZl",
						"endline": 1969,
						"char": 20,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "usecs",
						"line": 1975,
						"comment": "        Returns the total number of microseconds in this $(D TickDuration).\n",
						"deco": "xFNaNbNdNfZl",
						"endline": 1978,
						"char": 20,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "hnsecs",
						"line": 1984,
						"comment": "        Returns the total number of hecto-nanoseconds in this $(D TickDuration).\n",
						"deco": "xFNaNbNdNfZl",
						"endline": 1987,
						"char": 20,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "nsecs",
						"line": 1993,
						"comment": "        Returns the total number of nanoseconds in this $(D TickDuration).\n",
						"deco": "xFNaNbNdNfZl",
						"endline": 1996,
						"char": 20,
						"kind": "function"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "from",
								"line": 2007,
								"comment": "        This allows you to construct a $(D TickDuration) from the given time\n        units with the given length.\n\n        Params:\n            units  = The time units of the $(D TickDuration) (e.g. $(D \"msecs\")).\n            length = The number of units in the $(D TickDuration).\n",
								"type": "pure nothrow @safe TickDuration(long length)",
								"parameters": [
									{
										"name": "length",
										"deco": "l"
									}
								],
								"endline": 2017,
								"char": 25,
								"kind": "function"
							}
						],
						"name": "from",
						"line": 2007,
						"comment": "        This allows you to construct a $(D TickDuration) from the given time\n        units with the given length.\n\n        Params:\n            units  = The time units of the $(D TickDuration) (e.g. $(D \"msecs\")).\n            length = The number of units in the $(D TickDuration).\n",
						"parameters": [
							{
								"name": "units",
								"deco": "Aya",
								"kind": "value"
							}
						],
						"char": 25,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opCast",
								"line": 2043,
								"comment": "        Returns a $(LREF Duration) with the same number of hnsecs as this\n        $(D TickDuration).\n        Note that the conventional way to convert between $(D TickDuration)\n        and $(D Duration) is using $(XREF conv, to), e.g.:\n        $(D tickDuration.to!Duration())\n",
								"type": "const pure nothrow @safe Duration()",
								"endline": 2047,
								"char": 14,
								"kind": "function"
							}
						],
						"name": "opCast",
						"line": 2043,
						"comment": "        Returns a $(LREF Duration) with the same number of hnsecs as this\n        $(D TickDuration).\n        Note that the conventional way to convert between $(D TickDuration)\n        and $(D Duration) is using $(XREF conv, to), e.g.:\n        $(D tickDuration.to!Duration())\n",
						"parameters": [
							{
								"name": "T",
								"kind": "type"
							}
						],
						"char": 14,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opOpAssign",
								"line": 2092,
								"comment": "        Adds or subtracts two $(D TickDuration)s as well as assigning the result\n        to this $(D TickDuration).\n\n        The legal types of arithmetic for $(D TickDuration) using this operator\n        are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD +=) $(TD TickDuration) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD -=) $(TD TickDuration) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            rhs = The $(D TickDuration) to add to or subtract from this\n                  $(D $(D TickDuration)).\n",
								"type": "pure nothrow ref @safe TickDuration(TickDuration rhs)",
								"parameters": [
									{
										"name": "rhs",
										"type": "TickDuration"
									}
								],
								"endline": 2097,
								"char": 22,
								"kind": "function"
							}
						],
						"name": "opOpAssign",
						"line": 2092,
						"comment": "        Adds or subtracts two $(D TickDuration)s as well as assigning the result\n        to this $(D TickDuration).\n\n        The legal types of arithmetic for $(D TickDuration) using this operator\n        are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD +=) $(TD TickDuration) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD -=) $(TD TickDuration) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            rhs = The $(D TickDuration) to add to or subtract from this\n                  $(D $(D TickDuration)).\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							}
						],
						"char": 22,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opBinary",
								"line": 2138,
								"comment": "        Adds or subtracts two $(D TickDuration)s.\n\n        The legal types of arithmetic for $(D TickDuration) using this operator\n        are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD +) $(TD TickDuration) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD -) $(TD TickDuration) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            rhs = The $(D TickDuration) to add to or subtract from this\n                  $(D TickDuration).\n",
								"type": "const pure nothrow @safe TickDuration(TickDuration rhs)",
								"parameters": [
									{
										"name": "rhs",
										"type": "TickDuration"
									}
								],
								"endline": 2142,
								"char": 18,
								"kind": "function"
							}
						],
						"name": "opBinary",
						"line": 2138,
						"comment": "        Adds or subtracts two $(D TickDuration)s.\n\n        The legal types of arithmetic for $(D TickDuration) using this operator\n        are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD +) $(TD TickDuration) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD -) $(TD TickDuration) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            rhs = The $(D TickDuration) to add to or subtract from this\n                  $(D TickDuration).\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							}
						],
						"char": 18,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opUnary",
								"line": 2159,
								"comment": "        Returns the negation of this $(D TickDuration).\n",
								"type": "const pure nothrow @safe TickDuration()",
								"endline": 2163,
								"char": 18,
								"kind": "function"
							}
						],
						"name": "opUnary",
						"line": 2159,
						"comment": "        Returns the negation of this $(D TickDuration).\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							}
						],
						"char": 18,
						"kind": "template"
					},
					{
						"endchar": 5,
						"name": "opCmp",
						"line": 2181,
						"comment": "       operator overloading \"<, >, <=, >=\"\n",
						"deco": "xFNaNbNfS4core4time12TickDurationZi",
						"parameters": [
							{
								"name": "rhs",
								"deco": "S4core4time12TickDuration"
							}
						],
						"endline": 2184,
						"char": 9,
						"kind": "function"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opOpAssign",
								"line": 2243,
								"comment": "        The legal types of arithmetic for $(D TickDuration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD *) $(TD long) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD *) $(TD floating point) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            value = The value to divide from this duration.\n",
								"type": "pure nothrow @safe void(T value)",
								"parameters": [
									{
										"name": "value",
										"type": "T"
									}
								],
								"endline": 2248,
								"char": 10,
								"kind": "function"
							}
						],
						"name": "opOpAssign",
						"line": 2243,
						"comment": "        The legal types of arithmetic for $(D TickDuration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD *) $(TD long) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD *) $(TD floating point) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            value = The value to divide from this duration.\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							},
							{
								"name": "T",
								"kind": "type"
							}
						],
						"char": 10,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opOpAssign",
								"line": 2291,
								"comment": "        The legal types of arithmetic for $(D TickDuration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD /) $(TD long) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD /) $(TD floating point) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            value = The value to divide from this $(D TickDuration).\n\n        Throws:\n            $(D TimeException) if an attempt to divide by $(D 0) is made.\n",
								"type": "pure @safe void(T value)",
								"parameters": [
									{
										"name": "value",
										"type": "T"
									}
								],
								"endline": 2299,
								"char": 10,
								"kind": "function"
							}
						],
						"name": "opOpAssign",
						"line": 2291,
						"comment": "        The legal types of arithmetic for $(D TickDuration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD /) $(TD long) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD /) $(TD floating point) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            value = The value to divide from this $(D TickDuration).\n\n        Throws:\n            $(D TimeException) if an attempt to divide by $(D 0) is made.\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							},
							{
								"name": "T",
								"kind": "type"
							}
						],
						"char": 10,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opBinary",
								"line": 2341,
								"comment": "        The legal types of arithmetic for $(D TickDuration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD *) $(TD long) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD *) $(TD floating point) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            value = The value to divide from this $(D TickDuration).\n",
								"type": "const pure nothrow @safe TickDuration(T value)",
								"parameters": [
									{
										"name": "value",
										"type": "T"
									}
								],
								"endline": 2346,
								"char": 18,
								"kind": "function"
							}
						],
						"name": "opBinary",
						"line": 2341,
						"comment": "        The legal types of arithmetic for $(D TickDuration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD *) $(TD long) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD *) $(TD floating point) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            value = The value to divide from this $(D TickDuration).\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							},
							{
								"name": "T",
								"kind": "type"
							}
						],
						"char": 18,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opBinary",
								"line": 2377,
								"comment": "        The legal types of arithmetic for $(D TickDuration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD /) $(TD long) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD /) $(TD floating point) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            value = The value to divide from this $(D TickDuration).\n\n        Throws:\n            $(D TimeException) if an attempt to divide by $(D 0) is made.\n",
								"type": "const pure @safe TickDuration(T value)",
								"parameters": [
									{
										"name": "value",
										"type": "T"
									}
								],
								"endline": 2385,
								"char": 18,
								"kind": "function"
							}
						],
						"name": "opBinary",
						"line": 2377,
						"comment": "        The legal types of arithmetic for $(D TickDuration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD /) $(TD long) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD /) $(TD floating point) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            value = The value to divide from this $(D TickDuration).\n\n        Throws:\n            $(D TimeException) if an attempt to divide by $(D 0) is made.\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							},
							{
								"name": "T",
								"kind": "type"
							}
						],
						"char": 18,
						"kind": "template"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 2407,
						"comment": "        Params:\n            ticks = The number of ticks in the TickDuration.\n",
						"deco": "FNaNbNcNflZS4core4time12TickDuration",
						"parameters": [
							{
								"name": "ticks",
								"deco": "l"
							}
						],
						"endline": 2410,
						"originalType": "pure nothrow ref @safe (long ticks)",
						"char": 24,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "currSystemTick",
						"line": 2444,
						"comment": "        The current system tick. The number of ticks per second varies from\n        system to system. $(D currSystemTick) uses a monotonic clock, so it's\n        intended for precision timing by comparing relative time values, not for\n        getting the current system time.\n\n        On Windows, $(D QueryPerformanceCounter) is used. On Mac OS X,\n        $(D mach_absolute_time) is used, while on other Posix systems,\n        $(D clock_gettime) is used. If $(D mach_absolute_time) or\n        $(D clock_gettime) is unavailable, then Posix systems use\n        $(D gettimeofday) (the decision is made when $(D TickDuration) is\n        compiled), which unfortunately, is not monotonic, but if\n        $(D mach_absolute_time) and $(D clock_gettime) aren't available, then\n        $(D gettimeofday) is the the best that there is.\n\n        $(RED Warning):\n            On some systems, the monotonic clock may stop counting when\n            the computer goes to sleep or hibernates. So, the monotonic\n            clock could be off if that occurs. This is known to happen\n            on Mac OS X. It has not been tested whether it occurs on\n            either Windows or on Linux.\n\n        Throws:\n            $(D TimeException) if it fails to get the time.\n",
						"deco": "FNbNdNeZS4core4time12TickDuration",
						"endline": 2489,
						"char": 35,
						"kind": "function",
						"storageClass": [
							"static"
						]
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"members": [
					{
						"endchar": 1,
						"name": "convert",
						"line": 2527,
						"comment": "    Generic way of converting between two time units. Conversions to smaller\n    units use truncating division. Years and months can be converted to each\n    other, small units can be converted to each other, but years and months\n    cannot be converted to or from smaller units (due to the varying number\n    of days in a month or year).\n\n    Params:\n        from  = The units of time to convert from.\n        to    = The units of time to convert to.\n        value = The value to convert.\n\n    Examples:\n--------------------\nassert(convert!(\"years\", \"months\")(1) == 12);\nassert(convert!(\"months\", \"years\")(12) == 1);\n\nassert(convert!(\"weeks\", \"days\")(1) == 7);\nassert(convert!(\"hours\", \"seconds\")(1) == 3600);\nassert(convert!(\"seconds\", \"days\")(1) == 0);\nassert(convert!(\"seconds\", \"days\")(86_400) == 1);\n\nassert(convert!(\"nsecs\", \"nsecs\")(1) == 1);\nassert(convert!(\"nsecs\", \"hnsecs\")(1) == 0);\nassert(convert!(\"hnsecs\", \"nsecs\")(1) == 100);\nassert(convert!(\"nsecs\", \"seconds\")(1) == 0);\nassert(convert!(\"seconds\", \"nsecs\")(1) == 1_000_000_000);\n--------------------\n",
						"type": "pure nothrow @safe long(long value)",
						"parameters": [
							{
								"name": "value",
								"deco": "l"
							}
						],
						"endline": 2574,
						"char": 6,
						"kind": "function"
					}
				],
				"name": "convert",
				"line": 2527,
				"comment": "    Generic way of converting between two time units. Conversions to smaller\n    units use truncating division. Years and months can be converted to each\n    other, small units can be converted to each other, but years and months\n    cannot be converted to or from smaller units (due to the varying number\n    of days in a month or year).\n\n    Params:\n        from  = The units of time to convert from.\n        to    = The units of time to convert to.\n        value = The value to convert.\n\n    Examples:\n--------------------\nassert(convert!(\"years\", \"months\")(1) == 12);\nassert(convert!(\"months\", \"years\")(12) == 1);\n\nassert(convert!(\"weeks\", \"days\")(1) == 7);\nassert(convert!(\"hours\", \"seconds\")(1) == 3600);\nassert(convert!(\"seconds\", \"days\")(1) == 0);\nassert(convert!(\"seconds\", \"days\")(86_400) == 1);\n\nassert(convert!(\"nsecs\", \"nsecs\")(1) == 1);\nassert(convert!(\"nsecs\", \"hnsecs\")(1) == 0);\nassert(convert!(\"hnsecs\", \"nsecs\")(1) == 100);\nassert(convert!(\"nsecs\", \"seconds\")(1) == 0);\nassert(convert!(\"seconds\", \"nsecs\")(1) == 1_000_000_000);\n--------------------\n",
				"parameters": [
					{
						"name": "from",
						"deco": "Aya",
						"kind": "value"
					},
					{
						"name": "to",
						"deco": "Aya",
						"kind": "value"
					}
				],
				"char": 6,
				"kind": "template"
			},
			{
				"name": "FracSec",
				"line": 2685,
				"comment": "    Represents fractional seconds.\n\n    This is the portion of the time which is smaller than a second and it cannot\n    hold values which would be greater than or equal to a second (or less than\n    or equal to a negative second).\n\n    It holds hnsecs internally, but you can create it using either milliseconds,\n    microseconds, or hnsecs. What it does is allow for a simple way to set or\n    adjust the fractional seconds portion of a $(D Duration) or a\n    $(XREF datetime, SysTime) without having to worry about whether you're\n    dealing with milliseconds, microseconds, or hnsecs.\n\n    $(D FracSec)'s functions which take time unit strings do accept\n    $(D \"nsecs\"), but because the resolution of $(D Duration) and\n    $(XREF datetime, SysTime) is hnsecs, you don't actually get precision higher\n    than hnsecs. $(D \"nsecs\") is accepted merely for convenience. Any values\n    given as nsecs will be converted to hnsecs using $(D convert) (which uses\n    truncating division when converting to smaller units).\n",
				"members": [
					{
						"endchar": 77,
						"name": "zero",
						"line": 2693,
						"comment": "        A $(D FracSec) of $(D 0). It's shorter than doing something like\n        $(D FracSec.from!\"msecs\"(0)) and more explicit than $(D FracSec.init).\n",
						"deco": "FNaNbNdNfZS4core4time7FracSec",
						"endline": 2693,
						"char": 49,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "from",
								"line": 2714,
								"comment": "        Create a $(D FracSec) from the given units ($(D \"msecs\"), $(D \"usecs\"),\n        or $(D \"hnsecs\")).\n\n        Params:\n            units = The units to create a FracSec from.\n            value = The number of the given units passed the second.\n\n        Throws:\n            $(D TimeException) if the given value would result in a $(D FracSec)\n            greater than or equal to $(D 1) second or less than or equal to\n            $(D -1) seconds.\n",
								"type": "pure @safe FracSec(long value)",
								"parameters": [
									{
										"name": "value",
										"deco": "l"
									}
								],
								"endline": 2723,
								"char": 20,
								"kind": "function"
							}
						],
						"name": "from",
						"line": 2714,
						"comment": "        Create a $(D FracSec) from the given units ($(D \"msecs\"), $(D \"usecs\"),\n        or $(D \"hnsecs\")).\n\n        Params:\n            units = The units to create a FracSec from.\n            value = The number of the given units passed the second.\n\n        Throws:\n            $(D TimeException) if the given value would result in a $(D FracSec)\n            greater than or equal to $(D 1) second or less than or equal to\n            $(D -1) seconds.\n",
						"parameters": [
							{
								"name": "units",
								"deco": "Aya",
								"kind": "value"
							}
						],
						"char": 20,
						"kind": "template"
					},
					{
						"members": [
							{
								"endchar": 5,
								"name": "opUnary",
								"line": 2765,
								"comment": "        Returns the negation of this $(D FracSec).\n",
								"type": "const pure nothrow @safe FracSec()",
								"endline": 2769,
								"char": 13,
								"kind": "function"
							}
						],
						"name": "opUnary",
						"line": 2765,
						"comment": "        Returns the negation of this $(D FracSec).\n",
						"parameters": [
							{
								"name": "op",
								"deco": "Aya",
								"kind": "value"
							}
						],
						"char": 13,
						"kind": "template"
					},
					{
						"endchar": 5,
						"name": "msecs",
						"line": 2787,
						"comment": "        The value of this $(D FracSec) as milliseconds.\n",
						"deco": "xFNaNbNdNfZi",
						"endline": 2790,
						"char": 19,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "msecs",
						"line": 2819,
						"comment": "        The value of this $(D FracSec) as milliseconds.\n\n        Params:\n            milliseconds = The number of milliseconds passed the second.\n\n        Throws:\n            $(D TimeException) if the given value is not less than $(D 1) second\n            and greater than a $(D -1) seconds.\n",
						"deco": "FNaNdNfiZv",
						"parameters": [
							{
								"name": "milliseconds",
								"deco": "i"
							}
						],
						"endline": 2824,
						"char": 20,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "usecs",
						"line": 2859,
						"comment": "        The value of this $(D FracSec) as microseconds.\n",
						"deco": "xFNaNbNdNfZi",
						"endline": 2862,
						"char": 19,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "usecs",
						"line": 2891,
						"comment": "        The value of this $(D FracSec) as microseconds.\n\n        Params:\n            microseconds = The number of microseconds passed the second.\n\n        Throws:\n            $(D TimeException) if the given value is not less than $(D 1) second\n            and greater than a $(D -1) seconds.\n",
						"deco": "FNaNdNfiZv",
						"parameters": [
							{
								"name": "microseconds",
								"deco": "i"
							}
						],
						"endline": 2896,
						"char": 20,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "hnsecs",
						"line": 2932,
						"comment": "        The value of this $(D FracSec) as hnsecs.\n",
						"deco": "xFNaNbNdNfZi",
						"endline": 2935,
						"char": 19,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "hnsecs",
						"line": 2964,
						"comment": "        The value of this $(D FracSec) as hnsecs.\n\n        Params:\n            hnsecs = The number of hnsecs passed the second.\n\n        Throws:\n            $(D TimeException) if the given value is not less than $(D 1) second\n            and greater than a $(D -1) seconds.\n",
						"deco": "FNaNdNfiZv",
						"parameters": [
							{
								"name": "hnsecs",
								"deco": "i"
							}
						],
						"endline": 2968,
						"char": 20,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "nsecs",
						"line": 3008,
						"comment": "        The value of this $(D FracSec) as nsecs.\n\n        Note that this does not give you any greater precision\n        than getting the value of this $(D FracSec) as hnsecs.\n",
						"deco": "xFNaNbNdNfZi",
						"endline": 3011,
						"char": 19,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "nsecs",
						"line": 3043,
						"comment": "        The value of this $(D FracSec) as nsecs.\n\n        Note that this does not give you any greater precision\n        than setting the value of this $(D FracSec) as hnsecs.\n\n        Params:\n            nsecs = The number of nsecs passed the second.\n\n        Throws:\n            $(D TimeException) if the given value is not less than $(D 1) second\n            and greater than a $(D -1) seconds.\n",
						"deco": "FNaNdNflZv",
						"parameters": [
							{
								"name": "nsecs",
								"deco": "l"
							}
						],
						"endline": 3048,
						"char": 20,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "toString",
						"line": 3102,
						"comment": "        Converts this $(D TickDuration) to a string.\n",
						"deco": "xFNaNbNfZAya",
						"endline": 3105,
						"char": 12,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 3273,
						"comment": "        Params:\n            msg  = The message for the exception.\n            file = The file where the exception occurred.\n            line = The line number where the exception occurred.\n            next = The previous exception in the chain of exceptions, if any.\n",
						"deco": "FNaNbNfAyaAyamC6object9ThrowableZC4core4time13TimeException",
						"parameters": [
							{
								"name": "msg",
								"deco": "Aya"
							},
							{
								"name": "file",
								"deco": "Aya",
								"default": "__FILE__"
							},
							{
								"name": "line",
								"deco": "m",
								"default": "cast(ulong)__LINE__"
							},
							{
								"name": "next",
								"deco": "C6object9Throwable",
								"default": "null"
							}
						],
						"endline": 3276,
						"originalType": "pure nothrow @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 3285,
						"comment": "        Params:\n            msg  = The message for the exception.\n            next = The previous exception in the chain of exceptions.\n            file = The file where the exception occurred.\n            line = The line number where the exception occurred.\n",
						"deco": "FNaNbNfAyaC6object9ThrowableAyamZC4core4time13TimeException",
						"parameters": [
							{
								"name": "msg",
								"deco": "Aya"
							},
							{
								"name": "next",
								"deco": "C6object9Throwable"
							},
							{
								"name": "file",
								"deco": "Aya",
								"default": "__FILE__"
							},
							{
								"name": "line",
								"deco": "m",
								"default": "cast(ulong)__LINE__"
							}
						],
						"endline": 3288,
						"originalType": "pure nothrow @safe (string msg, Throwable next, string file = __FILE__, size_t line = __LINE__)",
						"char": 5,
						"kind": "constructor"
					}
				],
				"name": "TimeException",
				"line": 3264,
				"comment": "    Exception type used by core.time.\n",
				"base": "Exception",
				"char": 1,
				"kind": "class"
			},
			{
				"endchar": 1,
				"name": "abs",
				"line": 3316,
				"comment": "    Returns the absolute value of a duration.\n",
				"deco": "FNaNbNfS4core4time8DurationZS4core4time8Duration",
				"parameters": [
					{
						"name": "duration",
						"deco": "S4core4time8Duration"
					}
				],
				"endline": 3319,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "abs",
				"line": 3322,
				"comment": " Ditto\n",
				"deco": "FNaNbNfS4core4time12TickDurationZS4core4time12TickDuration",
				"parameters": [
					{
						"name": "duration",
						"deco": "S4core4time12TickDuration"
					}
				],
				"endline": 3325,
				"char": 14,
				"kind": "function"
			}
		],
		"comment": "    Module containing core time functionality, such as Duration (which\n    represents a duration of time).\n\n    Various functions take a string (or strings) to represent a unit of time\n    (e.g. $(D convert!(\"days\", \"hours\")(numDays))). The valid strings to use\n    with such functions are \"years\", \"months\", \"weeks\", \"days\", \"hours\",\n    \"minutes\", \"seconds\", \"msecs\" (milliseconds), \"usecs\" (microseconds),\n    \"hnsecs\" (hecto-nanoseconds - i.e. 100 ns) or some subset thereof. There\n    are a few functions that also allow \"nsecs\", but very little actually\n    has precision greater than hnsecs.\n\n    $(BOOKTABLE Cheat Sheet,\n    $(TR $(TH Symbol) $(TH Description))\n    $(LEADINGROW Types)\n    $(TR $(TDNW $(LREF Duration)) $(TD Represents a duration of time of weeks\n    or less (kept internally as hnsecs). (e.g. 22 days or 700 seconds).))\n    $(TR $(TDNW $(LREF TickDuration)) $(TD Represents a duration of time in\n    system clock ticks, using the highest precision that the system provides.))\n    $(TR $(TDNW $(LREF FracSec)) $(TD Represents fractional seconds\n    (portions of time smaller than a second).))\n    $(LEADINGROW Functions)\n    $(TR $(TDNW $(LREF convert)) $(TD Generic way of converting between two\n    time units.))\n    $(TR $(TDNW $(LREF dur)) $(TD Allow constructing a $(LREF Duration) from\n    the given time units with the given length.))\n    $(TR $(TDNW $(LREF weeks)$(NBSP)$(LREF days)$(NBSP)$(LREF hours)$(BR)\n    $(LREF minutes)$(NBSP)$(LREF seconds)$(NBSP)$(LREF msecs)$(BR)\n    $(LREF usecs)$(NBSP)$(LREF hnsecs)$(NBSP)$(LREF nsecs))\n    $(TD Short-hands for $(D dur).))\n    $(TR $(TDNW $(LREF abs)) $(TD Returns the absolute value of a duration.))\n    )\n\n    $(BOOKTABLE Conversions,\n    $(TR $(TH )\n     $(TH From $(LREF Duration))\n     $(TH From $(LREF TickDuration))\n     $(TH From $(LREF FracSec))\n     $(TH From units)\n    )\n    $(TR $(TD $(B To $(LREF Duration)))\n     $(TD -)\n     $(TD $(D tickDuration.)$(SXREF conv, to)$(D !Duration()))\n     $(TD -)\n     $(TD $(D dur!\"msecs\"(5)) or $(D 5.msecs()))\n    )\n    $(TR $(TD $(B To $(LREF TickDuration)))\n     $(TD $(D duration.)$(SXREF conv, to)$(D !TickDuration()))\n     $(TD -)\n     $(TD -)\n     $(TD $(D TickDuration.from!\"msecs\"(msecs)))\n    )\n    $(TR $(TD $(B To $(LREF FracSec)))\n     $(TD $(D duration.fracSec))\n     $(TD -)\n     $(TD -)\n     $(TD $(D FracSec.from!\"msecs\"(msecs)))\n    )\n    $(TR $(TD $(B To units))\n     $(TD $(D duration.total!\"days\"))\n     $(TD $(D tickDuration.msecs))\n     $(TD $(D fracSec.msecs))\n     $(TD $(D convert!(\"days\", \"msecs\")(msecs)))\n    ))\n\n    Copyright: Copyright 2010 - 2012\n    License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n    Authors:   Jonathan M Davis and Kato Shoichi\n    Source:    $(DRUNTIMESRC core/_time.d)\n    Macros:\n    NBSP=&nbsp;\n    SXREF=<a href=\"std_$1.html#$2\">$(D $2)</a>\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/internal/convert.d",
		"name": "core.internal.convert",
		"members": [],
		"comment": " Written in the D programming language.\n This module provides functions to converting different values to const(ubyte)[]\n\n Copyright: Copyright Igor Stepanov 2013-2013.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Igor Stepanov\n Source: $(DRUNTIMESRC core/internal/_convert.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/internal/hash.d",
		"name": "core.internal.hash",
		"members": [],
		"comment": " Written in the D programming language.\n This module provides functions to uniform calculating hash values for different types\n\n Copyright: Copyright Igor Stepanov 2013-2013.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Igor Stepanov\n Source: $(DRUNTIMESRC core/internal/_hash.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/internal/traits.d",
		"name": "core.internal.traits",
		"members": [
			{
				"members": [
					{
						"name": "TypeTuple",
						"line": 14,
						"type": "TList",
						"char": 5,
						"kind": "alias"
					}
				],
				"name": "TypeTuple",
				"line": 12,
				"comment": "taken from std.typetuple.TypeTuple\n",
				"parameters": [
					{
						"name": "TList",
						"kind": "tuple"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [],
				"name": "Unqual",
				"line": 32,
				"comment": "taken from std.traits.Unqual\n",
				"parameters": [
					{
						"name": "T",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			},
			{
				"members": [],
				"name": "externDFunc",
				"line": 57,
				"comment": "used to declare an extern(D) function that is defined in a different module\n",
				"parameters": [
					{
						"name": "fqn",
						"deco": "Aya",
						"kind": "value"
					},
					{
						"name": "T",
						"type": "FT*",
						"kind": "type"
					},
					{
						"name": "FT",
						"kind": "type"
					}
				],
				"char": 1,
				"kind": "template"
			}
		],
		"comment": " Contains traits for runtime internal usage.\n\n Copyright: Copyright Digital Mars 2014 -.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Martin Nowak\n Source: $(DRUNTIMESRC core/internal/_traits.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/exception.d",
		"name": "core.exception",
		"members": [
			{
				"members": [],
				"name": "RangeError",
				"line": 20,
				"comment": " Thrown on a range error.\n",
				"base": "Error",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "AssertError",
				"line": 51,
				"comment": " Thrown on an assert error.\n",
				"base": "Error",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "FinalizeError",
				"line": 124,
				"comment": " Thrown on finalize error.\n",
				"base": "Error",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "HiddenFuncError",
				"line": 191,
				"comment": " Thrown on hidden function error.\n",
				"base": "Error",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "OutOfMemoryError",
				"line": 215,
				"comment": " Thrown on an out of memory error.\n",
				"base": "Error",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "InvalidMemoryOperationError",
				"line": 256,
				"comment": " Thrown on an invalid memory operation.\n\n An invalid memory operation error occurs in circumstances when the garbage\n collector has detected an operation it cannot reliably handle. The default\n D GC is not re-entrant, so this can happen due to allocations done from\n within finalizers called during a garbage collection cycle.\n",
				"base": "Error",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "SwitchError",
				"line": 292,
				"comment": " Thrown on a switch error.\n",
				"base": "Error",
				"char": 1,
				"kind": "class"
			},
			{
				"members": [],
				"name": "UnicodeException",
				"line": 323,
				"comment": " Thrown on a unicode conversion error.\n",
				"base": "Exception",
				"char": 1,
				"kind": "class"
			},
			{
				"name": "AssertHandler",
				"line": 371,
				"comment": "Gets/sets assert hander. null means the default handler is used.\n",
				"deco": "PFNbAyamAyaZv",
				"char": 1,
				"kind": "alias"
			},
			{
				"endchar": 1,
				"name": "assertHandler",
				"line": 374,
				"comment": "ditto\n",
				"deco": "FNbNdNeZPFNbAyamAyaZv",
				"endline": 377,
				"originalType": "nothrow @property @trusted AssertHandler()",
				"char": 25,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "assertHandler",
				"line": 380,
				"comment": "ditto\n",
				"deco": "FNbNdNePFNbAyamAyaZvZv",
				"parameters": [
					{
						"name": "handler",
						"deco": "PFNbAyamAyaZv"
					}
				],
				"endline": 383,
				"originalType": "nothrow @property @trusted void(AssertHandler handler)",
				"char": 16,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "setAssertHandler",
				"line": 393,
				"comment": " Overrides the default assert hander with a user-supplied version.\n $(RED Deprecated.\n   Please use $(LREF assertHandler) instead.)\n\n Params:\n  h = The new assert handler.  Set to null to use the default handler.\n",
				"deco": "FNbNePFNbAyamAyaZvZv",
				"parameters": [
					{
						"name": "h",
						"deco": "PFNbAyamAyaZv"
					}
				],
				"endline": 396,
				"originalType": "nothrow @trusted void(AssertHandler h)",
				"char": 17,
				"kind": "function",
				"storageClass": [
					"deprecated"
				]
			},
			{
				"endchar": 1,
				"name": "onAssertError",
				"line": 412,
				"comment": "\n\n\n\n A callback for assert errors in D.  The user-supplied assert handler will\n be called if one has been supplied, otherwise an AssertError will be thrown.\n\n Params:\n  file = The name of the file that signaled this error.\n  line = The line number on which this error occurred.\n",
				"deco": "UNbAyamZv",
				"parameters": [
					{
						"name": "file",
						"deco": "Aya",
						"default": "__FILE__"
					},
					{
						"name": "line",
						"deco": "m",
						"default": "cast(ulong)__LINE__"
					}
				],
				"endline": 417,
				"originalType": "nothrow extern (C) void(string file = __FILE__, size_t line = __LINE__)",
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "onAssertErrorMsg",
				"line": 429,
				"comment": " A callback for assert errors in D.  The user-supplied assert handler will\n be called if one has been supplied, otherwise an AssertError will be thrown.\n\n Params:\n  file = The name of the file that signaled this error.\n  line = The line number on which this error occurred.\n  msg  = An error message supplied by the user.\n",
				"deco": "UNbAyamAyaZv",
				"parameters": [
					{
						"name": "file",
						"deco": "Aya"
					},
					{
						"name": "line",
						"deco": "m"
					},
					{
						"name": "msg",
						"deco": "Aya"
					}
				],
				"endline": 434,
				"originalType": "nothrow extern (C) void(string file, size_t line, string msg)",
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "onUnittestErrorMsg",
				"line": 447,
				"comment": " A callback for unittest errors in D.  The user-supplied unittest handler\n will be called if one has been supplied, otherwise the error will be\n written to stderr.\n\n Params:\n  file = The name of the file that signaled this error.\n  line = The line number on which this error occurred.\n  msg  = An error message supplied by the user.\n",
				"deco": "UNbAyamAyaZv",
				"parameters": [
					{
						"name": "file",
						"deco": "Aya"
					},
					{
						"name": "line",
						"deco": "m"
					},
					{
						"name": "msg",
						"deco": "Aya"
					}
				],
				"endline": 450,
				"originalType": "nothrow extern (C) void(string file, size_t line, string msg)",
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "onRangeError",
				"line": 468,
				"comment": "\n\n\n\n A callback for array bounds errors in D.  A RangeError will be thrown.\n\n Params:\n  file = The name of the file that signaled this error.\n  line = The line number on which this error occurred.\n\n Throws:\n  RangeError.\n",
				"deco": "UNaNbNfAyamZv",
				"parameters": [
					{
						"name": "file",
						"deco": "Aya",
						"default": "__FILE__"
					},
					{
						"name": "line",
						"deco": "m",
						"default": "cast(ulong)__LINE__"
					}
				],
				"endline": 471,
				"originalType": "pure nothrow @safe extern (C) void(string file = __FILE__, size_t line = __LINE__)",
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "onFinalizeError",
				"line": 486,
				"comment": " A callback for finalize errors in D.  A FinalizeError will be thrown.\n\n Params:\n  info = The ClassInfo instance for the object that failed finalization.\n  e = The exception thrown during finalization.\n  file = The name of the file that signaled this error.\n  line = The line number on which this error occurred.\n\n Throws:\n  FinalizeError.\n",
				"deco": "UNaNbNfC14TypeInfo_ClassC6object9ThrowableAyamZv",
				"parameters": [
					{
						"name": "info",
						"deco": "C14TypeInfo_Class"
					},
					{
						"name": "e",
						"deco": "C6object9Throwable"
					},
					{
						"name": "file",
						"deco": "Aya",
						"default": "__FILE__"
					},
					{
						"name": "line",
						"deco": "m",
						"default": "cast(ulong)__LINE__"
					}
				],
				"endline": 489,
				"originalType": "pure nothrow @safe extern (C) void(ClassInfo info, Throwable e, string file = __FILE__, size_t line = __LINE__)",
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "onHiddenFuncError",
				"line": 499,
				"comment": " A callback for hidden function errors in D.  A HiddenFuncError will be\n thrown.\n\n Throws:\n  HiddenFuncError.\n",
				"deco": "UNaNbNfC6ObjectZv",
				"parameters": [
					{
						"name": "o",
						"deco": "C6Object"
					}
				],
				"endline": 502,
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "onOutOfMemoryError",
				"line": 512,
				"comment": " A callback for out of memory errors in D.  An OutOfMemoryError will be\n thrown.\n\n Throws:\n  OutOfMemoryError.\n",
				"deco": "UNaNbNePvZv",
				"parameters": [
					{
						"name": "pretend_sideffect",
						"deco": "Pv",
						"default": "null"
					}
				],
				"endline": 517,
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "onInvalidMemoryOperationError",
				"line": 527,
				"comment": " A callback for invalid memory operations in D.  An\n InvalidMemoryOperationError will be thrown.\n\n Throws:\n  InvalidMemoryOperationError.\n",
				"deco": "UNaNbNePvZv",
				"parameters": [
					{
						"name": "pretend_sideffect",
						"deco": "Pv",
						"default": "null"
					}
				],
				"endline": 533,
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "onSwitchError",
				"line": 546,
				"comment": " A callback for switch errors in D.  A SwitchError will be thrown.\n\n Params:\n  file = The name of the file that signaled this error.\n  line = The line number on which this error occurred.\n\n Throws:\n  SwitchError.\n",
				"deco": "UNaNbNfAyamZv",
				"parameters": [
					{
						"name": "file",
						"deco": "Aya",
						"default": "__FILE__"
					},
					{
						"name": "line",
						"deco": "m",
						"default": "cast(ulong)__LINE__"
					}
				],
				"endline": 549,
				"originalType": "pure nothrow @safe extern (C) void(string file = __FILE__, size_t line = __LINE__)",
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 1,
				"name": "onUnicodeError",
				"line": 564,
				"comment": " A callback for unicode errors in D.  A UnicodeException will be thrown.\n\n Params:\n  msg = Information about the error.\n  idx = String index where this error was detected.\n  file = The name of the file that signaled this error.\n  line = The line number on which this error occurred.\n\n Throws:\n  UnicodeException.\n",
				"deco": "UNaNfAyamAyamZv",
				"parameters": [
					{
						"name": "msg",
						"deco": "Aya"
					},
					{
						"name": "idx",
						"deco": "m"
					},
					{
						"name": "file",
						"deco": "Aya",
						"default": "__FILE__"
					},
					{
						"name": "line",
						"deco": "m",
						"default": "cast(ulong)__LINE__"
					}
				],
				"endline": 567,
				"originalType": "pure @safe extern (C) void(string msg, size_t idx, string file = __FILE__, size_t line = __LINE__)",
				"char": 17,
				"kind": "function"
			},
			{
				"endchar": 5,
				"name": "_d_assertm",
				"line": 593,
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"deco": "UPyS6object10ModuleInfokZv",
				"parameters": [
					{
						"name": "m",
						"deco": "PyS6object10ModuleInfo"
					},
					{
						"name": "line",
						"deco": "k"
					}
				],
				"endline": 596,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 5,
				"name": "_d_assert_msg",
				"line": 598,
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"deco": "UAyaAyakZv",
				"parameters": [
					{
						"name": "msg",
						"deco": "Aya"
					},
					{
						"name": "file",
						"deco": "Aya"
					},
					{
						"name": "line",
						"deco": "k"
					}
				],
				"endline": 601,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 5,
				"name": "_d_assert",
				"line": 603,
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"deco": "UAyakZv",
				"parameters": [
					{
						"name": "file",
						"deco": "Aya"
					},
					{
						"name": "line",
						"deco": "k"
					}
				],
				"endline": 606,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 5,
				"name": "_d_unittestm",
				"line": 610,
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"deco": "UPyS6object10ModuleInfokZv",
				"parameters": [
					{
						"name": "m",
						"deco": "PyS6object10ModuleInfo"
					},
					{
						"name": "line",
						"deco": "k"
					}
				],
				"endline": 613,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 5,
				"name": "_d_unittest_msg",
				"line": 615,
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"deco": "UAyaAyakZv",
				"parameters": [
					{
						"name": "msg",
						"deco": "Aya"
					},
					{
						"name": "file",
						"deco": "Aya"
					},
					{
						"name": "line",
						"deco": "k"
					}
				],
				"endline": 618,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 5,
				"name": "_d_unittest",
				"line": 620,
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"deco": "UAyakZv",
				"parameters": [
					{
						"name": "file",
						"deco": "Aya"
					},
					{
						"name": "line",
						"deco": "k"
					}
				],
				"endline": 623,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 5,
				"name": "_d_array_bounds",
				"line": 627,
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"deco": "UPyS6object10ModuleInfokZv",
				"parameters": [
					{
						"name": "m",
						"deco": "PyS6object10ModuleInfo"
					},
					{
						"name": "line",
						"deco": "k"
					}
				],
				"endline": 630,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 5,
				"name": "_d_arraybounds",
				"line": 632,
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"deco": "UAyakZv",
				"parameters": [
					{
						"name": "file",
						"deco": "Aya"
					},
					{
						"name": "line",
						"deco": "k"
					}
				],
				"endline": 635,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 5,
				"name": "_d_switch_error",
				"line": 639,
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"deco": "UPyS6object10ModuleInfokZv",
				"parameters": [
					{
						"name": "m",
						"deco": "PyS6object10ModuleInfo"
					},
					{
						"name": "line",
						"deco": "k"
					}
				],
				"endline": 642,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 5,
				"name": "_d_hidden_func",
				"line": 644,
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"deco": "UZv",
				"endline": 661,
				"char": 10,
				"kind": "function"
			}
		],
		"comment": " The exception module defines all system-level exceptions and provides a\n mechanism to alter system-level error handling.\n\n Copyright: Copyright Sean Kelly 2005 - 2013.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly and Jonathan M Davis\n Source:    $(DRUNTIMESRC core/_exception.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/vararg.d",
		"name": "core.vararg",
		"members": [],
		"comment": " The vararg module is intended to facilitate vararg manipulation in D.\n It should be interface compatible with the C module \"stdarg,\" and the\n two modules may share a common implementation if possible (as is done\n here).\n Copyright: Copyright Digital Mars 2000 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Walter Bright, Hauke Duden\n Source:    $(DRUNTIMESRC core/_vararg.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sync/condition.d",
		"name": "core.sync.condition",
		"members": [
			{
				"name": "Condition",
				"line": 56,
				"comment": "\n\n\n\n This class represents a condition variable as conceived by C.A.R. Hoare.  As\n per Mesa type monitors however, \"signal\" has been replaced with \"notify\" to\n indicate that control is not transferred to the waiter when a notification\n is sent.\n",
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 72,
						"comment": "\n\n\n\n Initializes a condition object which is associated with the supplied\n mutex object.\n\n Params:\n  m = The mutex with which this condition will be associated.\n\n Throws:\n  SyncException on error.\n",
						"deco": "FC4core4sync5mutex5MutexZC4core4sync9condition9Condition",
						"parameters": [
							{
								"name": "m",
								"deco": "C4core4sync5mutex5Mutex"
							}
						],
						"endline": 96,
						"originalType": "(Mutex m)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "mutex",
						"line": 128,
						"comment": "\n\n\n\n Gets the mutex associated with this condition.\n\n Returns:\n  The mutex associated with this condition.\n",
						"deco": "FNdZC4core4sync5mutex5Mutex",
						"endline": 131,
						"char": 21,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "wait",
						"line": 145,
						"comment": "\n\n\n\n Wait until notified.\n\n Throws:\n  SyncException on error.\n",
						"deco": "FZv",
						"endline": 157,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"in": {
							"endchar": 5,
							"name": "__require",
							"line": 178,
							"deco": "FZv",
							"endline": 178,
							"char": 5,
							"kind": "function"
						},
						"name": "wait",
						"line": 176,
						"comment": " Suspends the calling thread until a notification occurs or until the\n supplied time period has elapsed.\n\n Params:\n  val = The time to wait.\n\n In:\n  val must be non-negative.\n\n Throws:\n  SyncException on error.\n\n Returns:\n  true if notified before the timeout and false if not.\n",
						"deco": "FS4core4time8DurationZb",
						"parameters": [
							{
								"name": "val",
								"deco": "S4core4time8Duration"
							}
						],
						"endline": 210,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "notify",
						"line": 219,
						"comment": " Notifies one waiter.\n\n Throws:\n  SyncException on error.\n",
						"deco": "FZv",
						"endline": 231,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "notifyAll",
						"line": 240,
						"comment": " Notifies all waiters.\n\n Throws:\n  SyncException on error.\n",
						"deco": "FZv",
						"endline": 252,
						"char": 10,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "class"
			}
		],
		"comment": " The condition module provides a primitive for synchronized condition\n checking.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/sync/_condition.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sync/barrier.d",
		"name": "core.sync.barrier",
		"members": [
			{
				"name": "Barrier",
				"line": 45,
				"comment": "\n\n\n\n This class represents a barrier across which threads may only travel in\n groups of a specific size.\n",
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 62,
						"comment": "\n\n\n\n Initializes a barrier object which releases threads in groups of limit\n in size.\n\n Params:\n  limit = The number of waiting threads to release in unison.\n\n Throws:\n  SyncException on error.\n",
						"deco": "FkZC4core4sync7barrier7Barrier",
						"parameters": [
							{
								"name": "limit",
								"deco": "k"
							}
						],
						"endline": 74,
						"originalType": "(uint limit)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "wait",
						"line": 88,
						"comment": "\n\n\n\n Wait for the pre-determined number of threads and then proceed.\n\n Throws:\n  SyncException on error.\n",
						"deco": "FZv",
						"endline": 103,
						"char": 10,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "class"
			}
		],
		"comment": " The barrier module provides a primitive for synchronizing the progress of\n a group of threads.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/sync/_barrier.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sync/semaphore.d",
		"name": "core.sync.semaphore",
		"members": [
			{
				"name": "Semaphore",
				"line": 60,
				"comment": "\n\n\n\n This class represents a general counting semaphore as concieved by Edsger\n Dijkstra.  As per Mesa type monitors however, \"signal\" has been replaced\n with \"notify\" to indicate that control is not transferred to the waiter when\n a notification is sent.\n",
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 76,
						"comment": "\n\n\n\n Initializes a semaphore object with the specified initial count.\n\n Params:\n  count = The initial count for the semaphore.\n\n Throws:\n  SyncException on error.\n",
						"deco": "FkZC4core4sync9semaphore9Semaphore",
						"parameters": [
							{
								"name": "count",
								"deco": "k",
								"default": "0u"
							}
						],
						"endline": 96,
						"originalType": "(uint count = 0)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "wait",
						"line": 131,
						"comment": "\n\n\n\n Wait until the current count is above zero, then atomically decrement\n the count by one and return.\n\n Throws:\n  SyncException on error.\n",
						"deco": "FZv",
						"endline": 161,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"in": {
							"endchar": 5,
							"name": "__require",
							"line": 184,
							"deco": "FZv",
							"endline": 184,
							"char": 5,
							"kind": "function"
						},
						"name": "wait",
						"line": 182,
						"comment": " Suspends the calling thread until the current count moves above zero or\n until the supplied time period has elapsed.  If the count moves above\n zero in this interval, then atomically decrement the count by one and\n return true.  Otherwise, return false.\n\n Params:\n  period = The time to wait.\n\n In:\n  period must be non-negative.\n\n Throws:\n  SyncException on error.\n\n Returns:\n  true if notified before the timeout and false if not.\n",
						"deco": "FS4core4time8DurationZb",
						"parameters": [
							{
								"name": "period",
								"deco": "S4core4time8Duration"
							}
						],
						"endline": 256,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "notify",
						"line": 266,
						"comment": " Atomically increment the current count by one.  This will notify one\n waiter, if there are any in the queue.\n\n Throws:\n  SyncException on error.\n",
						"deco": "FZv",
						"endline": 285,
						"char": 10,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "tryWait",
						"line": 298,
						"comment": " If the current count is equal to zero, return.  Otherwise, atomically\n decrement the count by one and return true.\n\n Throws:\n  SyncException on error.\n\n Returns:\n  true if the count was above zero and false if not.\n",
						"deco": "FZb",
						"endline": 328,
						"char": 10,
						"kind": "function"
					}
				],
				"char": 1,
				"kind": "class"
			}
		],
		"comment": " The semaphore module provides a general use semaphore for synchronization.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/sync/_semaphore.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sync/rwmutex.d",
		"name": "core.sync.rwmutex",
		"members": [
			{
				"name": "ReadWriteMutex",
				"line": 55,
				"comment": "\n\n\n\n This class represents a mutex that allows any number of readers to enter,\n but when a writer enters, all other readers and writers are blocked.\n\n Please note that this mutex is not recursive and is intended to guard access\n to data only.  Also, no deadlock checking is in place because doing so would\n require dynamic memory allocation, which would reduce performance by an\n unacceptable amount.  As a result, any attempt to recursively acquire this\n mutex may well deadlock the caller, particularly if a write lock is acquired\n while holding a read lock, or vice-versa.  In practice, this should not be\n an issue however, because it is uncommon to call deeply into unknown code\n while holding a lock that simply protects data.\nExample:\n$(DDOX_UNITTEST_HEADER __unittestL402_321)\n---\nimport core.atomic, core.thread, core.sync.semaphore;\n\nstatic void runTest(ReadWriteMutex.Policy policy)\n{\n    scope mutex = new ReadWriteMutex(policy);\n    scope rdSemA = new Semaphore, rdSemB = new Semaphore,\n          wrSemA = new Semaphore, wrSemB = new Semaphore;\n    shared size_t numReaders, numWriters;\n\n    void readerFn()\n    {\n        synchronized (mutex.reader)\n        {\n            atomicOp!\"+=\"(numReaders, 1);\n            rdSemA.notify();\n            rdSemB.wait();\n            atomicOp!\"-=\"(numReaders, 1);\n        }\n    }\n\n    void writerFn()\n    {\n        synchronized (mutex.writer)\n        {\n            atomicOp!\"+=\"(numWriters, 1);\n            wrSemA.notify();\n            wrSemB.wait();\n            atomicOp!\"-=\"(numWriters, 1);\n        }\n    }\n\n    void waitQueued(size_t queuedReaders, size_t queuedWriters)\n    {\n        for (;;)\n        {\n            synchronized (mutex.m_commonMutex)\n            {\n                if (mutex.m_numQueuedReaders == queuedReaders &&\n                    mutex.m_numQueuedWriters == queuedWriters)\n                    break;\n            }\n            Thread.yield();\n        }\n    }\n\n    scope group = new ThreadGroup;\n\n    // 2 simultaneous readers\n    group.create(&readerFn); group.create(&readerFn);\n    rdSemA.wait(); rdSemA.wait();\n    assert(numReaders == 2);\n    rdSemB.notify(); rdSemB.notify();\n    group.joinAll();\n    assert(numReaders == 0);\n    foreach (t; group) group.remove(t);\n\n    // 1 writer at a time\n    group.create(&writerFn); group.create(&writerFn);\n    wrSemA.wait();\n    assert(!wrSemA.tryWait());\n    assert(numWriters == 1);\n    wrSemB.notify();\n    wrSemA.wait();\n    assert(numWriters == 1);\n    wrSemB.notify();\n    group.joinAll();\n    assert(numWriters == 0);\n    foreach (t; group) group.remove(t);\n\n    // reader and writer are mutually exclusive\n    group.create(&readerFn);\n    rdSemA.wait();\n    group.create(&writerFn);\n    waitQueued(0, 1);\n    assert(!wrSemA.tryWait());\n    assert(numReaders == 1 && numWriters == 0);\n    rdSemB.notify();\n    wrSemA.wait();\n    assert(numReaders == 0 && numWriters == 1);\n    wrSemB.notify();\n    group.joinAll();\n    assert(numReaders == 0 && numWriters == 0);\n    foreach (t; group) group.remove(t);\n\n    // writer and reader are mutually exclusive\n    group.create(&writerFn);\n    wrSemA.wait();\n    group.create(&readerFn);\n    waitQueued(1, 0);\n    assert(!rdSemA.tryWait());\n    assert(numReaders == 0 && numWriters == 1);\n    wrSemB.notify();\n    rdSemA.wait();\n    assert(numReaders == 1 && numWriters == 0);\n    rdSemB.notify();\n    group.joinAll();\n    assert(numReaders == 0 && numWriters == 0);\n    foreach (t; group) group.remove(t);\n\n    // policy determines whether queued reader or writers progress first\n    group.create(&writerFn);\n    wrSemA.wait();\n    group.create(&readerFn);\n    group.create(&writerFn);\n    waitQueued(1, 1);\n    assert(numReaders == 0 && numWriters == 1);\n    wrSemB.notify();\n\n    if (policy == ReadWriteMutex.Policy.PREFER_READERS)\n    {\n        rdSemA.wait();\n        assert(numReaders == 1 && numWriters == 0);\n        rdSemB.notify();\n        wrSemA.wait();\n        assert(numReaders == 0 && numWriters == 1);\n        wrSemB.notify();\n    }\n    else if (policy == ReadWriteMutex.Policy.PREFER_WRITERS)\n    {\n        wrSemA.wait();\n        assert(numReaders == 0 && numWriters == 1);\n        wrSemB.notify();\n        rdSemA.wait();\n        assert(numReaders == 1 && numWriters == 0);\n        rdSemB.notify();\n    }\n    group.joinAll();\n    assert(numReaders == 0 && numWriters == 0);\n    foreach (t; group) group.remove(t);\n}\nrunTest(ReadWriteMutex.Policy.PREFER_READERS);\nrunTest(ReadWriteMutex.Policy.PREFER_WRITERS);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL402_321)\n",
				"members": [
					{
						"members": [
							{
								"name": "PREFER_READERS",
								"line": 74,
								"value": "0",
								"comment": "Readers get preference.  This may starve writers.\n",
								"char": 9,
								"kind": "enum member"
							},
							{
								"name": "PREFER_WRITERS",
								"line": 75,
								"value": "1",
								"comment": "Writers get preference.  This may starve readers.\n",
								"char": 9,
								"kind": "enum member"
							}
						],
						"name": "Policy",
						"line": 72,
						"comment": " Defines the policy used by this mutex.  Currently, two policies are\n defined.\n\n The first will queue writers until no readers hold the mutex, then\n pass the writers through one at a time.  If a reader acquires the mutex\n while there are still writers queued, the reader will take precedence.\n\n The second will queue readers if there are any writers queued.  Writers\n are passed through one at a time, and once there are no writers present,\n all queued readers will be alerted.\n\n Future policies may offer a more even balance between reader and writer\n precedence.\n",
						"baseDeco": "i",
						"char": 5,
						"kind": "enum"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 93,
						"comment": "\n\n\n\n Initializes a read/write mutex object with the supplied policy.\n\n Params:\n  policy = The policy to use.\n\n Throws:\n  SyncException on error.\n",
						"deco": "FE4core4sync7rwmutex14ReadWriteMutex6PolicyZC4core4sync7rwmutex14ReadWriteMutex",
						"parameters": [
							{
								"name": "policy",
								"deco": "E4core4sync7rwmutex14ReadWriteMutex6Policy",
								"default": "cast(Policy)1"
							}
						],
						"endline": 113,
						"originalType": "(Policy policy = Policy.PREFER_WRITERS)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "policy",
						"line": 127,
						"comment": "\n\n\n\n Gets the policy used by this mutex.\n\n Returns:\n  The policy used by this mutex.\n",
						"deco": "FNdZE4core4sync7rwmutex14ReadWriteMutex6Policy",
						"endline": 130,
						"char": 22,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "reader",
						"line": 144,
						"comment": "\n\n\n\n Gets an object representing the reader lock for the associated mutex.\n\n Returns:\n  A reader sub-mutex.\n",
						"deco": "FNdZC4core4sync7rwmutex14ReadWriteMutex6Reader",
						"endline": 147,
						"char": 22,
						"kind": "function"
					},
					{
						"endchar": 5,
						"name": "writer",
						"line": 156,
						"comment": " Gets an object representing the writer lock for the associated mutex.\n\n Returns:\n  A writer sub-mutex.\n",
						"deco": "FNdZC4core4sync7rwmutex14ReadWriteMutex6Writer",
						"endline": 159,
						"char": 22,
						"kind": "function"
					},
					{
						"interfaces": [
							"Monitor"
						],
						"members": [
							{
								"endchar": 9,
								"name": "this",
								"line": 177,
								"comment": " Initializes a read/write mutex reader proxy object.\n",
								"deco": "FZC4core4sync7rwmutex14ReadWriteMutex6Reader",
								"endline": 181,
								"originalType": "()",
								"char": 9,
								"kind": "constructor"
							},
							{
								"endchar": 9,
								"name": "lock",
								"line": 187,
								"comment": " Acquires a read lock on the enclosing mutex.\n",
								"deco": "FNeZv",
								"endline": 198,
								"char": 23,
								"kind": "function",
								"overrides": [
									"object.Object.Monitor.lock"
								]
							},
							{
								"endchar": 9,
								"name": "unlock",
								"line": 204,
								"comment": " Releases a read lock on the enclosing mutex.\n",
								"deco": "FNeZv",
								"endline": 214,
								"char": 23,
								"kind": "function",
								"overrides": [
									"object.Object.Monitor.unlock"
								]
							},
							{
								"endchar": 9,
								"name": "tryLock",
								"line": 225,
								"comment": " Attempts to acquire a read lock on the enclosing mutex.  If one can\n be obtained without blocking, the lock is acquired and true is\n returned.  If not, the lock is not acquired and false is returned.\n\n Returns:\n  true if the lock was acquired and false if not.\n",
								"deco": "FZb",
								"endline": 234,
								"char": 14,
								"kind": "function"
							}
						],
						"name": "Reader",
						"line": 171,
						"comment": "\n\n\n\n This class can be considered a mutex in its own right, and is used to\n negotiate a read lock for the enclosing mutex.\n",
						"char": 5,
						"kind": "class"
					},
					{
						"interfaces": [
							"Monitor"
						],
						"members": [
							{
								"endchar": 9,
								"name": "this",
								"line": 280,
								"comment": " Initializes a read/write mutex writer proxy object.\n",
								"deco": "FZC4core4sync7rwmutex14ReadWriteMutex6Writer",
								"endline": 284,
								"originalType": "()",
								"char": 9,
								"kind": "constructor"
							},
							{
								"endchar": 9,
								"name": "lock",
								"line": 290,
								"comment": " Acquires a write lock on the enclosing mutex.\n",
								"deco": "FNeZv",
								"endline": 301,
								"char": 23,
								"kind": "function",
								"overrides": [
									"object.Object.Monitor.lock"
								]
							},
							{
								"endchar": 9,
								"name": "unlock",
								"line": 307,
								"comment": " Releases a write lock on the enclosing mutex.\n",
								"deco": "FNeZv",
								"endline": 330,
								"char": 23,
								"kind": "function",
								"overrides": [
									"object.Object.Monitor.unlock"
								]
							},
							{
								"endchar": 9,
								"name": "tryLock",
								"line": 341,
								"comment": " Attempts to acquire a write lock on the enclosing mutex.  If one can\n be obtained without blocking, the lock is acquired and true is\n returned.  If not, the lock is not acquired and false is returned.\n\n Returns:\n  true if the lock was acquired and false if not.\n",
								"deco": "FZb",
								"endline": 350,
								"char": 14,
								"kind": "function"
							}
						],
						"name": "Writer",
						"line": 274,
						"comment": "\n\n\n\n This class can be considered a mutex in its own right, and is used to\n negotiate a write lock for the enclosing mutex.\n",
						"char": 5,
						"kind": "class"
					}
				],
				"char": 1,
				"kind": "class"
			}
		],
		"comment": " The read/write mutex module provides a primitive for maintaining shared read\n access and mutually exclusive write access.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/sync/_rwmutex.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sync/config.d",
		"name": "core.sync.config",
		"members": [],
		"comment": " The config module contains utility routines and configuration information\n specific to this package.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/sync/_config.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sync/mutex.d",
		"name": "core.sync.mutex",
		"members": [
			{
				"interfaces": [
					"Monitor"
				],
				"members": [
					{
						"endchar": 5,
						"name": "this",
						"line": 61,
						"comment": "\n\n\n\n Initializes a mutex object.\n\n Throws:\n  SyncException on error.\n",
						"deco": "FZC4core4sync5mutex5Mutex",
						"endline": 83,
						"originalType": "()",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "this",
						"line": 92,
						"comment": " Initializes a mutex object and sets it as the monitor for o.\n\n In:\n  o must not already have a monitor.\n",
						"deco": "FC6ObjectZC4core4sync5mutex5Mutex",
						"parameters": [
							{
								"name": "o",
								"deco": "C6Object"
							}
						],
						"endline": 101,
						"originalType": "(Object o)",
						"char": 5,
						"kind": "constructor"
					},
					{
						"endchar": 5,
						"name": "lock",
						"line": 131,
						"comment": "\n\n\n\n If this lock is not already held by the caller, the lock is acquired,\n then the internal counter is incremented by one.\n\n Throws:\n  SyncException on error.\n",
						"deco": "FNeZv",
						"endline": 134,
						"char": 19,
						"kind": "function",
						"overrides": [
							"object.Object.Monitor.lock"
						]
					},
					{
						"endchar": 5,
						"name": "unlock",
						"line": 161,
						"comment": " Decrements the internal lock count by one.  If this brings the count to\n zero, the lock is released.\n\n Throws:\n  SyncException on error.\n",
						"deco": "FNeZv",
						"endline": 164,
						"char": 19,
						"kind": "function",
						"overrides": [
							"object.Object.Monitor.unlock"
						]
					},
					{
						"endchar": 5,
						"name": "tryLock",
						"line": 196,
						"comment": " If the lock is held by another caller, the method returns.  Otherwise,\n the lock is acquired if it is not already held, and then the internal\n counter is incremented by one.\n\n Throws:\n  SyncException on error.\n\n Returns:\n  true if the lock was acquired and false if not.\n",
						"deco": "FZb",
						"endline": 206,
						"char": 10,
						"kind": "function"
					}
				],
				"name": "Mutex",
				"line": 47,
				"comment": "\n\n\n\n This class represents a general purpose, recursive mutex.\n",
				"char": 1,
				"kind": "class"
			}
		],
		"comment": " The mutex module provides a primitive for maintaining mutually exclusive\n access.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/sync/_mutex.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/sync/exception.d",
		"name": "core.sync.exception",
		"members": [
			{
				"members": [],
				"name": "SyncException",
				"line": 21,
				"comment": " Base class for synchronization exceptions.\n",
				"base": "Exception",
				"char": 1,
				"kind": "class"
			}
		],
		"comment": " Define base class for synchronization exceptions.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/sync/_exception.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/cpuid.d",
		"name": "core.cpuid",
		"members": [
			{
				"name": "CacheInfo",
				"line": 101,
				"comment": "Cache size and behaviour\n",
				"members": [
					{
						"offset": 0,
						"name": "size",
						"line": 107,
						"comment": "Size of the cache, in kilobytes, per CPU.\n\nFor L1 unified (data + code) caches, this size is half the physical size.\n\n(we don't halve it for larger sizes, since normally\n\ndata size is much greater than code size for critical loops).\n",
						"deco": "m",
						"originalType": "size_t",
						"char": 12,
						"kind": "variable",
						"storageClass": [
							"@trusted"
						]
					},
					{
						"offset": 8,
						"name": "associativity",
						"line": 113,
						"comment": "Number of ways of associativity, eg:\n\n1 = direct mapped\n\n2 = 2-way set associative\n\n3 = 3-way set associative\n\nubyte.max = fully associative\n",
						"deco": "h",
						"char": 11,
						"kind": "variable",
						"storageClass": [
							"@trusted"
						]
					},
					{
						"offset": 12,
						"name": "lineSize",
						"line": 115,
						"comment": "Number of bytes read into the cache when a cache miss occurs.\n",
						"deco": "k",
						"char": 10,
						"kind": "variable",
						"storageClass": [
							"@trusted"
						]
					}
				],
				"char": 1,
				"kind": "struct"
			},
			{
				"name": "datacache",
				"line": 121,
				"comment": "$(RED Scheduled for deprecation. Please use $(D dataCaches) instead.)\n",
				"deco": "G5S4core5cpuid9CacheInfo",
				"char": 28,
				"kind": "variable",
				"storageClass": [
					"nothrow",
					"__gshared",
					"@nogc",
					"@trusted"
				]
			},
			{
				"endchar": 58,
				"name": "dataCaches",
				"line": 126,
				"comment": "The data caches. If there are fewer than 5 physical caches levels,\n\nthe remaining levels are set to size_t.max (== entire memory space)\n",
				"deco": "FNbNdNiNeZxG5S4core5cpuid9CacheInfo",
				"endline": 126,
				"originalType": "nothrow @nogc @property @trusted const(CacheInfo)[5]()",
				"char": 25,
				"kind": "function"
			},
			{
				"endchar": 54,
				"name": "vendor",
				"line": 131,
				"comment": "Returns vendor string, for display purposes only.\n\nDo NOT use this to determine features!\n\nNote that some CPUs have programmable vendorIDs.\n",
				"deco": "FNbNdNiNeZAya",
				"endline": 131,
				"char": 12,
				"kind": "function"
			},
			{
				"endchar": 47,
				"name": "processor",
				"line": 133,
				"comment": "Returns processor string, for display purposes only\n",
				"deco": "FNbNdNiNeZAya",
				"endline": 133,
				"char": 12,
				"kind": "function"
			},
			{
				"endchar": 55,
				"name": "x87onChip",
				"line": 136,
				"comment": "Does it have an x87 FPU on-chip?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 136,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 55,
				"name": "mmx",
				"line": 138,
				"comment": "Is MMX supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 138,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 55,
				"name": "sse",
				"line": 140,
				"comment": "Is SSE supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 140,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 56,
				"name": "sse2",
				"line": 142,
				"comment": "Is SSE2 supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 142,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 60,
				"name": "sse3",
				"line": 144,
				"comment": "Is SSE3 supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 144,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 61,
				"name": "ssse3",
				"line": 146,
				"comment": "Is SSSE3 supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 146,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 61,
				"name": "sse41",
				"line": 148,
				"comment": "Is SSE4.1 supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 148,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 61,
				"name": "sse42",
				"line": 150,
				"comment": "Is SSE4.2 supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 150,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 64,
				"name": "sse4a",
				"line": 152,
				"comment": "Is SSE4a supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 152,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 59,
				"name": "aes",
				"line": 154,
				"comment": "Is AES supported\n",
				"deco": "FNbNdNiNeZb",
				"endline": 154,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 65,
				"name": "hasPclmulqdq",
				"line": 156,
				"comment": "Is pclmulqdq supported\n",
				"deco": "FNbNdNiNeZb",
				"endline": 156,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 62,
				"name": "hasRdrand",
				"line": 158,
				"comment": "Is rdrand supported\n",
				"deco": "FNbNdNiNeZb",
				"endline": 158,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 5,
				"name": "avx",
				"line": 160,
				"comment": "Is AVX supported\n",
				"deco": "FNbNdNiNeZb",
				"endline": 164,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 44,
				"name": "vaes",
				"line": 166,
				"comment": "Is VEX-Encoded AES supported\n",
				"deco": "FNbNdNiNeZb",
				"endline": 166,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 54,
				"name": "hasVpclmulqdq",
				"line": 168,
				"comment": "Is vpclmulqdq supported\n",
				"deco": "FNbNdNiNeZb",
				"endline": 168,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 66,
				"name": "fma",
				"line": 170,
				"comment": "Is FMA supported\n",
				"deco": "FNbNdNiNeZb",
				"endline": 170,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 68,
				"name": "fp16c",
				"line": 172,
				"comment": "Is FP16C supported\n",
				"deco": "FNbNdNiNeZb",
				"endline": 172,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 70,
				"name": "avx2",
				"line": 174,
				"comment": "Is AVX2 supported\n",
				"deco": "FNbNdNiNeZb",
				"endline": 174,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 62,
				"name": "hle",
				"line": 176,
				"comment": "Is HLE (hardware lock elision) supported\n",
				"deco": "FNbNdNiNeZb",
				"endline": 176,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 62,
				"name": "rtm",
				"line": 178,
				"comment": "Is RTM (restricted transactional memory) supported\n",
				"deco": "FNbNdNiNeZb",
				"endline": 178,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 61,
				"name": "hasRdseed",
				"line": 180,
				"comment": "Is rdseed supported\n",
				"deco": "FNbNdNiNeZb",
				"endline": 180,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 58,
				"name": "hasSha",
				"line": 182,
				"comment": "Is SHA supported\n",
				"deco": "FNbNdNiNeZb",
				"endline": 182,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 64,
				"name": "amd3dnow",
				"line": 184,
				"comment": "Is AMD 3DNOW supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 184,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 68,
				"name": "amd3dnowExt",
				"line": 186,
				"comment": "Is AMD 3DNOW Ext supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 186,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 62,
				"name": "amdMmx",
				"line": 188,
				"comment": "Are AMD extensions to MMX supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 188,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 60,
				"name": "hasFxsr",
				"line": 190,
				"comment": "Is fxsave/fxrstor supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 190,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 60,
				"name": "hasCmov",
				"line": 192,
				"comment": "Is cmov supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 192,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 65,
				"name": "hasRdtsc",
				"line": 194,
				"comment": "Is rdtsc supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 194,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 65,
				"name": "hasCmpxchg8b",
				"line": 196,
				"comment": "Is cmpxchg8b supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 196,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 70,
				"name": "hasCmpxchg16b",
				"line": 198,
				"comment": "Is cmpxchg8b supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 198,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 5,
				"name": "hasSysEnterSysExit",
				"line": 200,
				"comment": "Is SYSENTER/SYSEXIT supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 206,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 61,
				"name": "has3dnowPrefetch",
				"line": 210,
				"comment": "Is 3DNow prefetch supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 211,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 75,
				"name": "hasLahfSahf",
				"line": 213,
				"comment": "Are LAHF and SAHF supported in 64-bit mode?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 213,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 66,
				"name": "hasPopcnt",
				"line": 215,
				"comment": "Is POPCNT supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 215,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 68,
				"name": "hasLzcnt",
				"line": 217,
				"comment": "Is LZCNT supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 217,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 64,
				"name": "isX86_64",
				"line": 219,
				"comment": "Is this an Intel64 or AMD 64?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 219,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 62,
				"name": "isItanium",
				"line": 222,
				"comment": "Is this an IA64 (Itanium) processor?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 222,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 59,
				"name": "hyperThreading",
				"line": 225,
				"comment": "Is hyperthreading supported?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 225,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 48,
				"name": "threadsPerCPU",
				"line": 227,
				"comment": "Returns number of threads per CPU\n",
				"deco": "FNbNdNiNeZk",
				"endline": 227,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 46,
				"name": "coresPerCPU",
				"line": 229,
				"comment": "Returns number of cores in CPU\n",
				"deco": "FNbNdNiNeZk",
				"endline": 229,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 61,
				"name": "preferAthlon",
				"line": 257,
				"comment": "Optimisation hints for assembly code.\n\n\n\nFor forward compatibility, the CPU is compared against different\n\nmicroarchitectures. For 32-bit x86, comparisons are made against\n\nthe Intel PPro/PII/PIII/PM family.\n\n\n\nThe major 32-bit x86 microarchitecture 'dynasties' have been:\n\n\n\n* Intel P6 (PentiumPro, PII, PIII, PM, Core, Core2).\n\n* AMD Athlon (K7, K8, K10).\n\n* Intel NetBurst (Pentium 4, Pentium D).\n\n* In-order Pentium (Pentium1, PMMX, Atom)\n\n\n\nOther early CPUs (Nx586, AMD K5, K6, Centaur C3, Transmeta,\n\nCyrix, Rise) were mostly in-order.\n\n\n\nSome new processors do not fit into the existing categories:\n\n\n\n* Intel Atom 230/330 (family 6, model 0x1C) is an in-order core.\n\n* Centaur Isiah = VIA Nano (family 6, model F) is an out-of-order core.\n\n\n\nWithin each dynasty, the optimisation techniques are largely\n\nidentical (eg, use instruction pairing for group 4). Major\n\ninstruction set improvements occur within each dynasty.\n\nDoes this CPU perform better on AMD K7 code than PentiumPro..Core2 code?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 257,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 68,
				"name": "preferPentium4",
				"line": 259,
				"comment": "Does this CPU perform better on Pentium4 code than PentiumPro..Core2 code?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 259,
				"char": 10,
				"kind": "function"
			},
			{
				"endchar": 96,
				"name": "preferPentium1",
				"line": 261,
				"comment": "Does this CPU perform better on Pentium I code than Pentium Pro code?\n",
				"deco": "FNbNdNiNeZb",
				"endline": 261,
				"char": 10,
				"kind": "function"
			},
			{
				"name": "stepping",
				"line": 271,
				"comment": "$(RED Warning: This field will be turned into a property in a future release.)\n\n\n\nProcessor type (vendor-dependent).\n\nThis should be visible ONLY for display purposes.\n",
				"deco": "k",
				"char": 10,
				"kind": "variable",
				"storageClass": [
					"nothrow",
					"__gshared",
					"@nogc",
					"@trusted"
				]
			},
			{
				"name": "model",
				"line": 271,
				"comment": "$(RED Warning: This field will be turned into a property in a future release.)\n\n\n\nProcessor type (vendor-dependent).\n\nThis should be visible ONLY for display purposes.\n",
				"deco": "k",
				"char": 20,
				"kind": "variable",
				"storageClass": [
					"nothrow",
					"__gshared",
					"@nogc",
					"@trusted"
				]
			},
			{
				"name": "family",
				"line": 271,
				"comment": "$(RED Warning: This field will be turned into a property in a future release.)\n\n\n\nProcessor type (vendor-dependent).\n\nThis should be visible ONLY for display purposes.\n",
				"deco": "k",
				"char": 27,
				"kind": "variable",
				"storageClass": [
					"nothrow",
					"__gshared",
					"@nogc",
					"@trusted"
				]
			},
			{
				"name": "numCacheLevels",
				"line": 273,
				"comment": "$(RED This field has been deprecated. Please use $(D cacheLevels) instead.)\n",
				"deco": "k",
				"init": "1u",
				"char": 10,
				"kind": "variable",
				"storageClass": [
					"nothrow",
					"__gshared",
					"@nogc",
					"@trusted"
				]
			},
			{
				"endchar": 59,
				"name": "cacheLevels",
				"line": 275,
				"comment": "The number of cache levels in the CPU.\n",
				"deco": "FNbNdNiNeZk",
				"endline": 275,
				"char": 20,
				"kind": "function",
				"storageClass": [
					"__gshared"
				]
			}
		],
		"comment": " Identify the characteristics of the host CPU, providing information\n about cache sizes and assembly optimisation hints. This module is\n provided primarily for assembly language programmers.\n\n References:\n Some of this information was extremely difficult to track down. Some of the\n documents below were found only in cached versions stored by search engines!\n This code relies on information found in:\n\n $(UL\n $(LI \"Intel(R) 64 and IA-32 Architectures Software Developers Manual,\n    Volume 2A: Instruction Set Reference, A-M\" (2007).\n )\n $(LI \"AMD CPUID Specification\", Advanced Micro Devices, Rev 2.28 (2008).\n )\n $(LI \"AMD Processor Recognition Application Note For Processors Prior to AMD\n    Family 0Fh Processors\", Advanced Micro Devices, Rev 3.13 (2005).\n )\n $(LI \"AMD Geode(TM) GX Processors Data Book\",\n    Advanced Micro Devices, Publication ID 31505E, (2005).\n )\n $(LI \"AMD K6 Processor Code Optimisation\", Advanced Micro Devices, Rev D (2000).\n )\n $(LI \"Application note 106: Software Customization for the 6x86 Family\",\n    Cyrix Corporation, Rev 1.5 (1998)\n )\n $(LI $(LINK http://www.datasheetcatalog.org/datasheet/nationalsemiconductor/GX1.pdf))\n $(LI \"Geode(TM) GX1 Processor Series Low Power Integrated X86 Solution\",\n   National Semiconductor, (2002)\n )\n $(LI \"The VIA Isaiah Architecture\", G. Glenn Henry, Centaur Technology, Inc (2008).\n )\n $(LI $(LINK http://www.sandpile.org/ia32/cpuid.htm))\n $(LI $(LINK http://www.akkadia.org/drepper/cpumemory.pdf))\n $(LI \"What every programmer should know about memory\",\n    Ulrich Depper, Red Hat, Inc., (2007).\n )\n $(LI \"CPU Identification by the Windows Kernel\", G. Chappell (2009).\n   $(LINK http://www.geoffchappell.com/viewer.htm?doc=studies/windows/km/cpu/cx8.htm)\n )\n $(LI \"Intel(R) Processor Identification and the CPUID Instruction, Application\n    Note 485\" (2009).\n )\n )\n\n Bugs: Currently only works on x86 and Itanium CPUs.\n      Many processors have bugs in their microcode for the CPUID instruction,\n      so sometimes the cache information may be incorrect.\n\n Copyright: Copyright Don Clugston 2007 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Don Clugston, Tomas Lindquist Olsen &lt;tomas@famolsen.dk&gt;\n Source:    $(DRUNTIMESRC core/_cpuid.d)\n",
		"kind": "module"
	},
	{
		"file": "../druntime/src/core/memory.d",
		"name": "core.memory",
		"members": [
			{
				"name": "GC",
				"line": 131,
				"comment": " This struct encapsulates all garbage collection functionality for the D\n programming language.\n",
				"members": [
					{
						"endchar": 5,
						"name": "enable",
						"line": 141,
						"comment": " Enables automatic garbage collection behavior if collections have\n previously been suspended by a call to disable.  This function is\n reentrant, and must be called once for every call to disable before\n automatic collections are enabled.\n",
						"deco": "FNbZv",
						"endline": 144,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "disable",
						"line": 154,
						"comment": " Disables automatic garbage collections performed to minimize the\n process footprint.  Collections may continue to occur in instances\n where the implementation deems necessary for correct program behavior,\n such as during an out of memory condition.  This function is reentrant,\n but enable must be called once for each call to disable.\n",
						"deco": "FNbZv",
						"endline": 157,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "collect",
						"line": 167,
						"comment": " Begins a full collection.  While the meaning of this may change based\n on the garbage collector implementation, typical behavior is to scan\n all stack segments for roots, mark accessible memory blocks as alive,\n and then to reclaim free space.  This action may need to suspend all\n running threads for at least part of the collection process.\n",
						"deco": "FNbZv",
						"endline": 170,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "minimize",
						"line": 177,
						"comment": " Indicates that the managed memory space be minimized by returning free\n physical memory to the operating system.  The amount of free memory\n returned depends on the allocator design and on program behavior.\n",
						"deco": "FNbZv",
						"endline": 180,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"members": [
							{
								"name": "NONE",
								"line": 189,
								"value": "0u",
								"comment": "No attributes set.\n",
								"char": 9,
								"kind": "enum member"
							},
							{
								"name": "FINALIZE",
								"line": 190,
								"value": "1u",
								"comment": "Finalize the data in this block on collect.\n",
								"char": 9,
								"kind": "enum member"
							},
							{
								"name": "NO_SCAN",
								"line": 191,
								"value": "2u",
								"comment": "Do not scan through this block on collect.\n",
								"char": 9,
								"kind": "enum member"
							},
							{
								"name": "NO_MOVE",
								"line": 192,
								"value": "4u",
								"comment": "Do not move this memory block on collect.\n",
								"char": 9,
								"kind": "enum member"
							},
							{
								"name": "APPENDABLE",
								"line": 214,
								"value": "8u",
								"comment": "        This block contains the info to allow appending.\n\n        This can be used to manually allocate arrays. Initial slice size is 0.\n\n        Note: The slice's useable size will not match the block size. Use\n        $(LREF capacity) to retrieve actual useable capacity.\n\n        Example:\n        ----\n        // Allocate the underlying array.\n        int*  pToArray = cast(int*)GC.malloc(10 * int.sizeof, GC.BlkAttr.NO_SCAN | GC.BlkAttr.APPENDABLE);\n        // Bind a slice. Check the slice has capacity information.\n        int[] slice = pToArray[0 .. 0];\n        assert(capacity(slice) > 0);\n        // Appending to the slice will not relocate it.\n        slice.length = 5;\n        slice ~= 1;\n        assert(slice.ptr == p);\n        ----\n",
								"char": 9,
								"kind": "enum member"
							},
							{
								"name": "NO_INTERIOR",
								"line": 222,
								"value": "16u",
								"comment": "        This block is guaranteed to have a pointer to its base while it is\n        alive.  Interior pointers can be safely ignored.  This attribute is\n        useful for eliminating false pointers in very large data structures\n        and is only implemented for data structures at least a page in size.\n",
								"char": 9,
								"kind": "enum member"
							}
						],
						"name": "BlkAttr",
						"line": 187,
						"comment": " Elements for a bit field representing memory block attributes.  These\n are manipulated via the getAttr, setAttr, clrAttr functions.\n",
						"baseDeco": "k",
						"char": 5,
						"kind": "enum"
					},
					{
						"name": "BlkInfo",
						"line": 235,
						"comment": " Contains aggregate information about a block of managed memory.  The\n purpose of this struct is to support a more efficient query style in\n instances where detailed information is needed.\n\n base = A pointer to the base of the block in question.\n size = The size of the block, calculated from base.\n attr = Attribute bits set on the memory block.\n",
						"deco": "S4core6memory8BlkInfo_",
						"char": 20,
						"kind": "alias"
					},
					{
						"endchar": 5,
						"name": "getAttr",
						"line": 251,
						"comment": " Returns a bit field representing all block attributes set for the memory\n referenced by p.  If p references memory not originally allocated by\n this garbage collector, points to the interior of a memory block, or if\n p is null, zero will be returned.\n\n Params:\n  p = A pointer to the root of a valid memory block or to null.\n\n Returns:\n  A bit field containing any bits set for the memory block referenced by\n  p or zero on error.\n",
						"deco": "FNbxPvZk",
						"parameters": [
							{
								"name": "p",
								"deco": "xPv"
							}
						],
						"endline": 254,
						"originalType": "nothrow uint(in void* p)",
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "getAttr",
						"line": 258,
						"comment": "ditto\n",
						"deco": "FNaNbPvZk",
						"parameters": [
							{
								"name": "p",
								"deco": "Pv"
							}
						],
						"endline": 261,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "setAttr",
						"line": 278,
						"comment": " Sets the specified bits for the memory references by p.  If p references\n memory not originally allocated by this garbage collector, points to the\n interior of a memory block, or if p is null, no action will be\n performed.\n\n Params:\n  p = A pointer to the root of a valid memory block or to null.\n  a = A bit field containing any bits to set for this memory block.\n\n Returns:\n  The result of a call to getAttr after the specified bits have been\n  set.\n",
						"deco": "FNbxPvkZk",
						"parameters": [
							{
								"name": "p",
								"deco": "xPv"
							},
							{
								"name": "a",
								"deco": "k"
							}
						],
						"endline": 281,
						"originalType": "nothrow uint(in void* p, uint a)",
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "setAttr",
						"line": 285,
						"comment": "ditto\n",
						"deco": "FNaNbPvkZk",
						"parameters": [
							{
								"name": "p",
								"deco": "Pv"
							},
							{
								"name": "a",
								"deco": "k"
							}
						],
						"endline": 288,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "clrAttr",
						"line": 305,
						"comment": " Clears the specified bits for the memory references by p.  If p\n references memory not originally allocated by this garbage collector,\n points to the interior of a memory block, or if p is null, no action\n will be performed.\n\n Params:\n  p = A pointer to the root of a valid memory block or to null.\n  a = A bit field containing any bits to clear for this memory block.\n\n Returns:\n  The result of a call to getAttr after the specified bits have been\n  cleared.\n",
						"deco": "FNbxPvkZk",
						"parameters": [
							{
								"name": "p",
								"deco": "xPv"
							},
							{
								"name": "a",
								"deco": "k"
							}
						],
						"endline": 308,
						"originalType": "nothrow uint(in void* p, uint a)",
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "clrAttr",
						"line": 312,
						"comment": "ditto\n",
						"deco": "FNaNbPvkZk",
						"parameters": [
							{
								"name": "p",
								"deco": "Pv"
							},
							{
								"name": "a",
								"deco": "k"
							}
						],
						"endline": 315,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "malloc",
						"line": 338,
						"comment": " Requests an aligned block of managed memory from the garbage collector.\n This memory may be deleted at will with a call to free, or it may be\n discarded and cleaned up automatically during a collection run.  If\n allocation fails, this function will call onOutOfMemory which is\n expected to throw an OutOfMemoryError.\n\n Params:\n  sz = The desired allocation size in bytes.\n  ba = A bitmask of the attributes to set on this block.\n  ti = TypeInfo to describe the memory. The GC might use this information\n       to improve scanning for pointers or to call finalizers.\n\n Returns:\n  A reference to the allocated memory or null if insufficient memory\n  is available.\n\n Throws:\n  OutOfMemoryError on allocation failure.\n",
						"deco": "FNaNbmkxC8TypeInfoZPv",
						"parameters": [
							{
								"name": "sz",
								"deco": "m"
							},
							{
								"name": "ba",
								"deco": "k",
								"default": "0u"
							},
							{
								"name": "ti",
								"deco": "xC8TypeInfo",
								"default": "null"
							}
						],
						"endline": 341,
						"originalType": "pure nothrow void*(size_t sz, uint ba = 0, const TypeInfo ti = null)",
						"char": 18,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "qalloc",
						"line": 364,
						"comment": " Requests an aligned block of managed memory from the garbage collector.\n This memory may be deleted at will with a call to free, or it may be\n discarded and cleaned up automatically during a collection run.  If\n allocation fails, this function will call onOutOfMemory which is\n expected to throw an OutOfMemoryError.\n\n Params:\n  sz = The desired allocation size in bytes.\n  ba = A bitmask of the attributes to set on this block.\n  ti = TypeInfo to describe the memory. The GC might use this information\n       to improve scanning for pointers or to call finalizers.\n\n Returns:\n  Information regarding the allocated memory block or BlkInfo.init on\n  error.\n\n Throws:\n  OutOfMemoryError on allocation failure.\n",
						"deco": "FNaNbmkxC8TypeInfoZS4core6memory8BlkInfo_",
						"parameters": [
							{
								"name": "sz",
								"deco": "m"
							},
							{
								"name": "ba",
								"deco": "k",
								"default": "0u"
							},
							{
								"name": "ti",
								"deco": "xC8TypeInfo",
								"default": "null"
							}
						],
						"endline": 367,
						"originalType": "pure nothrow BlkInfo(size_t sz, uint ba = 0, const TypeInfo ti = null)",
						"char": 20,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "calloc",
						"line": 391,
						"comment": " Requests an aligned block of managed memory from the garbage collector,\n which is initialized with all bits set to zero.  This memory may be\n deleted at will with a call to free, or it may be discarded and cleaned\n up automatically during a collection run.  If allocation fails, this\n function will call onOutOfMemory which is expected to throw an\n OutOfMemoryError.\n\n Params:\n  sz = The desired allocation size in bytes.\n  ba = A bitmask of the attributes to set on this block.\n  ti = TypeInfo to describe the memory. The GC might use this information\n       to improve scanning for pointers or to call finalizers.\n\n Returns:\n  A reference to the allocated memory or null if insufficient memory\n  is available.\n\n Throws:\n  OutOfMemoryError on allocation failure.\n",
						"deco": "FNaNbmkxC8TypeInfoZPv",
						"parameters": [
							{
								"name": "sz",
								"deco": "m"
							},
							{
								"name": "ba",
								"deco": "k",
								"default": "0u"
							},
							{
								"name": "ti",
								"deco": "xC8TypeInfo",
								"default": "null"
							}
						],
						"endline": 394,
						"originalType": "pure nothrow void*(size_t sz, uint ba = 0, const TypeInfo ti = null)",
						"char": 18,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "realloc",
						"line": 431,
						"comment": " If sz is zero, the memory referenced by p will be deallocated as if\n by a call to free.  A new memory block of size sz will then be\n allocated as if by a call to malloc, or the implementation may instead\n resize the memory block in place.  The contents of the new memory block\n will be the same as the contents of the old memory block, up to the\n lesser of the new and old sizes.  Note that existing memory will only\n be freed by realloc if sz is equal to zero.  The garbage collector is\n otherwise expected to later reclaim the memory block if it is unused.\n If allocation fails, this function will call onOutOfMemory which is\n expected to throw an OutOfMemoryError.  If p references memory not\n originally allocated by this garbage collector, or if it points to the\n interior of a memory block, no action will be taken.  If ba is zero\n (the default) and p references the head of a valid, known memory block\n then any bits set on the current block will be set on the new block if a\n reallocation is required.  If ba is not zero and p references the head\n of a valid, known memory block then the bits in ba will replace those on\n the current memory block and will also be set on the new block if a\n reallocation is required.\n\n Params:\n  p  = A pointer to the root of a valid memory block or to null.\n  sz = The desired allocation size in bytes.\n  ba = A bitmask of the attributes to set on this block.\n  ti = TypeInfo to describe the memory. The GC might use this information\n       to improve scanning for pointers or to call finalizers.\n\n Returns:\n  A reference to the allocated memory on success or null if sz is\n  zero.  On failure, the original value of p is returned.\n\n Throws:\n  OutOfMemoryError on allocation failure.\nExample:\nIssue 13111$(DDOX_UNITTEST_HEADER __unittestL437_323)\n---\nenum size1 = 1 << 11 + 1; // page in large object pool\nenum size2 = 1 << 22 + 1; // larger than large object pool size\n\nauto data1 = cast(ubyte*)GC.calloc(size1);\nauto data2 = cast(ubyte*)GC.realloc(data1, size2);\n\nBlkInfo info = query(data2);\nassert(info.size >= size2);\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL437_323)\n",
						"deco": "FNaNbPvmkxC8TypeInfoZPv",
						"parameters": [
							{
								"name": "p",
								"deco": "Pv"
							},
							{
								"name": "sz",
								"deco": "m"
							},
							{
								"name": "ba",
								"deco": "k",
								"default": "0u"
							},
							{
								"name": "ti",
								"deco": "xC8TypeInfo",
								"default": "null"
							}
						],
						"endline": 434,
						"originalType": "pure nothrow void*(void* p, size_t sz, uint ba = 0, const TypeInfo ti = null)",
						"char": 18,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "extend",
						"line": 475,
						"comment": " Requests that the managed memory block referenced by p be extended in\n place by at least mx bytes, with a desired extension of sz bytes.  If an\n extension of the required size is not possible or if p references memory\n not originally allocated by this garbage collector, no action will be\n taken.\n\n Params:\n  p  = A pointer to the root of a valid memory block or to null.\n  mx = The minimum extension size in bytes.\n  sz = The desired extension size in bytes.\n  ti = TypeInfo to describe the full memory block. The GC might use\n       this information to improve scanning for pointers or to\n       call finalizers.\n\n Returns:\n  The size in bytes of the extended memory block referenced by p or zero\n  if no extension occurred.\n\n Note:\n  Extend may also be used to extend slices (or memory blocks with\n  $(LREF APPENDABLE) info). However, use the return value only\n  as an indicator of success. $(LREF capacity) should be used to\n  retrieve actual useable slice capacity.\nExample:\nStandard extending$(DDOX_UNITTEST_HEADER __unittestL480_324)\n---\nsize_t size = 1000;\nint* p = cast(int*)GC.malloc(size * int.sizeof, GC.BlkAttr.NO_SCAN);\n\n//Try to extend the allocated data by 1000 elements, preferred 2000.\nsize_t u = GC.extend(p, 1000 * int.sizeof, 2000 * int.sizeof);\nif (u != 0)\n    size = u / int.sizeof;\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL480_324)\nExample:\nslice extending$(DDOX_UNITTEST_HEADER __unittestL491_325)\n---\nint[] slice = new int[](1000);\nint*  p     = slice.ptr;\n\n//Check we have access to capacity before attempting the extend\nif (slice.capacity)\n{\n    //Try to extend slice by 1000 elements, preferred 2000.\n    size_t u = GC.extend(p, 1000 * int.sizeof, 2000 * int.sizeof);\n    if (u != 0)\n    {\n        slice.length = slice.capacity;\n        assert(slice.length >= 2000);\n    }\n}\n\n\n---\n$(DDOX_UNITTEST_FOOTER __unittestL491_325)\n",
						"deco": "FNaNbPvmmxC8TypeInfoZm",
						"parameters": [
							{
								"name": "p",
								"deco": "Pv"
							},
							{
								"name": "mx",
								"deco": "m"
							},
							{
								"name": "sz",
								"deco": "m"
							},
							{
								"name": "ti",
								"deco": "xC8TypeInfo",
								"default": "null"
							}
						],
						"endline": 478,
						"originalType": "pure nothrow size_t(void* p, size_t mx, size_t sz, const TypeInfo ti = null)",
						"char": 19,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "reserve",
						"line": 520,
						"comment": " Requests that at least sz bytes of memory be obtained from the operating\n system and marked as free.\n\n Params:\n  sz = The desired size in bytes.\n\n Returns:\n  The actual number of bytes reserved or zero on error.\n",
						"deco": "FNbmZm",
						"parameters": [
							{
								"name": "sz",
								"deco": "m"
							}
						],
						"endline": 523,
						"originalType": "nothrow size_t(size_t sz)",
						"char": 19,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "free",
						"line": 537,
						"comment": " Deallocates the memory referenced by p.  If p is null, no action\n occurs.  If p references memory not originally allocated by this\n garbage collector, or if it points to the interior of a memory block,\n no action will be taken.  The block will not be finalized regardless\n of whether the FINALIZE attribute is set.  If finalization is desired,\n use delete instead.\n\n Params:\n  p = A pointer to the root of a valid memory block or to null.\n",
						"deco": "FNaNbPvZv",
						"parameters": [
							{
								"name": "p",
								"deco": "Pv"
							}
						],
						"endline": 540,
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "addrOf",
						"line": 558,
						"comment": " Returns the base address of the memory block containing p.  This value\n is useful to determine whether p is an interior pointer, and the result\n may be passed to routines such as sizeOf which may otherwise fail.  If p\n references memory not originally allocated by this garbage collector, if\n p is null, or if the garbage collector does not support this operation,\n null will be returned.\n\n Params:\n  p = A pointer to the root or the interior of a valid memory block or to\n      null.\n\n Returns:\n  The base address of the memory block referenced by p or null on error.\n",
						"deco": "FNbPNgvZPNgv",
						"parameters": [
							{
								"name": "p",
								"deco": "PNgv"
							}
						],
						"endline": 561,
						"char": 25,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "addrOf",
						"line": 565,
						"comment": "ditto\n",
						"deco": "FNaNbPvZPv",
						"parameters": [
							{
								"name": "p",
								"deco": "Pv"
							}
						],
						"endline": 568,
						"char": 18,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "sizeOf",
						"line": 584,
						"comment": " Returns the true size of the memory block referenced by p.  This value\n represents the maximum number of bytes for which a call to realloc may\n resize the existing block in place.  If p references memory not\n originally allocated by this garbage collector, points to the interior\n of a memory block, or if p is null, zero will be returned.\n\n Params:\n  p = A pointer to the root of a valid memory block or to null.\n\n Returns:\n  The size in bytes of the memory block referenced by p or zero on error.\n",
						"deco": "FNbxPvZm",
						"parameters": [
							{
								"name": "p",
								"deco": "xPv"
							}
						],
						"endline": 587,
						"originalType": "nothrow size_t(in void* p)",
						"char": 19,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "sizeOf",
						"line": 591,
						"comment": "ditto\n",
						"deco": "FNaNbPvZm",
						"parameters": [
							{
								"name": "p",
								"deco": "Pv"
							}
						],
						"endline": 594,
						"originalType": "pure nothrow size_t(void* p)",
						"char": 19,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "query",
						"line": 622,
						"comment": " Returns aggregate information about the memory block containing p.  If p\n references memory not originally allocated by this garbage collector, if\n p is null, or if the garbage collector does not support this operation,\n BlkInfo.init will be returned.  Typically, support for this operation\n is dependent on support for addrOf.\n\n Params:\n  p = A pointer to the root or the interior of a valid memory block or to\n      null.\n\n Returns:\n  Information regarding the memory block referenced by p or BlkInfo.init\n  on error.\n",
						"deco": "FNbxPvZS4core6memory8BlkInfo_",
						"parameters": [
							{
								"name": "p",
								"deco": "xPv"
							}
						],
						"endline": 625,
						"originalType": "nothrow BlkInfo(in void* p)",
						"char": 20,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "query",
						"line": 629,
						"comment": "ditto\n",
						"deco": "FNaNbPvZS4core6memory8BlkInfo_",
						"parameters": [
							{
								"name": "p",
								"deco": "Pv"
							}
						],
						"endline": 632,
						"originalType": "pure nothrow BlkInfo(void* p)",
						"char": 20,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "addRoot",
						"line": 680,
						"comment": " Adds an internal root pointing to the GC memory block referenced by p.\n As a result, the block referenced by p itself and any blocks accessible\n via it will be considered live until the root is removed again.\n\n If p is null, no operation is performed.\n\n Params:\n  p = A pointer into a GC-managed memory block or null.\n\n Example:\n ---\n // Typical C-style callback mechanism; the passed function\n // is invoked with the user-supplied context pointer at a\n // later point.\n extern(C) void addCallback(void function(void*), void*);\n\n // Allocate an object on the GC heap (this would usually be\n // some application-specific context data).\n auto context = new Object;\n\n // Make sure that it is not collected even if it is no\n // longer referenced from D code (stack, GC heap, …).\n GC.addRoot(cast(void*)context);\n\n // Also ensure that a moving collector does not relocate\n // the object.\n GC.setAttr(cast(void*)context, GC.BlkAttr.NO_MOVE);\n\n // Now context can be safely passed to the C library.\n addCallback(&myHandler, cast(void*)context);\n\n extern(C) void myHandler(void* ctx)\n {\n     // Assuming that the callback is invoked only once, the\n     // added root can be removed again now to allow the GC\n     // to collect it later.\n     GC.removeRoot(ctx);\n     GC.clrAttr(ctx, GC.BlkAttr.NO_MOVE);\n\n     auto context = cast(Object)ctx;\n     // Use context here…\n }\n ---\n",
						"deco": "FNbxPvZv",
						"parameters": [
							{
								"name": "p",
								"deco": "xPv"
							}
						],
						"endline": 683,
						"originalType": "nothrow void(in void* p)",
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "removeRoot",
						"line": 694,
						"comment": " Removes the memory block referenced by p from an internal list of roots\n to be scanned during a collection.  If p is null or is not a value\n previously passed to addRoot() then no operation is performed.\n\n Params:\n  p = A pointer into a GC-managed memory block or null.\n",
						"deco": "FNbxPvZv",
						"parameters": [
							{
								"name": "p",
								"deco": "xPv"
							}
						],
						"endline": 697,
						"originalType": "nothrow void(in void* p)",
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "addRange",
						"line": 728,
						"comment": " Adds $(D p[0 .. sz]) to the list of memory ranges to be scanned for\n pointers during a collection. If p is null, no operation is performed.\n\n Note that $(D p[0 .. sz]) is treated as an opaque range of memory assumed\n to be suitably managed by the caller. In particular, if p points into a\n GC-managed memory block, addRange does $(I not) mark this block as live.\n\n Params:\n  p  = A pointer to a valid memory address or to null.\n  sz = The size in bytes of the block to add. If sz is zero then the\n       no operation will occur. If p is null then sz must be zero.\n  ti = TypeInfo to describe the memory. The GC might use this information\n       to improve scanning for pointers or to call finalizers\n\n Example:\n ---\n // Allocate a piece of memory on the C heap.\n enum size = 1_000;\n auto rawMemory = core.stdc.stdlib.malloc(size);\n\n // Add it as a GC range.\n GC.addRange(rawMemory, size);\n\n // Now, pointers to GC-managed memory stored in\n // rawMemory will be recognized on collection.\n ---\n",
						"deco": "FNbxPvmxC8TypeInfoZv",
						"parameters": [
							{
								"name": "p",
								"deco": "xPv"
							},
							{
								"name": "sz",
								"deco": "m"
							},
							{
								"name": "ti",
								"deco": "xC8TypeInfo",
								"default": "null"
							}
						],
						"endline": 731,
						"originalType": "nothrow void(in void* p, size_t sz, const TypeInfo ti = null)",
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "removeRange",
						"line": 743,
						"comment": " Removes the memory range starting at p from an internal list of ranges\n to be scanned during a collection. If p is null or does not represent\n a value previously passed to addRange() then no operation is\n performed.\n\n Params:\n  p  = A pointer to a valid memory address or to null.\n",
						"deco": "FNbxPvZv",
						"parameters": [
							{
								"name": "p",
								"deco": "xPv"
							}
						],
						"endline": 746,
						"originalType": "nothrow void(in void* p)",
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					},
					{
						"endchar": 5,
						"name": "runFinalizers",
						"line": 759,
						"comment": " Runs any finalizer that is located in address range of the\n given code segment.  This is used before unloading shared\n libraries.  All matching objects which have a finalizer in this\n code segment are assumed to be dead, using them while or after\n calling this method has undefined behavior.\n\n Params:\n  segment = address range of a code segment.\n",
						"deco": "FxAvZv",
						"parameters": [
							{
								"name": "segment",
								"deco": "xAv"
							}
						],
						"endline": 762,
						"originalType": "void(in void[] segment)",
						"char": 17,
						"kind": "function",
						"storageClass": [
							"static"
						]
					}
				],
				"char": 1,
				"kind": "struct"
			}
		],
		"comment": " This module provides an interface to the garbage collector used by\n applications written in the D programming language. It allows the\n garbage collector in the runtime to be swapped without affecting\n binary compatibility of applications.\n\n Using this module is not necessary in typical D code. It is mostly\n useful when doing low-level memory management.\n\n Notes_to_implementors:\n $(UL\n $(LI On POSIX systems, the signals SIGUSR1 and SIGUSR2 are reserved\n   by this module for use in the garbage collector implementation.\n   Typically, they will be used to stop and resume other threads\n   when performing a collection, but an implementation may choose\n   not to use this mechanism (or not stop the world at all, in the\n   case of concurrent garbage collectors).)\n\n $(LI Registers, the stack, and any other memory locations added through\n   the $(D GC.$(LREF addRange)) function are always scanned conservatively.\n   This means that even if a variable is e.g. of type $(D float),\n   it will still be scanned for possible GC pointers. And, if the\n   word-interpreted representation of the variable matches a GC-managed\n   memory block's address, that memory block is considered live.)\n\n $(LI Implementations are free to scan the non-root heap in a precise\n   manner, so that fields of types like $(D float) will not be considered\n   relevant when scanning the heap. Thus, casting a GC pointer to an\n   integral type (e.g. $(D size_t)) and storing it in a field of that\n   type inside the GC heap may mean that it will not be recognized\n   if the memory block was allocated with precise type info or with\n   the $(D GC.BlkAttr.$(LREF NO_SCAN)) attribute.)\n\n $(LI Destructors will always be executed while other threads are\n   active; that is, an implementation that stops the world must not\n   execute destructors until the world has been resumed.)\n\n $(LI A destructor of an object must not access object references\n   within the object. This means that an implementation is free to\n   optimize based on this rule.)\n\n $(LI An implementation is free to perform heap compaction and copying\n   so long as no valid GC pointers are invalidated in the process.\n   However, memory allocated with $(D GC.BlkAttr.$(LREF NO_MOVE)) must\n   not be moved/copied.)\n\n $(LI Implementations must support interior pointers. That is, if the\n   only reference to a GC-managed memory block points into the\n   middle of the block rather than the beginning (for example), the\n   GC must consider the memory block live. The exception to this\n   rule is when a memory block is allocated with the\n   $(D GC.BlkAttr.$(LREF NO_INTERIOR)) attribute; it is the user's\n   responsibility to make sure such memory blocks have a proper pointer\n   to them when they should be considered live.)\n\n $(LI It is acceptable for an implementation to store bit flags into\n   pointer values and GC-managed memory blocks, so long as such a\n   trick is not visible to the application. In practice, this means\n   that only a stop-the-world collector can do this.)\n\n $(LI Implementations are free to assume that GC pointers are only\n   stored on word boundaries. Unaligned pointers may be ignored\n   entirely.)\n\n $(LI Implementations are free to run collections at any point. It is,\n   however, recommendable to only do so when an allocation attempt\n   happens and there is insufficient memory available.)\n )\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly, Alex Rønne Petersen\n Source:    $(DRUNTIMESRC core/_memory.d)\n",
		"kind": "module"
	}
]